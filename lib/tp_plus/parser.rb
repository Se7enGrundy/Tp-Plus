#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.10
# from Racc grammer file "".
#

require 'racc/parser.rb'
module TPPlus
  class Parser < Racc::Parser


  include TPPlus::Nodes

  attr_reader :interpreter
  def initialize(scanner, interpreter = TPPlus::Interpreter.new)
    @scanner       = scanner
    @interpreter   = interpreter
    super()
  end

  def next_token
    t = @scanner.next_token
    @interpreter.line_count += 1 if t && t[0] == :NEWLINE

    #puts t.inspect
    t
  end

  def parse
    do_parse
    @interpreter
  rescue Racc::ParseError => e
    raise "Parse error on line #{@interpreter.line_count+1}: #{e}"
  end
##### State transition tables begin ###

racc_action_table = [
    62,    20,    33,    25,    24,    25,    25,    33,    24,   182,
    57,    33,    33,    70,    30,    63,    71,   201,   202,   159,
    33,    33,    34,   146,   145,    45,    23,    34,   203,   203,
   203,    34,    34,    54,   163,    60,    20,    33,    25,    24,
    34,    34,   -59,    26,   153,   -59,    27,    18,    19,    30,
    73,    21,    22,    28,    58,    53,    61,    34,    74,    75,
   151,    23,   155,    84,    85,    88,    89,    86,    87,   155,
    90,    91,    93,    94,    95,    97,    92,    96,    26,   103,
   102,    27,    18,    19,   159,    57,    21,    22,    28,    20,
   150,    25,    24,   236,    47,    46,    45,   149,    57,   160,
    45,   148,    30,    20,    33,    25,    24,   147,    54,    45,
    60,   152,   225,    45,    23,   166,    30,   222,   223,   224,
   226,    54,    95,    60,    34,    96,   136,   135,    23,    58,
    53,    26,   134,   167,    27,    18,    19,   168,   129,    21,
    22,    28,    58,    53,   -56,    26,   170,   -56,    27,    18,
    19,   171,   172,    21,    22,    28,    20,    33,    25,    24,
   123,   122,   120,   121,   118,   173,   119,   -57,   117,    30,
   -57,   -58,   174,   175,   -58,   176,   177,    34,   129,    47,
    46,    23,   179,    84,    85,    88,    89,    86,    87,   124,
    90,    91,    93,    94,    95,    97,    92,    96,    26,   101,
    57,    27,    18,    19,    57,   186,    21,    22,    28,    20,
    33,    25,    24,    57,   100,    45,   -73,   187,    57,    45,
   166,   129,    30,    54,   190,    60,   191,    54,    45,    60,
    34,    47,    46,    45,    23,   192,    54,   193,    60,   194,
   195,    54,   196,    60,    58,    53,   197,   129,    58,    53,
    57,    26,   129,    57,    27,    18,    19,    58,    53,    21,
    22,    28,    58,    53,    57,    45,    45,    57,    45,    47,
    46,    45,    80,    54,    63,    60,    54,    76,    60,    45,
   208,    57,    45,    47,    46,    45,   209,    54,   210,    60,
    54,    61,    60,    72,    58,    53,    45,    58,    53,    57,
    47,    46,    45,    45,    54,    57,    60,   215,    58,    53,
    20,    58,    53,    20,    45,    47,    46,    45,   215,   129,
    45,   220,    54,   221,    60,    58,    53,    45,    54,   227,
    60,    47,    46,    45,    47,    46,    45,    47,    46,    45,
    47,    46,    45,    58,    53,    47,    46,    45,   228,    58,
    53,    84,    85,    88,    89,    86,    87,   229,    90,    91,
    93,    94,    95,    97,    92,    96,    84,    85,    88,    89,
    86,    87,   230,    90,    91,    93,    94,    95,    97,    92,
    96,   137,    47,    46,    45,   231,   232,   233,    41,    40,
    84,    85,    88,    89,    86,    87,   142,    90,    91,    93,
    94,    95,    97,    92,    96,    84,    85,    88,    89,    86,
    87,    45,    90,    91,    93,    94,    95,    97,    92,    96,
    84,    85,    88,    89,    86,    87,    39,    90,    91,    93,
    94,    95,    97,    92,    96,    84,    85,    88,    89,    86,
    87,    20,    90,    91,    93,    94,    95,    97,    92,    96,
    84,    85,    88,    89,    86,    87,   243,    90,    91,    93,
    94,    95,    97,    92,    96,    84,    85,    88,    89,    86,
    87,   244,    90,    91,    93,    94,    95,    97,    92,    96,
    84,    85,    88,    89,    86,    87,   245,    90,    91,    93,
    94,    95,    97,    92,    96,    84,    85,    88,    89,    86,
    87,   246,    90,    91,    93,    94,    95,    97,    92,    96,
    84,    85,    88,    89,    86,    87,   247,    90,    91,    93,
    94,    95,    97,    92,    96,   249,   250,    36,   254,    45,
   256 ]

racc_action_check = [
    23,     4,     4,     4,     4,   199,   198,    38,   247,   157,
    73,     2,   204,    29,     4,    23,    29,   189,   189,   157,
   125,   207,     4,   104,   104,    73,     4,    38,   199,   198,
   247,     2,   204,    73,   136,    73,    66,    66,    66,    66,
   125,   207,    13,     4,   123,    13,     4,     4,     4,    66,
    32,     4,     4,     4,    73,    73,    23,    66,    32,    32,
   121,    66,   126,    66,    66,    66,    66,    66,    66,   127,
    66,    66,    66,    66,    66,    66,    66,    66,    66,    59,
    59,    66,    66,    66,   128,    71,    66,    66,    66,    37,
   120,    37,    37,   228,   228,   228,   228,   119,    70,   132,
    71,   118,    37,     0,     0,     0,     0,   117,    71,    80,
    71,   122,   219,    70,    37,   137,     0,   219,   219,   219,
   219,    70,    99,    70,     0,    99,    78,    75,     0,    71,
    71,    37,    74,   143,    37,    37,    37,   144,    72,    37,
    37,    37,    70,    70,     8,     0,   147,     8,     0,     0,
     0,   148,   149,     0,     0,     0,    68,    68,    68,    68,
    62,    62,    62,    62,    62,   150,    62,     6,    62,    68,
     6,     9,   151,   152,     9,   153,   154,    68,    69,    62,
    62,    68,   156,    68,    68,    68,    68,    68,    68,    63,
    68,    68,    68,    68,    68,    68,    68,    68,    68,    58,
   135,    68,    68,    68,    81,   160,    68,    68,    68,   155,
   155,   155,   155,    82,    57,   135,    50,   163,    22,    81,
   164,   166,   155,   135,   170,   135,   171,    81,    82,    81,
   155,    22,    22,    22,   155,   172,    82,   173,    82,   174,
   175,    22,   176,    22,   135,   135,   180,   182,    81,    81,
    83,   155,   183,    54,   155,   155,   155,    82,    82,   155,
   155,   155,    22,    22,   134,    83,   186,    27,    54,   231,
   231,   231,    48,    83,    45,    83,    54,    36,    54,   134,
   200,    53,    27,    61,    61,    61,   201,   134,   202,   134,
    27,   203,    27,    30,    83,    83,    53,    54,    54,    40,
    21,    21,    21,    28,    53,    26,    53,   208,   134,   134,
   209,    27,    27,    25,    40,   159,   159,   159,   213,   215,
    26,   216,    40,   217,    40,    53,    53,    24,    26,   221,
    26,   146,   146,   146,   100,   100,   100,   101,   101,   101,
    39,    39,    39,    40,    40,   210,   210,   210,   222,    26,
    26,    79,    79,    79,    79,    79,    79,   223,    79,    79,
    79,    79,    79,    79,    79,    79,    98,    98,    98,    98,
    98,    98,   224,    98,    98,    98,    98,    98,    98,    98,
    98,    79,   229,   229,   229,   225,   226,   227,    20,    19,
   162,   162,   162,   162,   162,   162,    98,   162,   162,   162,
   162,   162,   162,   162,   162,   161,   161,   161,   161,   161,
   161,   230,   161,   161,   161,   161,   161,   161,   161,   161,
    49,    49,    49,    49,    49,    49,    18,    49,    49,    49,
    49,    49,    49,    49,    49,   133,   133,   133,   133,   133,
   133,   232,   133,   133,   133,   133,   133,   133,   133,   133,
   131,   131,   131,   131,   131,   131,   234,   131,   131,   131,
   131,   131,   131,   131,   131,   140,   140,   140,   140,   140,
   140,   235,   140,   140,   140,   140,   140,   140,   140,   140,
   141,   141,   141,   141,   141,   141,   237,   141,   141,   141,
   141,   141,   141,   141,   141,   139,   139,   139,   139,   139,
   139,   238,   139,   139,   139,   139,   139,   139,   139,   139,
   130,   130,   130,   130,   130,   130,   239,   130,   130,   130,
   130,   130,   130,   130,   130,   242,   244,     1,   248,   249,
   251 ]

racc_action_pointer = [
   100,   527,     7,   nil,    -2,   nil,   122,   nil,    99,   126,
   nil,   nil,   nil,    -3,   nil,   nil,   nil,   nil,   368,   331,
   360,   274,   205,    -2,   299,   310,   292,   254,   275,   -32,
   276,   nil,    21,   nil,   nil,   nil,   277,    86,     3,   314,
   286,   nil,   nil,   nil,   nil,   257,   nil,   nil,   213,   390,
   157,   nil,   nil,   268,   240,   nil,   nil,   156,   141,    53,
   nil,   257,   153,   161,   nil,   nil,    33,   nil,   153,   154,
    85,    72,   114,    -3,   103,    98,   nil,   nil,    67,   321,
    81,   191,   200,   237,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   336,    81,
   308,   311,   nil,   nil,   -36,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    46,    40,    36,
    29,    -1,    50,   -17,   nil,    16,    16,    23,    28,   nil,
   480,   420,    81,   405,   251,   187,     9,    98,   nil,   465,
   435,   450,   nil,    73,    77,   nil,   305,   119,   124,   125,
   138,   145,   146,   148,   129,   206,   135,   -37,   nil,   289,
   147,   375,   360,   157,   203,   nil,   197,   nil,   nil,   nil,
   162,   164,   173,   175,   177,   178,   180,   nil,   nil,   nil,
   199,   nil,   223,   228,   nil,   nil,   238,   nil,   nil,   -34,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     1,     0,
   220,   228,   230,   233,     8,   nil,   nil,    17,   290,   307,
   319,   nil,   nil,   301,   nil,   295,   261,   264,   nil,    98,
   nil,   304,   290,   299,   314,   327,   328,   327,    68,   356,
   383,   243,   438,   nil,   396,   412,   nil,   426,   441,   457,
   nil,   nil,   466,   nil,   501,   nil,   nil,     2,   468,   501,
   nil,   470,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -1,  -139,    -2,    -3,    -7,   -10,   -11,   -12,   -13,   -14,
   -15,   -16,   -17,   -18,   -19,   -20,   -21,   -22,  -139,  -139,
  -139,  -139,  -139,   -86,  -139,  -139,  -116,  -116,  -139,  -139,
  -139,   -80,  -139,  -134,  -135,  -136,  -139,    -5,    -6,  -139,
  -116,   -30,   -31,   -72,   -73,   -86,  -117,  -118,  -139,   -33,
  -109,   -87,   -88,  -116,  -116,  -108,  -110,  -139,  -139,  -139,
  -115,   -37,  -139,  -139,   -40,   -41,    -8,  -109,    -8,  -138,
  -116,  -116,  -138,  -116,  -139,  -139,   257,    -4,  -139,  -139,
  -139,  -116,  -116,  -116,   -94,   -95,   -96,   -97,   -98,   -99,
  -100,  -101,  -102,  -103,  -104,  -105,  -106,  -107,  -139,   -93,
  -139,  -139,  -113,  -114,  -139,   -35,   -38,   -39,   -81,  -119,
  -120,  -121,  -122,  -123,  -124,  -125,  -126,  -139,  -139,  -139,
  -139,  -139,  -139,  -139,   -85,    -9,   -61,   -61,  -139,  -137,
   -54,   -55,  -139,   -82,  -116,  -116,  -139,   -25,   -32,   -90,
   -91,   -92,   -89,  -139,  -139,   -34,  -139,  -139,  -139,  -139,
  -139,  -139,  -139,  -139,  -139,    -8,  -139,   -51,   -45,  -139,
  -139,   -83,   -84,  -139,   -24,   -26,  -138,  -111,  -112,   -36,
  -139,  -139,  -139,  -139,  -139,  -139,  -139,   -42,   -60,   -43,
  -139,   -46,  -138,  -138,   -48,   -49,  -139,   -23,   -27,  -139,
  -127,  -128,  -129,  -130,  -131,  -132,  -133,   -44,  -139,  -139,
  -139,  -139,  -139,  -139,  -139,   -52,   -53,  -139,  -139,  -139,
  -139,   -50,   -47,   -62,   -63,  -138,  -139,  -139,   -64,  -139,
   -28,  -139,  -139,  -139,  -139,  -139,  -139,  -139,  -139,  -139,
  -139,  -139,  -139,   -29,  -139,  -139,   -79,  -139,  -139,  -139,
   -76,   -77,   -71,   -65,  -139,   -66,   -67,  -139,  -139,  -139,
   -78,  -139,   -74,   -75,   -69,   -70,   -68 ]

racc_goto_table = [
    32,    65,    37,   105,    32,    42,    48,   106,   115,   126,
   128,   127,   158,   132,    49,   205,   205,   165,    66,    68,
   214,    44,    50,    78,    64,   218,     2,   157,    69,   164,
    38,   104,    79,   204,   207,   154,   156,    32,    37,    44,
   180,   181,   206,   206,   188,    98,    99,   253,   183,    77,
   213,     1,   234,   239,   251,   248,   108,   109,   110,   111,
   112,   107,   130,   131,   252,   133,    32,   113,    32,   114,
   116,   nil,   nil,   139,   140,   141,   nil,   nil,   nil,   nil,
   138,   nil,   nil,   nil,   143,   144,   nil,   nil,   169,   nil,
   nil,   nil,   106,   nil,   nil,   nil,   nil,   nil,   178,   nil,
    44,    44,   nil,   nil,   nil,   184,   nil,   189,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   198,   199,    37,   161,   162,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   107,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    32,   219,   nil,   nil,   185,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   241,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   216,   200,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   217,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   211,   nil,   nil,   212,   242,   nil,
    44,   nil,   235,   237,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    44,    44,
   238,   240,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   255 ]

racc_goto_check = [
    25,    24,     4,    27,    25,    19,    19,    28,    28,     5,
    23,     5,    32,    23,    20,    14,    14,    22,    20,    20,
    37,    25,    25,    19,    25,    37,     2,    30,    25,    21,
     2,    26,    20,    34,    34,    29,    29,    25,     4,    25,
    31,    32,     9,     9,    22,    20,    20,    10,    33,     3,
    36,     1,    38,    39,    40,    41,    42,    51,    52,    53,
    54,    25,    20,    20,    14,    20,    25,    55,    25,    56,
    57,   nil,   nil,    20,    20,    20,   nil,   nil,   nil,   nil,
    25,   nil,   nil,   nil,    19,    19,   nil,   nil,    27,   nil,
   nil,   nil,    28,   nil,   nil,   nil,   nil,   nil,     5,   nil,
    25,    25,   nil,   nil,   nil,    28,   nil,    23,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    23,    23,     4,    20,    20,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    25,    23,   nil,   nil,    25,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    28,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    24,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    19,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     4,   nil,   nil,     4,    24,   nil,
    25,   nil,    19,    19,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,    25,
    25,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25 ]

racc_goto_pointer = [
   nil,    51,    26,    12,     0,   -57,   nil,   nil,   nil,  -156,
  -200,   nil,   nil,   nil,  -183,   nil,   nil,   nil,   nil,   -16,
    -8,  -108,  -120,   -59,   -24,     0,   -30,   -58,   -54,   -91,
  -101,  -117,  -116,  -111,  -165,   nil,  -158,  -188,  -176,  -178,
  -193,  -187,    -6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    -5,    -4,    -3,    -2,     5,     7,     8,   nil ]

racc_goto_default = [
   nil,   nil,   125,     3,     4,   nil,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,   nil,
   nil,   nil,   nil,   nil,    31,    67,   nil,   nil,    43,   nil,
   nil,   nil,   nil,   nil,   nil,    29,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    51,    52,    81,    82,    83,    55,    56,
    59,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    35 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 64, :_reduce_none,
  1, 64, :_reduce_2,
  1, 65, :_reduce_3,
  3, 65, :_reduce_4,
  2, 65, :_reduce_5,
  2, 65, :_reduce_6,
  1, 65, :_reduce_7,
  0, 68, :_reduce_none,
  1, 68, :_reduce_9,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  6, 80, :_reduce_23,
  5, 80, :_reduce_24,
  0, 84, :_reduce_none,
  1, 84, :_reduce_26,
  2, 84, :_reduce_27,
  6, 85, :_reduce_28,
  8, 85, :_reduce_29,
  2, 87, :_reduce_30,
  2, 78, :_reduce_31,
  4, 79, :_reduce_32,
  2, 79, :_reduce_33,
  4, 77, :_reduce_34,
  1, 89, :_reduce_35,
  3, 89, :_reduce_36,
  0, 89, :_reduce_37,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  2, 73, :_reduce_40,
  2, 72, :_reduce_41,
  5, 75, :_reduce_42,
  5, 75, :_reduce_43,
  6, 81, :_reduce_44,
  1, 93, :_reduce_45,
  2, 93, :_reduce_46,
  5, 95, :_reduce_47,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  4, 94, :_reduce_50,
  0, 94, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  3, 76, :_reduce_54,
  3, 76, :_reduce_55,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  2, 92, :_reduce_60,
  0, 92, :_reduce_none,
  8, 71, :_reduce_62,
  1, 99, :_reduce_63,
  2, 99, :_reduce_64,
  6, 100, :_reduce_65,
  6, 100, :_reduce_66,
  6, 100, :_reduce_67,
  8, 100, :_reduce_68,
  7, 100, :_reduce_69,
  2, 104, :_reduce_70,
  0, 104, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  3, 101, :_reduce_78,
  1, 101, :_reduce_79,
  1, 74, :_reduce_80,
  3, 69, :_reduce_81,
  3, 70, :_reduce_82,
  4, 70, :_reduce_83,
  4, 70, :_reduce_84,
  3, 88, :_reduce_85,
  1, 88, :_reduce_86,
  1, 83, :_reduce_87,
  1, 83, :_reduce_88,
  3, 83, :_reduce_89,
  3, 107, :_reduce_90,
  3, 107, :_reduce_91,
  3, 107, :_reduce_92,
  2, 107, :_reduce_93,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  4, 112, :_reduce_111,
  4, 112, :_reduce_112,
  2, 111, :_reduce_113,
  2, 111, :_reduce_114,
  1, 113, :_reduce_none,
  0, 113, :_reduce_none,
  1, 91, :_reduce_117,
  1, 91, :_reduce_118,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  4, 120, :_reduce_127,
  4, 119, :_reduce_128,
  4, 118, :_reduce_129,
  4, 114, :_reduce_130,
  4, 117, :_reduce_131,
  4, 115, :_reduce_132,
  4, 116, :_reduce_133,
  1, 121, :_reduce_134,
  1, 67, :_reduce_135,
  1, 67, :_reduce_136,
  1, 86, :_reduce_137,
  0, 86, :_reduce_none ]

racc_reduce_n = 139

racc_shift_n = 257

racc_token_table = {
  false => 0,
  :error => 1,
  :ASSIGN => 2,
  :AT_SYM => 3,
  :COMMENT => 4,
  :JUMP => 5,
  :IO_METHOD => 6,
  :INPUT => 7,
  :OUTPUT => 8,
  :NUMREG => 9,
  :POSREG => 10,
  :VREG => 11,
  :SREG => 12,
  :POSITION => 13,
  :TIME_SEGMENT => 14,
  :ARG => 15,
  :MOVE => 16,
  :DOT => 17,
  :TO => 18,
  :AT => 19,
  :TERM => 20,
  :OFFSET => 21,
  :SKIP => 22,
  :SEMICOLON => 23,
  :NEWLINE => 24,
  :STRING => 25,
  :REAL => 26,
  :DIGIT => 27,
  :WORD => 28,
  :EQUAL => 29,
  :EEQUAL => 30,
  :NOTEQUAL => 31,
  :GTE => 32,
  :LTE => 33,
  :LT => 34,
  :GT => 35,
  :BANG => 36,
  :PLUS => 37,
  :MINUS => 38,
  :STAR => 39,
  :SLASH => 40,
  :DIV => 41,
  :AND => 42,
  :OR => 43,
  :MOD => 44,
  :IF => 45,
  :ELSE => 46,
  :END => 47,
  :UNLESS => 48,
  :WAIT_FOR => 49,
  :WAIT_UNTIL => 50,
  :TIMEOUT => 51,
  :AFTER => 52,
  :FANUC_USE => 53,
  :FANUC_SET => 54,
  :CASE => 55,
  :WHEN => 56,
  :POSITION_REGISTER => 57,
  "(" => 58,
  "," => 59,
  ")" => 60,
  "[" => 61,
  "]" => 62 }

racc_nt_base = 63

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ASSIGN",
  "AT_SYM",
  "COMMENT",
  "JUMP",
  "IO_METHOD",
  "INPUT",
  "OUTPUT",
  "NUMREG",
  "POSREG",
  "VREG",
  "SREG",
  "POSITION",
  "TIME_SEGMENT",
  "ARG",
  "MOVE",
  "DOT",
  "TO",
  "AT",
  "TERM",
  "OFFSET",
  "SKIP",
  "SEMICOLON",
  "NEWLINE",
  "STRING",
  "REAL",
  "DIGIT",
  "WORD",
  "EQUAL",
  "EEQUAL",
  "NOTEQUAL",
  "GTE",
  "LTE",
  "LT",
  "GT",
  "BANG",
  "PLUS",
  "MINUS",
  "STAR",
  "SLASH",
  "DIV",
  "AND",
  "OR",
  "MOD",
  "IF",
  "ELSE",
  "END",
  "UNLESS",
  "WAIT_FOR",
  "WAIT_UNTIL",
  "TIMEOUT",
  "AFTER",
  "FANUC_USE",
  "FANUC_SET",
  "CASE",
  "WHEN",
  "POSITION_REGISTER",
  "\"(\"",
  "\",\"",
  "\")\"",
  "\"[\"",
  "\"]\"",
  "$start",
  "program",
  "statements",
  "statement",
  "terminator",
  "block",
  "definition",
  "assignment",
  "motion_statement",
  "jump",
  "io_method",
  "label_definition",
  "conditional",
  "inline_conditional",
  "program_call",
  "use_statement",
  "set_statement",
  "wait_statement",
  "case_statement",
  "indirectable",
  "expression",
  "wait_modifiers",
  "wait_modifier",
  "swallow_newlines",
  "label",
  "var",
  "args",
  "arg",
  "number",
  "else_block",
  "case_conditions",
  "case_else",
  "case_condition",
  "case_allowed_condition",
  "case_allowed_statement",
  "inlineable",
  "motion_modifiers",
  "motion_modifier",
  "speed",
  "time",
  "time_seg_actions",
  "optional_lpos_arg",
  "definable",
  "factor",
  "operator",
  "relop",
  "addop",
  "mulop",
  "signed_number",
  "indirect_position",
  "sign",
  "numreg",
  "output",
  "input",
  "posreg",
  "position",
  "vreg",
  "argument",
  "comment" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
 @interpreter.nodes = val[0].flatten 
    result
end

def _reduce_3(val, _values, result)
 result = val 
    result
end

def _reduce_4(val, _values, result)
 result = val[0] << val[1] << val[2] 
    result
end

def _reduce_5(val, _values, result)
 result = val[0] << val[1] 
    result
end

def _reduce_6(val, _values, result)
 result = [val[0]] << val[1] 
    result
end

def _reduce_7(val, _values, result)
 result = [val[0]] 
    result
end

# reduce 8 omitted

def _reduce_9(val, _values, result)
 result = val[0] 
    result
end

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

def _reduce_23(val, _values, result)
 result = WaitForNode.new(val[2], val[4]) 
    result
end

def _reduce_24(val, _values, result)
 result = WaitUntilNode.new(val[2],val[4]) 
    result
end

# reduce 25 omitted

def _reduce_26(val, _values, result)
 result = val[0] 
    result
end

def _reduce_27(val, _values, result)
 result = val[0].merge(val[1]) 
    result
end

def _reduce_28(val, _values, result)
 result = { label: val[4] } 
    result
end

def _reduce_29(val, _values, result)
 result = { timeout: [val[4],val[6]] } 
    result
end

def _reduce_30(val, _values, result)
 result = val[1] 
    result
end

def _reduce_31(val, _values, result)
 result = UseNode.new(val[0],val[1]) 
    result
end

def _reduce_32(val, _values, result)
 result = SetNode.new(val[0],val[1],val[3]) 
    result
end

def _reduce_33(val, _values, result)
 result = SetNode.new(val[0],nil,val[1]) 
    result
end

def _reduce_34(val, _values, result)
 result = CallNode.new(val[0],val[2]) 
    result
end

def _reduce_35(val, _values, result)
 result = [val[0]] 
    result
end

def _reduce_36(val, _values, result)
 result = val[0] << val[2] 
    result
end

def _reduce_37(val, _values, result)
 result = [] 
    result
end

# reduce 38 omitted

# reduce 39 omitted

def _reduce_40(val, _values, result)
 result = IOMethodNode.new(val[0],val[1]) 
    result
end

def _reduce_41(val, _values, result)
 result = JumpNode.new(val[1]) 
    result
end

def _reduce_42(val, _values, result)
 result = ConditionalNode.new("if",val[1],val[2],val[3]) 
    result
end

def _reduce_43(val, _values, result)
 result = ConditionalNode.new("unless",val[1],val[2],val[3]) 
    result
end

def _reduce_44(val, _values, result)
 result = CaseNode.new(val[1],val[3],val[4]) 
    result
end

def _reduce_45(val, _values, result)
 result = val 
    result
end

def _reduce_46(val, _values, result)
 result = val[0] << val[1] << val[2] 
    result
end

def _reduce_47(val, _values, result)
 result = CaseConditionNode.new(val[1],val[3]) 
    result
end

# reduce 48 omitted

# reduce 49 omitted

def _reduce_50(val, _values, result)
 result = CaseConditionNode.new(nil,val[2]) 
    result
end

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

def _reduce_54(val, _values, result)
 result = InlineConditionalNode.new("if",val[2],val[0]) 
    result
end

def _reduce_55(val, _values, result)
 result = InlineConditionalNode.new("unless",val[2],val[0]) 
    result
end

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

def _reduce_60(val, _values, result)
 result = val[1] 
    result
end

# reduce 61 omitted

def _reduce_62(val, _values, result)
 result = MotionNode.new(val[0],val[5],val[7]) 
    result
end

def _reduce_63(val, _values, result)
 result = val 
    result
end

def _reduce_64(val, _values, result)
 result = val[0] << val[1] 
    result
end

def _reduce_65(val, _values, result)
 result = SpeedNode.new(val[4]) 
    result
end

def _reduce_66(val, _values, result)
 result = TerminationNode.new(val[4]) 
    result
end

def _reduce_67(val, _values, result)
 result = OffsetNode.new(val[4]) 
    result
end

def _reduce_68(val, _values, result)
 result = TimeNode.new(val[2],val[4],val[6]) 
    result
end

def _reduce_69(val, _values, result)
 result = SkipNode.new(val[4],val[5]) 
    result
end

def _reduce_70(val, _values, result)
 result = val[1] 
    result
end

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

def _reduce_78(val, _values, result)
 result = { speed: val[0], units: val[2] } 
    result
end

def _reduce_79(val, _values, result)
 result = { speed: val[0], units: nil } 
    result
end

def _reduce_80(val, _values, result)
 result = LabelDefinitionNode.new(val[0]) 
    result
end

def _reduce_81(val, _values, result)
 result = DefinitionNode.new(val[0],val[2]) 
    result
end

def _reduce_82(val, _values, result)
 result = AssignmentNode.new(val[0],val[2]) 
    result
end

def _reduce_83(val, _values, result)
 result = AssignmentNode.new(
                                           val[0],
                                           ExpressionNode.new(val[0],val[1],val[3])
                                         )
                                       
    result
end

def _reduce_84(val, _values, result)
 result = AssignmentNode.new(
                                           val[0],
                                           ExpressionNode.new(val[0],val[1],val[3])
                                         )
                                       
    result
end

def _reduce_85(val, _values, result)
 result = VarMethodNode.new(val[0],val[2]) 
    result
end

def _reduce_86(val, _values, result)
 result = VarNode.new(val[0]) 
    result
end

def _reduce_87(val, _values, result)
 result = val[0] 
    result
end

def _reduce_88(val, _values, result)
 result = val[0] 
    result
end

def _reduce_89(val, _values, result)
 val[1].grouped = true; result = val[1] 
    result
end

def _reduce_90(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

def _reduce_91(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

def _reduce_92(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

def _reduce_93(val, _values, result)
 result = ExpressionNode.new(val[1],val[0],nil) 
    result
end

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

def _reduce_111(val, _values, result)
 result = IndirectNode.new(:position, val[2]) 
    result
end

def _reduce_112(val, _values, result)
 result = IndirectNode.new(:position_register, val[2]) 
    result
end

def _reduce_113(val, _values, result)
 val[1] = val[1].to_i * -1 if val[0] == "-"; result = DigitNode.new(val[1]) 
    result
end

def _reduce_114(val, _values, result)
 val[1] = val[1].to_f * -1 if val[0] == "-"; result = RealNode.new(val[1]) 
    result
end

# reduce 115 omitted

# reduce 116 omitted

def _reduce_117(val, _values, result)
 result = DigitNode.new(val[0]) 
    result
end

def _reduce_118(val, _values, result)
 result = RealNode.new(val[0]) 
    result
end

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

def _reduce_127(val, _values, result)
 result = ArgumentNode.new(val[2].to_i) 
    result
end

def _reduce_128(val, _values, result)
 result = VisionRegisterNode.new(val[2].to_i) 
    result
end

def _reduce_129(val, _values, result)
 result = PositionNode.new(val[2].to_i) 
    result
end

def _reduce_130(val, _values, result)
 result = NumregNode.new(val[2].to_i) 
    result
end

def _reduce_131(val, _values, result)
 result = PosregNode.new(val[2].to_i) 
    result
end

def _reduce_132(val, _values, result)
 result = IONode.new(val[0], val[2].to_i) 
    result
end

def _reduce_133(val, _values, result)
 result = IONode.new(val[0], val[2].to_i) 
    result
end

def _reduce_134(val, _values, result)
 result = CommentNode.new(val[0]) 
    result
end

def _reduce_135(val, _values, result)
 result = TerminatorNode.new 
    result
end

def _reduce_136(val, _values, result)
 result = val[0] 
    result
end

def _reduce_137(val, _values, result)
 result = TerminatorNode.new 
    result
end

# reduce 138 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module TPPlus
