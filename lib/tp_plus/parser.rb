#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.10
# from Racc grammer file "".
#

require 'racc/parser.rb'
module TPPlus
  class Parser < Racc::Parser


  include TPPlus::Nodes

  attr_reader :interpreter
  def initialize(scanner, interpreter = TPPlus::Interpreter.new)
    @scanner       = scanner
    @interpreter   = interpreter
    super()
  end

  def next_token
    t = @scanner.next_token
    @interpreter.line_count += 1 if t && t[0] == :NEWLINE

    #puts t.inspect
    t
  end

  def parse
    do_parse
    @interpreter
  rescue Racc::ParseError => e
    raise "Parse error on line #{@interpreter.line_count+1}: #{e}"
  end
##### State transition tables begin ###

racc_action_table = [
    79,    28,    45,    33,    32,   149,   148,   146,   147,   144,
    80,    54,   143,    41,    80,    65,    66,    54,    45,   223,
   232,    46,    54,    65,    66,    31,  -100,   263,    98,    98,
   266,   270,   269,   193,  -100,  -100,   190,    46,   266,   270,
   269,    38,    34,   194,    56,    35,    36,    38,    37,    26,
    27,    54,    38,    29,    30,    38,    39,    66,    54,   145,
    25,   142,    24,    48,  -105,    78,    28,    45,    33,    32,
   230,   189,   271,   300,   251,   188,    33,   272,    41,   166,
   271,    38,    54,   186,    56,   272,    46,   166,    38,   186,
    31,    98,   110,   111,   114,   115,   112,   113,   257,   116,
   117,   119,   120,   121,   123,   118,   122,    34,    66,    54,
    35,    36,    38,    37,    26,    27,    54,    54,    29,    30,
    38,    39,   266,   270,   269,    25,    33,    24,    48,    28,
    45,    33,    32,    65,    66,    54,    54,    54,    32,    38,
    98,    41,    54,    73,    45,    77,    38,    38,   257,    46,
   176,   175,   201,    31,   312,    65,    66,    54,   202,   257,
    45,    45,   205,    46,   271,    38,    38,    38,    56,   272,
    34,   166,    38,    35,    36,    72,    37,    26,    27,    46,
    46,    29,    30,    38,    39,   184,    45,    38,    25,    94,
    24,    48,    28,    45,    33,    32,   -71,    95,    96,   -71,
   -74,   127,   126,   -74,    41,    46,    65,    66,    54,   183,
   -73,   -72,    46,   -73,   -72,   182,    31,   181,   110,   111,
   114,   115,   112,   113,   207,   116,   117,   119,   120,   121,
   123,   118,   122,    34,   254,   255,    35,    36,    38,    37,
    26,    27,   208,   209,    29,    30,    38,    39,    65,    66,
    54,    25,   210,    24,    48,    28,    45,    33,    32,   121,
    91,   211,   122,    92,   212,   213,   214,    41,   215,    65,
    66,    54,   180,   217,   179,    46,   178,   177,   227,    31,
    38,   110,   111,   114,   115,   112,   113,   168,   116,   117,
   119,   120,   121,   123,   118,   122,    34,   167,   228,    35,
    36,    38,    37,    26,    27,   166,   164,    29,    30,    38,
    39,    65,    66,    54,    25,   234,    24,    48,    28,    45,
    33,    32,    65,    66,    54,    65,    66,    54,   297,   205,
    41,    98,   237,   294,   295,   296,   298,   238,    46,   239,
   240,   241,    31,    38,    28,    45,    33,    32,   242,    65,
    66,    54,   243,   244,    38,   245,    41,    38,   246,    34,
    98,    98,    35,    36,    46,    37,    26,    27,    31,   163,
    29,    30,    38,    39,   162,   252,   253,    25,    98,    24,
    48,    38,    98,   154,   150,    34,   262,   193,    35,    36,
    98,    37,    26,    27,   -88,   273,    29,    30,    38,    39,
    65,    66,    54,    25,    54,    24,    48,    28,   274,    33,
    32,   275,    73,    78,    77,   106,   103,   280,   232,    41,
    98,    28,   101,    98,   280,    98,    28,    45,    33,    32,
    97,    31,    38,   291,    38,   292,   293,    56,    41,    93,
    89,   301,   302,   303,    72,   304,    46,   305,    34,   306,
    31,    35,    36,   307,    37,    26,    27,    98,   309,    29,
    30,    38,    39,    28,    60,    59,    25,    34,    24,    48,
    35,    36,    58,    37,    26,    27,    54,    28,    29,    30,
    38,    39,    57,   320,    73,    25,    77,    24,    48,   110,
   111,   114,   115,   112,   113,   321,   116,   117,   119,   120,
   121,   123,   118,   122,    54,    54,    38,   322,   323,    56,
    54,   324,    73,    73,    77,    77,    72,   326,    73,   327,
    77,  -103,    54,    54,   331,    49,   333,   nil,   nil,   174,
    73,    73,    77,    77,    38,    38,   nil,    56,    56,    54,
    38,   nil,   nil,    56,    72,    72,   nil,    73,   nil,    77,
    72,    54,    38,    38,   nil,    56,    56,    54,   nil,    73,
   nil,    77,    72,    72,   nil,    73,    54,    77,   nil,    38,
   nil,   nil,    56,   nil,    73,   nil,    77,   nil,   nil,    72,
   nil,    38,   nil,   nil,    56,    54,   nil,    38,   nil,   nil,
    56,    72,   nil,    73,   nil,    77,    38,    72,   nil,    56,
   110,   111,   114,   115,   112,   113,    72,   116,   117,   119,
   120,   121,   123,   118,   122,    38,    54,   nil,    56,   nil,
    54,   nil,   nil,   nil,    73,    72,    77,   nil,    73,   nil,
    77,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   169,   nil,   nil,   nil,   nil,   nil,    38,   nil,   nil,    56,
    38,   nil,   nil,    56,   nil,   nil,    72,   nil,   nil,   nil,
    72,   110,   111,   114,   115,   112,   113,   nil,   116,   117,
   119,   120,   121,   123,   118,   122,   110,   111,   114,   115,
   112,   113,   nil,   116,   117,   119,   120,   121,   123,   118,
   122,   110,   111,   114,   115,   112,   113,   nil,   116,   117,
   119,   120,   121,   123,   118,   122,   110,   111,   114,   115,
   112,   113,   nil,   116,   117,   119,   120,   121,   123,   118,
   122,   110,   111,   114,   115,   112,   113,   nil,   116,   117,
   119,   120,   121,   123,   118,   122,   110,   111,   114,   115,
   112,   113,   nil,   116,   117,   119,   120,   121,   123,   118,
   122,   110,   111,   114,   115,   112,   113,   nil,   116,   117,
   119,   120,   121,   123,   118,   122,   110,   111,   114,   115,
   112,   113,   nil,   116,   117,   119,   120,   121,   123,   118,
   122,   110,   111,   114,   115,   112,   113,   nil,   116,   117,
   119,   120,   121,   123,   118,   122 ]

racc_action_check = [
    31,    89,    89,    89,    89,    79,    79,    79,    79,    79,
    54,    32,    79,    89,    31,   201,   201,   201,     2,   191,
   200,    89,   164,    79,    79,    89,    31,   250,   288,   229,
   252,   252,   252,   191,    31,    31,   156,     2,   282,   282,
   282,    32,    89,   160,    32,    89,    89,   201,    89,    89,
    89,    24,   164,    89,    89,    89,    89,   245,   245,    79,
    89,    79,    89,    89,    54,    31,    88,    88,    88,    88,
   200,   155,   252,   288,   229,   154,   248,   252,    88,   252,
   282,    24,   326,   153,    24,   282,    88,   282,   245,   152,
    88,   165,    88,    88,    88,    88,    88,    88,   248,    88,
    88,    88,    88,    88,    88,    88,    88,    88,   188,   188,
    88,    88,   326,    88,    88,    88,   304,    39,    88,    88,
    88,    88,   308,   308,   308,    88,   247,    88,    88,     4,
     4,     4,     4,    30,    30,    30,   227,   106,   324,   188,
   166,     4,    36,    30,   151,    30,   304,    39,   247,     4,
   128,   128,   167,     4,   302,   302,   302,   302,   168,   324,
    51,   258,   169,   151,   308,    30,   227,   106,    30,   308,
     4,   308,    36,     4,     4,    30,     4,     4,     4,    51,
   258,     4,     4,     4,     4,   149,   261,   302,     4,    43,
     4,     4,    86,    86,    86,    86,     9,    43,    43,     9,
    16,    76,    76,    16,    86,   261,    58,    58,    58,   148,
    10,     7,    86,    10,     7,   147,    86,   146,    86,    86,
    86,    86,    86,    86,   177,    86,    86,    86,    86,    86,
    86,    86,    86,    86,   236,   236,    86,    86,    58,    86,
    86,    86,   178,   179,    86,    86,    86,    86,   274,   274,
   274,    86,   180,    86,    86,    84,    84,    84,    84,   125,
    40,   181,   125,    40,   182,   183,   184,    84,   185,   303,
   303,   303,   145,   187,   144,    84,   143,   142,   194,    84,
   274,    84,    84,    84,    84,    84,    84,   104,    84,    84,
    84,    84,    84,    84,    84,    84,    84,   103,   199,    84,
    84,   303,    84,    84,    84,    99,    97,    84,    84,    84,
    84,   305,   305,   305,    84,   202,    84,    84,   275,   275,
   275,   275,    78,    78,    78,   176,   176,   176,   287,   203,
   275,   205,   207,   287,   287,   287,   287,   208,   275,   209,
   210,   211,   275,   305,   186,   186,   186,   186,   212,   193,
   193,   193,   213,   214,    78,   218,   186,   176,   221,   275,
   223,   224,   275,   275,   186,   275,   275,   275,   186,    96,
   275,   275,   275,   275,    95,   232,   233,   275,    93,   275,
   275,   193,    90,    87,    80,   186,   249,   157,   186,   186,
   251,   186,   186,   186,    69,   254,   186,   186,   186,   186,
    29,    29,    29,   186,    35,   186,   186,    50,   255,    50,
    50,   256,    35,   257,    35,    67,    56,   262,   264,    50,
   272,   273,    49,    48,   278,   280,     0,     0,     0,     0,
    44,    50,    29,   283,    35,   284,   285,    35,     0,    41,
    38,   292,   294,   295,    35,   296,     0,   297,    50,   298,
     0,    50,    50,   299,    50,    50,    50,   300,   301,    50,
    50,    50,    50,    33,    28,    27,    50,     0,    50,    50,
     0,     0,    26,     0,     0,     0,    94,   306,     0,     0,
     0,     0,    25,   310,    94,     0,    94,     0,     0,   124,
   124,   124,   124,   124,   124,   311,   124,   124,   124,   124,
   124,   124,   124,   124,    37,    92,    94,   313,   314,    94,
    91,   315,    37,    92,    37,    92,    94,   318,    91,   321,
    91,     6,   162,    34,   325,     1,   328,   nil,   nil,   124,
   162,    34,   162,    34,    37,    92,   nil,    37,    92,   109,
    91,   nil,   nil,    91,    37,    92,   nil,   109,   nil,   109,
    91,   163,   162,    34,   nil,   162,    34,    73,   nil,   163,
   nil,   163,   162,    34,   nil,    73,    72,    73,   nil,   109,
   nil,   nil,   109,   nil,    72,   nil,    72,   nil,   nil,   109,
   nil,   163,   nil,   nil,   163,   108,   nil,    73,   nil,   nil,
    73,   163,   nil,   108,   nil,   108,    72,    73,   nil,    72,
   105,   105,   105,   105,   105,   105,    72,   105,   105,   105,
   105,   105,   105,   105,   105,   108,   107,   nil,   108,   nil,
    59,   nil,   nil,   nil,   107,   108,   107,   nil,    59,   nil,
    59,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   105,   nil,   nil,   nil,   nil,   nil,   107,   nil,   nil,   107,
    59,   nil,   nil,    59,   nil,   nil,   107,   nil,   nil,   nil,
    59,    68,    68,    68,    68,    68,    68,   nil,    68,    68,
    68,    68,    68,    68,    68,    68,   195,   195,   195,   195,
   195,   195,   nil,   195,   195,   195,   195,   195,   195,   195,
   195,   196,   196,   196,   196,   196,   196,   nil,   196,   196,
   196,   196,   196,   196,   196,   196,   171,   171,   171,   171,
   171,   171,   nil,   171,   171,   171,   171,   171,   171,   171,
   171,   173,   173,   173,   173,   173,   173,   nil,   173,   173,
   173,   173,   173,   173,   173,   173,   161,   161,   161,   161,
   161,   161,   nil,   161,   161,   161,   161,   161,   161,   161,
   161,   159,   159,   159,   159,   159,   159,   nil,   159,   159,
   159,   159,   159,   159,   159,   159,   172,   172,   172,   172,
   172,   172,   nil,   172,   172,   172,   172,   172,   172,   172,
   172,   158,   158,   158,   158,   158,   158,   nil,   158,   158,
   158,   158,   158,   158,   158,   158 ]

racc_action_pointer = [
   423,   525,    14,   nil,   126,   nil,   451,   167,   nil,   152,
   166,   nil,   nil,   nil,   nil,   nil,   156,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    24,   458,   405,   398,   437,   375,
   108,    -2,   -16,   460,   496,   377,   115,   477,   413,    90,
   216,   423,   nil,   161,   360,   nil,   nil,   nil,   400,   422,
   404,   156,   nil,   nil,    -6,   nil,   349,   nil,   181,   593,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   347,   632,   326,
   nil,   nil,   539,   530,   nil,   nil,   176,   nil,   297,    -2,
   357,   nil,   nil,   nil,   252,   nil,   189,   334,    63,    -2,
   359,   483,   478,   355,   449,   346,   341,   236,   nil,   232,
   nil,   nil,   nil,   273,   219,   571,   110,   589,   558,   512,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   460,   219,   nil,   nil,    82,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   206,   205,   203,   201,   146,   144,   138,   114,
   nil,   140,    44,    38,     8,    25,   -10,   328,   752,   722,
    26,   707,   495,   524,    -5,    68,   117,    84,   134,   146,
   nil,   677,   737,   692,   nil,   nil,   300,   198,   216,   217,
   226,   235,   238,   239,   240,   222,   341,   227,    82,   nil,
   nil,   -26,   nil,   324,   211,   647,   662,   nil,   nil,   252,
    -4,   -10,   246,   313,   nil,   308,   nil,   260,   265,   267,
   268,   269,   276,   280,   281,   nil,   nil,   nil,   338,   nil,
   nil,   312,   nil,   337,   338,   nil,   nil,   109,   nil,     6,
   nil,   nil,   305,   307,   nil,   nil,   181,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    31,   nil,   121,    71,   317,
   -47,   367,     6,   nil,   328,   341,   342,   346,   157,   nil,
   nil,   182,   401,   nil,   394,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   397,   418,   223,   315,   nil,   nil,   408,   nil,
   402,   nil,    14,   364,   367,   390,   nil,   315,     5,   nil,
   nil,   nil,   417,   nil,   375,   376,   378,   380,   382,   381,
   434,   389,   130,   244,    89,   286,   474,   nil,    98,   nil,
   414,   427,   nil,   438,   439,   443,   nil,   nil,   449,   nil,
   nil,   495,   nil,   nil,   132,   455,    55,   nil,   457,   nil,
   nil,   nil,   nil,   nil ]

racc_action_default = [
    -1,  -177,    -2,    -3,    -7,   -10,   -11,   -12,   -13,   -14,
   -15,   -16,   -17,   -18,   -19,   -20,   -21,   -22,   -23,   -24,
   -25,   -26,   -27,   -28,  -177,  -177,  -177,  -177,  -177,  -177,
  -177,  -105,  -177,  -177,  -134,  -134,  -177,  -134,  -177,  -177,
  -177,  -177,   -95,  -177,  -177,  -155,  -156,  -157,  -159,  -177,
    -5,    -6,   -29,   -30,  -100,  -103,  -177,   -31,  -177,  -134,
   -39,   -40,   -87,   -88,  -135,  -136,  -137,  -177,   -42,  -128,
  -106,  -107,  -134,  -134,  -127,  -129,  -177,  -133,   -46,  -177,
  -177,   -49,   -50,   -51,    -8,  -128,    -8,  -177,    -8,    -8,
  -159,  -134,  -134,  -159,  -134,  -177,  -177,  -177,  -158,  -177,
  -161,   334,    -4,  -177,  -177,  -177,  -177,  -134,  -134,  -134,
  -113,  -114,  -115,  -116,  -117,  -118,  -119,  -120,  -121,  -122,
  -123,  -124,  -125,  -126,  -177,  -112,  -131,  -132,  -177,   -44,
   -47,   -48,   -96,  -138,  -139,  -140,  -141,  -142,  -143,  -144,
  -145,  -146,  -177,  -177,  -177,  -177,  -177,  -177,  -177,  -177,
  -101,    -9,   -76,   -76,  -177,  -177,  -177,  -177,   -69,   -70,
  -177,   -97,  -134,  -134,  -177,  -159,  -159,  -177,  -177,   -34,
   -41,  -109,  -110,  -111,  -108,   -43,  -177,  -177,  -177,  -177,
  -177,  -177,  -177,  -177,  -177,  -177,    -8,  -177,  -177,   -55,
   -58,   -66,   -60,  -177,  -177,   -98,   -99,  -102,  -103,  -177,
  -177,  -177,  -177,   -33,   -35,  -159,   -45,  -177,  -177,  -177,
  -177,  -177,  -177,  -177,  -177,   -52,   -75,   -53,  -177,   -56,
   -57,  -177,   -61,  -159,  -159,   -63,   -64,  -177,  -160,  -159,
  -163,  -164,  -177,  -177,   -32,   -36,  -177,  -147,  -148,  -149,
  -150,  -151,  -152,  -153,  -154,  -177,   -59,  -177,  -177,  -177,
  -177,  -159,  -177,  -130,  -177,  -177,  -177,  -177,  -177,   -67,
   -68,  -177,  -177,  -162,  -177,  -166,  -167,  -168,  -169,  -170,
  -171,  -172,  -159,  -177,  -177,    -8,   -65,   -62,   -77,   -78,
  -159,  -165,  -177,  -177,  -177,  -177,   -79,  -177,  -159,  -174,
  -176,   -37,  -177,   -54,  -177,  -177,  -177,  -177,  -177,  -177,
  -159,  -177,  -177,  -177,  -177,  -177,  -177,  -173,  -177,   -38,
  -177,  -177,   -94,  -177,  -177,  -177,   -91,   -92,   -86,  -175,
   -80,  -177,   -81,   -82,  -177,  -177,  -177,   -93,  -177,   -89,
   -90,   -84,   -85,   -83 ]

racc_goto_table = [
    43,    99,    50,    83,    43,   129,     6,   130,   139,   231,
     6,    61,    67,   219,   152,   204,   153,   289,   155,   156,
   157,   259,   259,   160,    52,   218,   192,    53,   279,    63,
    69,   132,    81,     2,   191,    82,    87,    51,   224,    90,
   104,   185,   187,   319,   286,   258,   261,   260,   260,   235,
    43,    50,   330,   278,   128,   310,     6,   315,    63,   328,
   222,   325,   221,   133,   134,   135,   136,    68,   137,   138,
   219,    84,    86,   281,    88,   140,   141,   102,   131,   165,
   229,   203,   256,   265,    43,   288,    43,     1,    43,    43,
     6,   nil,     6,   nil,     6,     6,   105,   nil,   329,   nil,
   nil,   nil,   nil,   206,   nil,   130,   170,   nil,   nil,   124,
   125,   nil,   nil,   nil,   nil,   nil,   216,   nil,   199,   200,
   nil,   nil,   225,   nil,   nil,   nil,   nil,   nil,   158,   159,
   nil,   161,   nil,   nil,   nil,   236,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   171,   172,   173,   nil,   nil,   nil,
   nil,    50,   nil,   247,   248,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   197,   nil,   nil,   nil,   nil,   nil,
   198,   nil,   nil,   nil,   nil,   nil,   131,   nil,   nil,   nil,
   nil,   nil,   250,   233,   nil,   nil,    43,   nil,   220,   nil,
   nil,   nil,     6,   226,   nil,   nil,   nil,   nil,   nil,   195,
   196,    63,   nil,   nil,   264,   285,   nil,   nil,   nil,   nil,
   287,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   282,   nil,   249,   nil,   nil,
   nil,   nil,   nil,   nil,   317,   nil,   nil,   nil,   nil,   nil,
   nil,   299,   nil,   283,   nil,   220,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   308,   nil,   nil,   284,   nil,   276,   nil,
   nil,   277,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    63,    43,   318,   nil,   nil,   nil,
   nil,     6,   nil,   nil,   311,   313,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    63,    63,   314,   316,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   332 ]

racc_goto_check = [
    25,    69,     4,    32,    25,    34,     7,    35,    35,    72,
     7,    27,    27,    38,     5,    30,     5,    76,     5,     5,
    31,    17,    17,    31,    25,    37,    41,    26,    46,    25,
    25,    51,    25,     2,    39,    26,    25,     2,    42,    25,
    27,    36,    36,    76,    46,    43,    43,    10,    10,    30,
    25,     4,    11,    45,    33,    47,     7,    48,    25,    49,
    41,    50,    40,    60,    61,    62,    63,    28,    64,    65,
    38,    28,    28,    72,    28,    66,    67,     3,    25,    70,
    71,    29,    37,    73,    25,    75,    25,     1,    25,    25,
     7,   nil,     7,   nil,     7,     7,    28,   nil,    17,   nil,
   nil,   nil,   nil,    34,   nil,    35,    25,   nil,   nil,    28,
    28,   nil,   nil,   nil,   nil,   nil,     5,   nil,    69,    69,
   nil,   nil,    35,   nil,   nil,   nil,   nil,   nil,    28,    28,
   nil,    28,   nil,   nil,   nil,    31,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    28,    28,    28,   nil,   nil,   nil,
   nil,     4,   nil,    31,    31,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,
     7,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,
   nil,   nil,    69,    27,   nil,   nil,    25,   nil,    25,   nil,
   nil,   nil,     7,    25,   nil,   nil,   nil,   nil,   nil,    28,
    28,    25,   nil,   nil,    69,     5,   nil,   nil,   nil,   nil,
    31,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    69,   nil,    25,   nil,   nil,
   nil,   nil,   nil,   nil,    35,   nil,   nil,   nil,   nil,   nil,
   nil,    69,   nil,    32,   nil,    25,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    69,   nil,   nil,    27,   nil,     4,   nil,
   nil,     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    25,    25,    32,   nil,   nil,   nil,
   nil,     7,   nil,   nil,    27,    27,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    25,    25,    25,    25,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    25 ]

racc_goto_pointer = [
   nil,    87,    33,    27,     0,   -70,   nil,     6,   nil,   nil,
  -200,  -272,   nil,   nil,   nil,   nil,   nil,  -226,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     0,     3,   -18,    37,   -88,
  -154,   -70,   -30,   -24,   -73,   -71,  -111,  -163,  -175,  -123,
  -129,  -131,  -155,  -202,   nil,  -209,  -234,  -247,  -248,  -265,
  -257,   -48,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   -16,   -15,   -14,   -13,   -11,   -10,    -4,    -3,   nil,   -47,
   -20,  -120,  -191,  -169,   nil,  -197,  -265 ]

racc_goto_default = [
   nil,   nil,   151,     3,     4,   nil,     5,    55,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    85,    75,   nil,   nil,   nil,
   nil,   100,    42,   nil,   nil,    62,   nil,   nil,    64,   nil,
   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    44,    70,    71,   107,   108,   109,    74,    76,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,
   267,   nil,   nil,   290,   268,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 76, :_reduce_none,
  1, 76, :_reduce_2,
  1, 77, :_reduce_3,
  3, 77, :_reduce_4,
  2, 77, :_reduce_5,
  2, 77, :_reduce_6,
  1, 77, :_reduce_7,
  0, 80, :_reduce_none,
  1, 80, :_reduce_9,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  2, 98, :_reduce_29,
  2, 98, :_reduce_30,
  2, 97, :_reduce_31,
  6, 95, :_reduce_32,
  5, 95, :_reduce_33,
  0, 104, :_reduce_none,
  1, 104, :_reduce_35,
  2, 104, :_reduce_36,
  6, 105, :_reduce_37,
  8, 105, :_reduce_38,
  2, 107, :_reduce_39,
  2, 93, :_reduce_40,
  4, 94, :_reduce_41,
  2, 94, :_reduce_42,
  4, 92, :_reduce_43,
  1, 108, :_reduce_44,
  3, 108, :_reduce_45,
  0, 108, :_reduce_46,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  2, 86, :_reduce_49,
  2, 86, :_reduce_50,
  2, 85, :_reduce_51,
  5, 88, :_reduce_52,
  5, 88, :_reduce_53,
  10, 90, :_reduce_54,
  4, 91, :_reduce_55,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  4, 82, :_reduce_58,
  6, 96, :_reduce_59,
  1, 114, :_reduce_60,
  2, 114, :_reduce_61,
  5, 116, :_reduce_62,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  4, 115, :_reduce_65,
  0, 115, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  3, 89, :_reduce_69,
  3, 89, :_reduce_70,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  2, 111, :_reduce_75,
  0, 111, :_reduce_76,
  8, 84, :_reduce_77,
  1, 120, :_reduce_78,
  2, 120, :_reduce_79,
  6, 121, :_reduce_80,
  6, 121, :_reduce_81,
  6, 121, :_reduce_82,
  8, 121, :_reduce_83,
  7, 121, :_reduce_84,
  2, 125, :_reduce_85,
  0, 125, :_reduce_none,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  3, 122, :_reduce_93,
  1, 122, :_reduce_94,
  1, 87, :_reduce_95,
  3, 81, :_reduce_96,
  3, 83, :_reduce_97,
  4, 83, :_reduce_98,
  4, 83, :_reduce_99,
  1, 100, :_reduce_100,
  3, 100, :_reduce_101,
  4, 100, :_reduce_102,
  1, 127, :_reduce_103,
  4, 127, :_reduce_104,
  1, 82, :_reduce_105,
  1, 103, :_reduce_106,
  1, 103, :_reduce_107,
  3, 103, :_reduce_108,
  3, 129, :_reduce_109,
  3, 129, :_reduce_110,
  3, 129, :_reduce_111,
  2, 129, :_reduce_112,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  6, 101, :_reduce_130,
  2, 133, :_reduce_131,
  2, 133, :_reduce_132,
  1, 134, :_reduce_none,
  0, 134, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_136,
  1, 113, :_reduce_137,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  4, 142, :_reduce_147,
  4, 141, :_reduce_148,
  4, 140, :_reduce_149,
  4, 139, :_reduce_150,
  4, 135, :_reduce_151,
  4, 138, :_reduce_152,
  4, 136, :_reduce_153,
  4, 137, :_reduce_154,
  1, 143, :_reduce_155,
  1, 79, :_reduce_156,
  1, 79, :_reduce_157,
  1, 106, :_reduce_158,
  0, 106, :_reduce_none,
  5, 99, :_reduce_160,
  1, 144, :_reduce_none,
  5, 145, :_reduce_162,
  3, 145, :_reduce_163,
  1, 146, :_reduce_164,
  4, 146, :_reduce_165,
  3, 147, :_reduce_166,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  5, 149, :_reduce_173,
  1, 150, :_reduce_174,
  4, 150, :_reduce_175,
  1, 151, :_reduce_none ]

racc_reduce_n = 177

racc_shift_n = 334

racc_token_table = {
  false => 0,
  :error => 1,
  :ASSIGN => 2,
  :AT_SYM => 3,
  :COMMENT => 4,
  :JUMP => 5,
  :IO_METHOD => 6,
  :INPUT => 7,
  :OUTPUT => 8,
  :NUMREG => 9,
  :POSREG => 10,
  :VREG => 11,
  :SREG => 12,
  :TIME_SEGMENT => 13,
  :ARG => 14,
  :MOVE => 15,
  :DOT => 16,
  :TO => 17,
  :AT => 18,
  :TERM => 19,
  :OFFSET => 20,
  :SKIP => 21,
  :SEMICOLON => 22,
  :NEWLINE => 23,
  :STRING => 24,
  :REAL => 25,
  :DIGIT => 26,
  :WORD => 27,
  :EQUAL => 28,
  :EEQUAL => 29,
  :NOTEQUAL => 30,
  :GTE => 31,
  :LTE => 32,
  :LT => 33,
  :GT => 34,
  :BANG => 35,
  :PLUS => 36,
  :MINUS => 37,
  :STAR => 38,
  :SLASH => 39,
  :DIV => 40,
  :AND => 41,
  :OR => 42,
  :MOD => 43,
  :IF => 44,
  :ELSE => 45,
  :END => 46,
  :UNLESS => 47,
  :FOR => 48,
  :IN => 49,
  :WHILE => 50,
  :WAIT_FOR => 51,
  :WAIT_UNTIL => 52,
  :TIMEOUT => 53,
  :AFTER => 54,
  :FANUC_USE => 55,
  :FANUC_SET => 56,
  :NAMESPACE => 57,
  :CASE => 58,
  :WHEN => 59,
  :INDIRECT => 60,
  :POSITION => 61,
  :EVAL => 62,
  :TIMER => 63,
  :TIMER_METHOD => 64,
  :POSITION_DATA => 65,
  :TRUE_FALSE => 66,
  "(" => 67,
  "," => 68,
  ")" => 69,
  ":" => 70,
  "[" => 71,
  "]" => 72,
  "{" => 73,
  "}" => 74 }

racc_nt_base = 75

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ASSIGN",
  "AT_SYM",
  "COMMENT",
  "JUMP",
  "IO_METHOD",
  "INPUT",
  "OUTPUT",
  "NUMREG",
  "POSREG",
  "VREG",
  "SREG",
  "TIME_SEGMENT",
  "ARG",
  "MOVE",
  "DOT",
  "TO",
  "AT",
  "TERM",
  "OFFSET",
  "SKIP",
  "SEMICOLON",
  "NEWLINE",
  "STRING",
  "REAL",
  "DIGIT",
  "WORD",
  "EQUAL",
  "EEQUAL",
  "NOTEQUAL",
  "GTE",
  "LTE",
  "LT",
  "GT",
  "BANG",
  "PLUS",
  "MINUS",
  "STAR",
  "SLASH",
  "DIV",
  "AND",
  "OR",
  "MOD",
  "IF",
  "ELSE",
  "END",
  "UNLESS",
  "FOR",
  "IN",
  "WHILE",
  "WAIT_FOR",
  "WAIT_UNTIL",
  "TIMEOUT",
  "AFTER",
  "FANUC_USE",
  "FANUC_SET",
  "NAMESPACE",
  "CASE",
  "WHEN",
  "INDIRECT",
  "POSITION",
  "EVAL",
  "TIMER",
  "TIMER_METHOD",
  "POSITION_DATA",
  "TRUE_FALSE",
  "\"(\"",
  "\",\"",
  "\")\"",
  "\":\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "$start",
  "program",
  "statements",
  "statement",
  "terminator",
  "block",
  "definition",
  "namespace",
  "assignment",
  "motion_statement",
  "jump",
  "io_method",
  "label_definition",
  "conditional",
  "inline_conditional",
  "forloop",
  "while_loop",
  "program_call",
  "use_statement",
  "set_statement",
  "wait_statement",
  "case_statement",
  "fanuc_eval",
  "timer_method",
  "position_data",
  "var",
  "indirect_thing",
  "indirectable",
  "expression",
  "wait_modifiers",
  "wait_modifier",
  "swallow_newlines",
  "label",
  "args",
  "arg",
  "number",
  "else_block",
  "minmax_val",
  "integer",
  "case_conditions",
  "case_else",
  "case_condition",
  "case_allowed_condition",
  "case_allowed_statement",
  "inlineable",
  "motion_modifiers",
  "motion_modifier",
  "speed",
  "time",
  "time_seg_actions",
  "optional_lpos_arg",
  "definable",
  "namespaces",
  "factor",
  "operator",
  "relop",
  "addop",
  "mulop",
  "signed_number",
  "sign",
  "numreg",
  "output",
  "input",
  "posreg",
  "position",
  "vreg",
  "argument",
  "timer",
  "comment",
  "sn",
  "hash",
  "hash_attributes",
  "hash_attribute",
  "hash_value",
  "array",
  "array_values",
  "array_value" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
 @interpreter.nodes = val[0].flatten 
    result
end

def _reduce_3(val, _values, result)
 result = val 
    result
end

def _reduce_4(val, _values, result)
 result = val[0] << val[1] << val[2] 
    result
end

def _reduce_5(val, _values, result)
 result = val[0] << val[1] 
    result
end

def _reduce_6(val, _values, result)
 result = [val[0]] << val[1] 
    result
end

def _reduce_7(val, _values, result)
 result = [val[0]] 
    result
end

# reduce 8 omitted

def _reduce_9(val, _values, result)
 result = val[0] 
    result
end

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

def _reduce_29(val, _values, result)
 result = TimerMethodNode.new(val[0],val[1]) 
    result
end

def _reduce_30(val, _values, result)
 result = TimerMethodNode.new(val[0],val[1]) 
    result
end

def _reduce_31(val, _values, result)
 result = EvalNode.new(val[1]) 
    result
end

def _reduce_32(val, _values, result)
 result = WaitForNode.new(val[2], val[4]) 
    result
end

def _reduce_33(val, _values, result)
 result = WaitUntilNode.new(val[2],val[4]) 
    result
end

# reduce 34 omitted

def _reduce_35(val, _values, result)
 result = val[0] 
    result
end

def _reduce_36(val, _values, result)
 result = val[0].merge(val[1]) 
    result
end

def _reduce_37(val, _values, result)
 result = { label: val[4] } 
    result
end

def _reduce_38(val, _values, result)
 result = { timeout: [val[4],val[6]] } 
    result
end

def _reduce_39(val, _values, result)
 result = val[1] 
    result
end

def _reduce_40(val, _values, result)
 result = UseNode.new(val[0],val[1]) 
    result
end

def _reduce_41(val, _values, result)
 result = SetNode.new(val[0],val[1],val[3]) 
    result
end

def _reduce_42(val, _values, result)
 result = SetNode.new(val[0],nil,val[1]) 
    result
end

def _reduce_43(val, _values, result)
 result = CallNode.new(val[0],val[2]) 
    result
end

def _reduce_44(val, _values, result)
 result = [val[0]] 
    result
end

def _reduce_45(val, _values, result)
 result = val[0] << val[2] 
    result
end

def _reduce_46(val, _values, result)
 result = [] 
    result
end

# reduce 47 omitted

# reduce 48 omitted

def _reduce_49(val, _values, result)
 result = IOMethodNode.new(val[0],val[1]) 
    result
end

def _reduce_50(val, _values, result)
 result = IOMethodNode.new(val[0],val[1]) 
    result
end

def _reduce_51(val, _values, result)
 result = JumpNode.new(val[1]) 
    result
end

def _reduce_52(val, _values, result)
 result = ConditionalNode.new("if",val[1],val[2],val[3]) 
    result
end

def _reduce_53(val, _values, result)
 result = ConditionalNode.new("unless",val[1],val[2],val[3]) 
    result
end

def _reduce_54(val, _values, result)
 result = ForNode.new(val[1],val[4],val[6],val[8]) 
    result
end

def _reduce_55(val, _values, result)
 result = WhileNode.new(val[1],val[2]) 
    result
end

# reduce 56 omitted

# reduce 57 omitted

def _reduce_58(val, _values, result)
 result = NamespaceNode.new(val[1],val[2]) 
    result
end

def _reduce_59(val, _values, result)
 result = CaseNode.new(val[1],val[3],val[4]) 
    result
end

def _reduce_60(val, _values, result)
 result = val 
    result
end

def _reduce_61(val, _values, result)
 result = val[0] << val[1] << val[2] 
    result
end

def _reduce_62(val, _values, result)
 result = CaseConditionNode.new(val[1],val[3]) 
    result
end

# reduce 63 omitted

# reduce 64 omitted

def _reduce_65(val, _values, result)
 result = CaseConditionNode.new(nil,val[2]) 
    result
end

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

def _reduce_69(val, _values, result)
 result = InlineConditionalNode.new("if",val[2],val[0]) 
    result
end

def _reduce_70(val, _values, result)
 result = InlineConditionalNode.new("unless",val[2],val[0]) 
    result
end

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

def _reduce_75(val, _values, result)
 result = val[1] 
    result
end

def _reduce_76(val, _values, result)
 result = [] 
    result
end

def _reduce_77(val, _values, result)
 result = MotionNode.new(val[0],val[5],val[7]) 
    result
end

def _reduce_78(val, _values, result)
 result = val 
    result
end

def _reduce_79(val, _values, result)
 result = val[0] << val[1] 
    result
end

def _reduce_80(val, _values, result)
 result = SpeedNode.new(val[4]) 
    result
end

def _reduce_81(val, _values, result)
 result = TerminationNode.new(val[4]) 
    result
end

def _reduce_82(val, _values, result)
 result = OffsetNode.new(val[4]) 
    result
end

def _reduce_83(val, _values, result)
 result = TimeNode.new(val[2],val[4],val[6]) 
    result
end

def _reduce_84(val, _values, result)
 result = SkipNode.new(val[4],val[5]) 
    result
end

def _reduce_85(val, _values, result)
 result = val[1] 
    result
end

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

def _reduce_93(val, _values, result)
 result = { speed: val[0], units: val[2] } 
    result
end

def _reduce_94(val, _values, result)
 result = { speed: val[0], units: nil } 
    result
end

def _reduce_95(val, _values, result)
 result = LabelDefinitionNode.new(val[0]) 
    result
end

def _reduce_96(val, _values, result)
 result = DefinitionNode.new(val[0],val[2]) 
    result
end

def _reduce_97(val, _values, result)
 result = AssignmentNode.new(val[0],val[2]) 
    result
end

def _reduce_98(val, _values, result)
 result = AssignmentNode.new(
                                           val[0],
                                           ExpressionNode.new(val[0],val[1],val[3])
                                         )
                                       
    result
end

def _reduce_99(val, _values, result)
 result = AssignmentNode.new(
                                           val[0],
                                           ExpressionNode.new(val[0],val[1],val[3])
                                         )
                                       
    result
end

def _reduce_100(val, _values, result)
 result = VarNode.new(val[0]) 
    result
end

def _reduce_101(val, _values, result)
 result = VarMethodNode.new(val[0],val[2]) 
    result
end

def _reduce_102(val, _values, result)
 result = NamespacedVarNode.new(val[0],val[3]) 
    result
end

def _reduce_103(val, _values, result)
 result = val 
    result
end

def _reduce_104(val, _values, result)
 result = val[0] << val[3] 
    result
end

def _reduce_105(val, _values, result)
 result = val[0] 
    result
end

def _reduce_106(val, _values, result)
 result = val[0] 
    result
end

def _reduce_107(val, _values, result)
 result = val[0] 
    result
end

def _reduce_108(val, _values, result)
 val[1].grouped = true; result = val[1] 
    result
end

def _reduce_109(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

def _reduce_110(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

def _reduce_111(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

def _reduce_112(val, _values, result)
 result = ExpressionNode.new(val[1],val[0],nil) 
    result
end

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

def _reduce_130(val, _values, result)
 result = IndirectNode.new(val[2].to_sym, val[4]) 
    result
end

def _reduce_131(val, _values, result)
 val[1] = val[1].to_i * -1 if val[0] == "-"; result = DigitNode.new(val[1]) 
    result
end

def _reduce_132(val, _values, result)
 val[1] = val[1].to_f * -1 if val[0] == "-"; result = RealNode.new(val[1]) 
    result
end

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

def _reduce_136(val, _values, result)
 result = RealNode.new(val[0]) 
    result
end

def _reduce_137(val, _values, result)
 result = DigitNode.new(val[0]) 
    result
end

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

def _reduce_147(val, _values, result)
 result = TimerNode.new(val[2].to_i) 
    result
end

def _reduce_148(val, _values, result)
 result = ArgumentNode.new(val[2].to_i) 
    result
end

def _reduce_149(val, _values, result)
 result = VisionRegisterNode.new(val[2].to_i) 
    result
end

def _reduce_150(val, _values, result)
 result = PositionNode.new(val[2].to_i) 
    result
end

def _reduce_151(val, _values, result)
 result = NumregNode.new(val[2].to_i) 
    result
end

def _reduce_152(val, _values, result)
 result = PosregNode.new(val[2].to_i) 
    result
end

def _reduce_153(val, _values, result)
 result = IONode.new(val[0], val[2].to_i) 
    result
end

def _reduce_154(val, _values, result)
 result = IONode.new(val[0], val[2].to_i) 
    result
end

def _reduce_155(val, _values, result)
 result = CommentNode.new(val[0]) 
    result
end

def _reduce_156(val, _values, result)
 result = TerminatorNode.new 
    result
end

def _reduce_157(val, _values, result)
 result = val[0] 
    result
end

def _reduce_158(val, _values, result)
 result = TerminatorNode.new 
    result
end

# reduce 159 omitted

def _reduce_160(val, _values, result)
 result = PositionDataNode.new(val[2]) 
    result
end

# reduce 161 omitted

def _reduce_162(val, _values, result)
 result = val[2] 
    result
end

def _reduce_163(val, _values, result)
 result = {} 
    result
end

def _reduce_164(val, _values, result)
 result = val[0] 
    result
end

def _reduce_165(val, _values, result)
 result = val[0].merge(val[3]) 
    result
end

def _reduce_166(val, _values, result)
 result = { val[0].to_sym => val[2] } 
    result
end

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

def _reduce_173(val, _values, result)
 result = val[2] 
    result
end

def _reduce_174(val, _values, result)
 result = val 
    result
end

def _reduce_175(val, _values, result)
 result = val[0] << val[3] 
    result
end

# reduce 176 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module TPPlus
