#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.10
# from Racc grammer file "".
#

require 'racc/parser.rb'
module TPPlus
  class Parser < Racc::Parser


  include TPPlus::Nodes

  attr_reader :interpreter
  def initialize(scanner, interpreter = TPPlus::Interpreter.new)
    @scanner       = scanner
    @interpreter   = interpreter
    super()
  end

  def next_token
    t = @scanner.next_token
    @interpreter.line_count += 1 if t && t[0] == :NEWLINE

    #puts t.inspect
    t
  end

  def parse
    do_parse
    @interpreter
  rescue Racc::ParseError => e
    raise "Parse error on line #{@interpreter.line_count+1}: #{e}"
  end
##### State transition tables begin ###

racc_action_table = [
    69,    23,    38,    28,    27,    28,    28,   113,   112,   -92,
    70,    54,    53,    51,    34,    70,    45,    23,    51,    28,
    27,    38,    39,    51,    38,    84,    26,   -91,   219,   219,
    34,   252,    54,    53,    51,   -91,   -91,    54,    53,    51,
    31,    39,    26,    29,    39,    31,    30,    21,    22,   173,
    31,    24,    25,    31,    32,   -92,   -94,    20,    68,    29,
    27,    31,    30,    21,    22,    51,    31,    24,    25,    31,
    32,    85,   198,    20,    23,    38,    28,    27,    54,    53,
    51,   -63,   219,   173,   -63,    81,   168,    34,    54,    53,
    51,    51,    31,    82,    83,    39,   178,   105,   168,    26,
   106,    94,    95,    98,    99,    96,    97,    31,   100,   101,
   103,   104,   105,   107,   102,   106,    29,    31,    31,    30,
    21,    22,   174,    31,    24,    25,    31,    32,    51,   166,
    20,    23,    38,    28,    27,    54,    53,    51,    51,    54,
    53,    51,    51,    38,    34,   165,    23,    38,    28,    27,
    38,    76,    39,    23,    38,    31,    26,   159,   158,    34,
    54,    53,    51,    39,    31,    31,   179,    39,    31,    31,
    39,    26,   -61,    29,    39,   -61,    30,    21,    22,   217,
   218,    24,    25,    31,    32,    64,   182,    20,    29,    31,
   164,    30,    21,    22,   163,   162,    24,    25,    31,    32,
    51,   183,    20,    23,    38,    28,    27,   241,    61,   184,
    67,    47,   238,   239,   240,   242,    34,    54,    53,    51,
   -60,   186,    78,   -60,    39,    79,   -62,    31,    26,   -62,
    65,   187,    60,    54,    53,    51,    54,    53,    51,    23,
    38,    28,    27,   188,   189,    29,    31,   190,    30,    21,
    22,   191,    34,    24,    25,    31,    32,   192,   193,    20,
    39,    46,    31,   195,    26,    31,    94,    95,    98,    99,
    96,    97,   161,   100,   101,   103,   104,   105,   107,   102,
   106,    29,    64,    64,    30,    21,    22,   170,   202,    24,
    25,    31,    32,   160,    64,    20,    80,    51,    51,   203,
   182,   140,   206,   207,   208,    61,    61,    67,    67,    51,
   209,   210,   211,   212,   213,   140,   140,    61,    44,    67,
    64,    86,    90,   -77,    31,    31,   224,    65,    65,    60,
    60,    64,    64,   225,   226,    51,    31,    68,    64,    65,
   110,    60,   149,    61,   231,    67,    51,    51,    23,   148,
   231,    54,    53,    51,    61,    61,    67,    67,   140,   236,
   237,    61,    31,    67,   111,    65,    64,    60,   243,   244,
   245,   246,    64,    31,    31,   247,    65,    65,    60,    60,
    31,    51,   248,    65,    64,    60,   249,    51,   146,    61,
   145,    67,   140,   140,    23,    61,   259,    67,   260,    51,
    64,   261,   262,   263,   265,   266,   134,    61,    31,    67,
   270,    65,    64,    60,    31,    51,    41,    65,    64,    60,
   272,   nil,   nil,    61,   nil,    67,    31,    51,   nil,    65,
   nil,    60,   nil,    51,   nil,    61,   nil,    67,   nil,   nil,
   nil,    61,    31,    67,   nil,    65,   nil,    60,   nil,   nil,
   nil,   nil,   nil,   nil,    31,   nil,   nil,    65,   nil,    60,
    31,   nil,   nil,    65,   nil,    60,    94,    95,    98,    99,
    96,    97,   nil,   100,   101,   103,   104,   105,   107,   102,
   106,    94,    95,    98,    99,    96,    97,   nil,   100,   101,
   103,   104,   105,   107,   102,   106,   nil,   nil,   150,   133,
   132,   130,   131,   128,   nil,   129,   nil,   127,   nil,   nil,
   nil,   nil,   nil,   155,   nil,   nil,   nil,   nil,    54,    53,
    94,    95,    98,    99,    96,    97,   nil,   100,   101,   103,
   104,   105,   107,   102,   106,    94,    95,    98,    99,    96,
    97,   nil,   100,   101,   103,   104,   105,   107,   102,   106,
    94,    95,    98,    99,    96,    97,   nil,   100,   101,   103,
   104,   105,   107,   102,   106,    94,    95,    98,    99,    96,
    97,   nil,   100,   101,   103,   104,   105,   107,   102,   106,
    94,    95,    98,    99,    96,    97,   nil,   100,   101,   103,
   104,   105,   107,   102,   106,    94,    95,    98,    99,    96,
    97,   nil,   100,   101,   103,   104,   105,   107,   102,   106,
    94,    95,    98,    99,    96,    97,   nil,   100,   101,   103,
   104,   105,   107,   102,   106,    94,    95,    98,    99,    96,
    97,   nil,   100,   101,   103,   104,   105,   107,   102,   106,
    94,    95,    98,    99,    96,    97,   nil,   100,   101,   103,
   104,   105,   107,   102,   106 ]

racc_action_check = [
    26,     4,     4,     4,     4,   214,   215,    66,    66,     6,
    51,   247,   247,   247,     4,    26,    21,    42,    84,    42,
    42,   135,     4,   246,    43,    37,     4,    26,   214,   215,
    42,   244,   244,   244,   244,    26,    26,    45,    45,    45,
   247,   135,    42,     4,    43,    84,     4,     4,     4,   139,
   246,     4,     4,     4,     4,     6,    51,     4,    26,    42,
   263,   244,    42,    42,    42,    90,    45,    42,    42,    42,
    42,    37,   171,    42,    73,    73,    73,    73,   111,   111,
   111,    14,   263,   171,    14,    36,   137,    73,   226,   226,
   226,    27,    90,    36,    36,    73,   148,   109,   136,    73,
   109,    73,    73,    73,    73,    73,    73,   111,    73,    73,
    73,    73,    73,    73,    73,    73,    73,   226,    27,    73,
    73,    73,   143,   148,    73,    73,    73,    73,   265,   133,
    73,    76,    76,    76,    76,   110,   110,   110,    32,   173,
   173,   173,   202,     2,    76,   132,     0,     0,     0,     0,
   220,    31,    76,    28,   223,   265,    76,   114,   114,     0,
    68,    68,    68,     2,   110,    32,   149,     0,   173,   202,
   220,     0,     7,    76,   223,     7,    76,    76,    76,   205,
   205,    76,    76,    76,    76,   145,   150,    76,     0,    68,
   131,     0,     0,     0,   130,   129,     0,     0,     0,     0,
   145,   156,     0,   168,   168,   168,   168,   235,   145,   157,
   145,    23,   235,   235,   235,   235,   168,   245,   245,   245,
     9,   160,    33,     9,   168,    33,    10,   145,   168,    10,
   145,   161,   145,   159,   159,   159,    24,    24,    24,    75,
    75,    75,    75,   162,   163,   168,   245,   164,   168,   168,
   168,   165,    75,   168,   168,   168,   168,   166,   167,   168,
    75,    22,   159,   169,    75,    24,    75,    75,    75,    75,
    75,    75,   128,    75,    75,    75,    75,    75,    75,    75,
    75,    75,    78,    79,    75,    75,    75,   138,   174,    75,
    75,    75,    75,   127,    81,    75,    34,    78,    79,   179,
   180,   182,   186,   187,   188,    78,    79,    78,    79,    81,
   189,   190,   191,   192,   196,   198,   199,    81,    20,    81,
    93,    41,    55,    57,    78,    79,   216,    78,    79,    78,
    79,    61,    60,   217,   218,    93,    81,   219,    25,    81,
    64,    81,    88,    93,   224,    93,    61,    60,   225,    85,
   229,    25,    25,    25,    61,    60,    61,    60,   231,   232,
   233,    25,    93,    25,    65,    93,    91,    93,   237,   238,
   239,   240,    46,    61,    60,   241,    61,    60,    61,    60,
    25,    91,   242,    25,    29,    25,   243,    46,    83,    91,
    82,    91,    80,    77,   248,    46,   250,    46,   251,    29,
    30,   253,   254,   255,   258,   260,    70,    29,    91,    29,
   264,    91,   146,    91,    46,    30,     1,    46,    92,    46,
   267,   nil,   nil,    30,   nil,    30,    29,   146,   nil,    29,
   nil,    29,   nil,    92,   nil,   146,   nil,   146,   nil,   nil,
   nil,    92,    30,    92,   nil,    30,   nil,    30,   nil,   nil,
   nil,   nil,   nil,   nil,   146,   nil,   nil,   146,   nil,   146,
    92,   nil,   nil,    92,   nil,    92,    89,    89,    89,    89,
    89,    89,   nil,    89,    89,    89,    89,    89,    89,    89,
    89,   108,   108,   108,   108,   108,   108,   nil,   108,   108,
   108,   108,   108,   108,   108,   108,   nil,   nil,    89,    69,
    69,    69,    69,    69,   nil,    69,   nil,    69,   nil,   nil,
   nil,   nil,   nil,   108,   nil,   nil,   nil,   nil,    69,    69,
   154,   154,   154,   154,   154,   154,   nil,   154,   154,   154,
   154,   154,   154,   154,   154,   153,   153,   153,   153,   153,
   153,   nil,   153,   153,   153,   153,   153,   153,   153,   153,
   152,   152,   152,   152,   152,   152,   nil,   152,   152,   152,
   152,   152,   152,   152,   152,    56,    56,    56,    56,    56,
    56,   nil,    56,    56,    56,    56,    56,    56,    56,    56,
   144,   144,   144,   144,   144,   144,   nil,   144,   144,   144,
   144,   144,   144,   144,   144,   142,   142,   142,   142,   142,
   142,   nil,   142,   142,   142,   142,   142,   142,   142,   142,
   176,   176,   176,   176,   176,   176,   nil,   176,   176,   176,
   176,   176,   176,   176,   176,   175,   175,   175,   175,   175,
   175,   nil,   175,   175,   175,   175,   175,   175,   175,   175,
   141,   141,   141,   141,   141,   141,   nil,   141,   141,   141,
   141,   141,   141,   141,   141 ]

racc_action_pointer = [
   143,   416,   139,   nil,    -2,   nil,    -8,   127,   nil,   175,
   181,   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil,   nil,
   293,   -44,   201,   183,   210,   325,    -2,    63,   150,   371,
   387,   123,   110,   177,   279,   nil,    56,     8,   nil,   nil,
   nil,   321,    14,    20,   nil,    11,   359,   nil,   nil,   nil,
   nil,    -7,   nil,   nil,   nil,   261,   535,   262,   nil,   nil,
   319,   318,   nil,   nil,   280,   304,   -19,   nil,   134,   492,
   378,   nil,   nil,    71,   nil,   236,   128,   369,   269,   270,
   368,   281,   361,   359,   -10,   286,   nil,   nil,   281,   436,
    37,   353,   405,   307,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   451,    56,
   109,    52,   nil,   nil,    96,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   229,   208,   131,
   130,   126,    81,    65,   nil,    17,    52,    40,   240,    -8,
   nil,   610,   565,   104,   550,   172,   399,   nil,    68,   141,
   169,   nil,   520,   505,   490,   nil,   139,   147,   nil,   207,
   194,   204,   216,   217,   220,   224,   230,   211,   200,   216,
   nil,    26,   nil,   113,   228,   595,   580,   nil,   nil,   237,
   283,   nil,   277,   nil,   nil,   nil,   237,   238,   239,   245,
   246,   247,   248,   nil,   nil,   nil,   267,   nil,   291,   292,
   nil,   nil,   114,   nil,   nil,   128,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     0,     1,   264,   273,   274,   277,
   146,   nil,   nil,   150,   327,   345,    62,   nil,   nil,   333,
   nil,   334,   297,   299,   nil,   193,   nil,   343,   309,   310,
   311,   315,   322,   324,     6,   191,    -5,   -15,   391,   nil,
   334,   337,   nil,   339,   340,   342,   nil,   nil,   343,   nil,
   380,   nil,   nil,    54,   348,   100,   nil,   358,   nil,   nil,
   nil,   nil,   nil ]

racc_action_default = [
    -1,  -147,    -2,    -3,    -7,   -10,   -11,   -12,   -13,   -14,
   -15,   -16,   -17,   -18,   -19,   -20,   -21,   -22,   -23,   -24,
  -147,  -147,  -147,  -147,  -147,  -147,   -94,  -147,  -147,  -124,
  -124,  -147,  -147,  -147,  -147,   -84,  -147,  -147,  -142,  -143,
  -144,  -147,    -5,    -6,   -25,  -147,  -124,   -33,   -34,   -76,
   -77,   -91,   -92,  -125,  -126,  -147,   -36,  -117,   -95,   -96,
  -124,  -124,  -116,  -118,  -147,  -147,  -147,  -123,   -40,  -147,
  -147,   -43,   -44,    -8,  -117,    -8,    -8,  -146,  -124,  -124,
  -146,  -124,  -147,  -147,  -147,  -147,   273,    -4,  -147,  -147,
  -147,  -124,  -124,  -124,  -102,  -103,  -104,  -105,  -106,  -107,
  -108,  -109,  -110,  -111,  -112,  -113,  -114,  -115,  -147,  -101,
  -147,  -147,  -121,  -122,  -147,   -38,   -41,   -42,   -85,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -147,  -147,  -147,
  -147,  -147,  -147,  -147,   -90,    -9,   -65,   -65,  -147,  -147,
  -145,   -58,   -59,  -147,   -86,  -124,  -124,   -89,  -147,  -147,
   -28,   -35,   -98,   -99,  -100,   -97,  -147,  -147,   -37,  -147,
  -147,  -147,  -147,  -147,  -147,  -147,  -147,  -147,    -8,  -147,
   -47,   -55,   -49,  -147,  -147,   -87,   -88,   -93,   -94,  -147,
   -27,   -29,  -146,  -119,  -120,   -39,  -147,  -147,  -147,  -147,
  -147,  -147,  -147,   -45,   -64,   -46,  -147,   -50,  -146,  -146,
   -52,   -53,  -147,   -26,   -30,  -147,  -135,  -136,  -137,  -138,
  -139,  -140,  -141,   -48,  -147,  -147,  -147,  -147,  -147,  -147,
  -147,   -56,   -57,  -147,  -147,  -147,  -147,   -54,   -51,   -66,
   -67,  -146,  -147,  -147,   -68,  -147,   -31,  -147,  -147,  -147,
  -147,  -147,  -147,  -147,  -147,  -147,  -147,  -147,  -147,   -32,
  -147,  -147,   -83,  -147,  -147,  -147,   -80,   -81,   -75,   -69,
  -147,   -70,   -71,  -147,  -147,  -147,   -82,  -147,   -78,   -79,
   -73,   -74,   -72 ]

racc_goto_table = [
    36,    48,    55,    72,    36,   115,    42,   116,   125,   139,
     6,   172,   143,    56,     6,   221,   221,    73,    75,     2,
   181,     1,    88,    43,    50,    57,   136,    71,   137,   138,
   230,   114,    77,   171,    89,   234,   222,   222,   220,   223,
   167,   169,    36,   197,   196,    50,   180,    42,   108,   109,
   204,   199,     6,   269,   229,    87,   250,   255,   267,   264,
   118,   119,   120,   121,   268,   122,   141,   142,   117,   144,
   123,   124,   126,    36,   nil,    36,    36,   nil,   nil,   152,
   153,   154,   nil,     6,   147,     6,     6,   156,   157,   nil,
   151,   nil,   nil,   nil,   nil,   nil,   185,   nil,   116,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    50,    50,   200,   nil,   205,   nil,   nil,   nil,   nil,   nil,
   nil,   194,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   214,   215,   nil,   175,   176,   nil,   nil,   nil,   nil,    42,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   177,   117,
   nil,   nil,   nil,   235,   nil,   nil,   nil,   nil,    36,   nil,
   nil,   nil,   nil,   201,   nil,   nil,   nil,   nil,     6,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   257,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   232,   nil,   216,   233,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   251,   253,   258,   227,   nil,    50,   228,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    50,    50,   254,   256,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   271 ]

racc_goto_check = [
    27,    21,    21,    26,    27,    29,     4,    30,    30,    25,
     7,    34,    25,    22,     7,    15,    15,    22,    22,     2,
    24,     1,    21,     2,    27,    27,     5,    27,     5,     5,
    39,    28,    27,    32,    22,    39,    10,    10,    36,    36,
    31,    31,    27,    34,    33,    27,    23,     4,    22,    22,
    24,    35,     7,    11,    38,     3,    40,    41,    42,    43,
    44,    54,    55,    56,    15,    57,    22,    22,    27,    22,
    58,    59,    60,    27,   nil,    27,    27,   nil,   nil,    22,
    22,    22,   nil,     7,    27,     7,     7,    21,    21,   nil,
    27,   nil,   nil,   nil,   nil,   nil,    29,   nil,    30,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    27,    27,    30,   nil,    25,   nil,   nil,   nil,   nil,   nil,
   nil,     5,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    25,    25,   nil,    22,    22,   nil,   nil,   nil,   nil,     4,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     7,    27,
   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,    27,   nil,
   nil,   nil,   nil,    27,   nil,   nil,   nil,   nil,     7,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    30,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    26,   nil,    27,    21,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    21,    21,    26,     4,   nil,    27,     4,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    27,    27,    27,    27,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    27 ]

racc_goto_pointer = [
   nil,    21,    19,    13,     4,   -47,   nil,    10,   nil,   nil,
  -178,  -210,   nil,   nil,   nil,  -199,   nil,   nil,   nil,   nil,
   nil,   -23,   -12,  -104,  -130,   -68,   -25,     0,   -37,   -63,
   -61,   -96,  -106,  -127,  -128,  -122,  -176,   nil,  -170,  -194,
  -188,  -190,  -205,  -199,    -9,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    -8,    -7,    -6,    -4,     1,     2,
     3,   nil ]

racc_goto_default = [
   nil,   nil,   135,     3,     4,   nil,     5,    52,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,   nil,   nil,   nil,   nil,   nil,    35,    74,   nil,   nil,
    49,   nil,   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    37,    58,    59,    91,    92,
    93,    62,    63,    66,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    40 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 67, :_reduce_none,
  1, 67, :_reduce_2,
  1, 68, :_reduce_3,
  3, 68, :_reduce_4,
  2, 68, :_reduce_5,
  2, 68, :_reduce_6,
  1, 68, :_reduce_7,
  0, 71, :_reduce_none,
  1, 71, :_reduce_9,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  2, 86, :_reduce_25,
  6, 84, :_reduce_26,
  5, 84, :_reduce_27,
  0, 89, :_reduce_none,
  1, 89, :_reduce_29,
  2, 89, :_reduce_30,
  6, 90, :_reduce_31,
  8, 90, :_reduce_32,
  2, 92, :_reduce_33,
  2, 82, :_reduce_34,
  4, 83, :_reduce_35,
  2, 83, :_reduce_36,
  4, 81, :_reduce_37,
  1, 94, :_reduce_38,
  3, 94, :_reduce_39,
  0, 94, :_reduce_40,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  2, 77, :_reduce_43,
  2, 76, :_reduce_44,
  5, 79, :_reduce_45,
  5, 79, :_reduce_46,
  4, 73, :_reduce_47,
  6, 85, :_reduce_48,
  1, 98, :_reduce_49,
  2, 98, :_reduce_50,
  5, 100, :_reduce_51,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  4, 99, :_reduce_54,
  0, 99, :_reduce_none,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  3, 80, :_reduce_58,
  3, 80, :_reduce_59,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  2, 97, :_reduce_64,
  0, 97, :_reduce_65,
  8, 75, :_reduce_66,
  1, 104, :_reduce_67,
  2, 104, :_reduce_68,
  6, 105, :_reduce_69,
  6, 105, :_reduce_70,
  6, 105, :_reduce_71,
  8, 105, :_reduce_72,
  7, 105, :_reduce_73,
  2, 109, :_reduce_74,
  0, 109, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  3, 106, :_reduce_82,
  1, 106, :_reduce_83,
  1, 78, :_reduce_84,
  3, 72, :_reduce_85,
  3, 74, :_reduce_86,
  4, 74, :_reduce_87,
  4, 74, :_reduce_88,
  3, 93, :_reduce_89,
  3, 93, :_reduce_90,
  1, 93, :_reduce_91,
  1, 111, :_reduce_92,
  4, 111, :_reduce_93,
  1, 73, :_reduce_none,
  1, 88, :_reduce_95,
  1, 88, :_reduce_96,
  3, 88, :_reduce_97,
  3, 113, :_reduce_98,
  3, 113, :_reduce_99,
  3, 113, :_reduce_100,
  2, 113, :_reduce_101,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  4, 118, :_reduce_119,
  4, 118, :_reduce_120,
  2, 117, :_reduce_121,
  2, 117, :_reduce_122,
  1, 119, :_reduce_none,
  0, 119, :_reduce_none,
  1, 96, :_reduce_125,
  1, 96, :_reduce_126,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  4, 126, :_reduce_135,
  4, 125, :_reduce_136,
  4, 124, :_reduce_137,
  4, 120, :_reduce_138,
  4, 123, :_reduce_139,
  4, 121, :_reduce_140,
  4, 122, :_reduce_141,
  1, 127, :_reduce_142,
  1, 70, :_reduce_143,
  1, 70, :_reduce_144,
  1, 91, :_reduce_145,
  0, 91, :_reduce_none ]

racc_reduce_n = 147

racc_shift_n = 273

racc_token_table = {
  false => 0,
  :error => 1,
  :ASSIGN => 2,
  :AT_SYM => 3,
  :COMMENT => 4,
  :JUMP => 5,
  :IO_METHOD => 6,
  :INPUT => 7,
  :OUTPUT => 8,
  :NUMREG => 9,
  :POSREG => 10,
  :VREG => 11,
  :SREG => 12,
  :POSITION => 13,
  :TIME_SEGMENT => 14,
  :ARG => 15,
  :MOVE => 16,
  :DOT => 17,
  :TO => 18,
  :AT => 19,
  :TERM => 20,
  :OFFSET => 21,
  :SKIP => 22,
  :SEMICOLON => 23,
  :NEWLINE => 24,
  :STRING => 25,
  :REAL => 26,
  :DIGIT => 27,
  :WORD => 28,
  :EQUAL => 29,
  :EEQUAL => 30,
  :NOTEQUAL => 31,
  :GTE => 32,
  :LTE => 33,
  :LT => 34,
  :GT => 35,
  :BANG => 36,
  :PLUS => 37,
  :MINUS => 38,
  :STAR => 39,
  :SLASH => 40,
  :DIV => 41,
  :AND => 42,
  :OR => 43,
  :MOD => 44,
  :IF => 45,
  :ELSE => 46,
  :END => 47,
  :UNLESS => 48,
  :WAIT_FOR => 49,
  :WAIT_UNTIL => 50,
  :TIMEOUT => 51,
  :AFTER => 52,
  :FANUC_USE => 53,
  :FANUC_SET => 54,
  :NAMESPACE => 55,
  :CASE => 56,
  :WHEN => 57,
  :POSITION_REGISTER => 58,
  :EVAL => 59,
  "(" => 60,
  "," => 61,
  ")" => 62,
  ":" => 63,
  "[" => 64,
  "]" => 65 }

racc_nt_base = 66

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ASSIGN",
  "AT_SYM",
  "COMMENT",
  "JUMP",
  "IO_METHOD",
  "INPUT",
  "OUTPUT",
  "NUMREG",
  "POSREG",
  "VREG",
  "SREG",
  "POSITION",
  "TIME_SEGMENT",
  "ARG",
  "MOVE",
  "DOT",
  "TO",
  "AT",
  "TERM",
  "OFFSET",
  "SKIP",
  "SEMICOLON",
  "NEWLINE",
  "STRING",
  "REAL",
  "DIGIT",
  "WORD",
  "EQUAL",
  "EEQUAL",
  "NOTEQUAL",
  "GTE",
  "LTE",
  "LT",
  "GT",
  "BANG",
  "PLUS",
  "MINUS",
  "STAR",
  "SLASH",
  "DIV",
  "AND",
  "OR",
  "MOD",
  "IF",
  "ELSE",
  "END",
  "UNLESS",
  "WAIT_FOR",
  "WAIT_UNTIL",
  "TIMEOUT",
  "AFTER",
  "FANUC_USE",
  "FANUC_SET",
  "NAMESPACE",
  "CASE",
  "WHEN",
  "POSITION_REGISTER",
  "EVAL",
  "\"(\"",
  "\",\"",
  "\")\"",
  "\":\"",
  "\"[\"",
  "\"]\"",
  "$start",
  "program",
  "statements",
  "statement",
  "terminator",
  "block",
  "definition",
  "namespace",
  "assignment",
  "motion_statement",
  "jump",
  "io_method",
  "label_definition",
  "conditional",
  "inline_conditional",
  "program_call",
  "use_statement",
  "set_statement",
  "wait_statement",
  "case_statement",
  "fanuc_eval",
  "indirectable",
  "expression",
  "wait_modifiers",
  "wait_modifier",
  "swallow_newlines",
  "label",
  "var",
  "args",
  "arg",
  "number",
  "else_block",
  "case_conditions",
  "case_else",
  "case_condition",
  "case_allowed_condition",
  "case_allowed_statement",
  "inlineable",
  "motion_modifiers",
  "motion_modifier",
  "speed",
  "time",
  "time_seg_actions",
  "optional_lpos_arg",
  "definable",
  "namespaces",
  "factor",
  "operator",
  "relop",
  "addop",
  "mulop",
  "signed_number",
  "indirect_position",
  "sign",
  "numreg",
  "output",
  "input",
  "posreg",
  "position",
  "vreg",
  "argument",
  "comment" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
 @interpreter.nodes = val[0].flatten 
    result
end

def _reduce_3(val, _values, result)
 result = val 
    result
end

def _reduce_4(val, _values, result)
 result = val[0] << val[1] << val[2] 
    result
end

def _reduce_5(val, _values, result)
 result = val[0] << val[1] 
    result
end

def _reduce_6(val, _values, result)
 result = [val[0]] << val[1] 
    result
end

def _reduce_7(val, _values, result)
 result = [val[0]] 
    result
end

# reduce 8 omitted

def _reduce_9(val, _values, result)
 result = val[0] 
    result
end

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

def _reduce_25(val, _values, result)
 result = EvalNode.new(val[1]) 
    result
end

def _reduce_26(val, _values, result)
 result = WaitForNode.new(val[2], val[4]) 
    result
end

def _reduce_27(val, _values, result)
 result = WaitUntilNode.new(val[2],val[4]) 
    result
end

# reduce 28 omitted

def _reduce_29(val, _values, result)
 result = val[0] 
    result
end

def _reduce_30(val, _values, result)
 result = val[0].merge(val[1]) 
    result
end

def _reduce_31(val, _values, result)
 result = { label: val[4] } 
    result
end

def _reduce_32(val, _values, result)
 result = { timeout: [val[4],val[6]] } 
    result
end

def _reduce_33(val, _values, result)
 result = val[1] 
    result
end

def _reduce_34(val, _values, result)
 result = UseNode.new(val[0],val[1]) 
    result
end

def _reduce_35(val, _values, result)
 result = SetNode.new(val[0],val[1],val[3]) 
    result
end

def _reduce_36(val, _values, result)
 result = SetNode.new(val[0],nil,val[1]) 
    result
end

def _reduce_37(val, _values, result)
 result = CallNode.new(val[0],val[2]) 
    result
end

def _reduce_38(val, _values, result)
 result = [val[0]] 
    result
end

def _reduce_39(val, _values, result)
 result = val[0] << val[2] 
    result
end

def _reduce_40(val, _values, result)
 result = [] 
    result
end

# reduce 41 omitted

# reduce 42 omitted

def _reduce_43(val, _values, result)
 result = IOMethodNode.new(val[0],val[1]) 
    result
end

def _reduce_44(val, _values, result)
 result = JumpNode.new(val[1]) 
    result
end

def _reduce_45(val, _values, result)
 result = ConditionalNode.new("if",val[1],val[2],val[3]) 
    result
end

def _reduce_46(val, _values, result)
 result = ConditionalNode.new("unless",val[1],val[2],val[3]) 
    result
end

def _reduce_47(val, _values, result)
 result = NamespaceNode.new(val[1],val[2]) 
    result
end

def _reduce_48(val, _values, result)
 result = CaseNode.new(val[1],val[3],val[4]) 
    result
end

def _reduce_49(val, _values, result)
 result = val 
    result
end

def _reduce_50(val, _values, result)
 result = val[0] << val[1] << val[2] 
    result
end

def _reduce_51(val, _values, result)
 result = CaseConditionNode.new(val[1],val[3]) 
    result
end

# reduce 52 omitted

# reduce 53 omitted

def _reduce_54(val, _values, result)
 result = CaseConditionNode.new(nil,val[2]) 
    result
end

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

def _reduce_58(val, _values, result)
 result = InlineConditionalNode.new("if",val[2],val[0]) 
    result
end

def _reduce_59(val, _values, result)
 result = InlineConditionalNode.new("unless",val[2],val[0]) 
    result
end

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

def _reduce_64(val, _values, result)
 result = val[1] 
    result
end

def _reduce_65(val, _values, result)
 result = [] 
    result
end

def _reduce_66(val, _values, result)
 result = MotionNode.new(val[0],val[5],val[7]) 
    result
end

def _reduce_67(val, _values, result)
 result = val 
    result
end

def _reduce_68(val, _values, result)
 result = val[0] << val[1] 
    result
end

def _reduce_69(val, _values, result)
 result = SpeedNode.new(val[4]) 
    result
end

def _reduce_70(val, _values, result)
 result = TerminationNode.new(val[4]) 
    result
end

def _reduce_71(val, _values, result)
 result = OffsetNode.new(val[4]) 
    result
end

def _reduce_72(val, _values, result)
 result = TimeNode.new(val[2],val[4],val[6]) 
    result
end

def _reduce_73(val, _values, result)
 result = SkipNode.new(val[4],val[5]) 
    result
end

def _reduce_74(val, _values, result)
 result = val[1] 
    result
end

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

def _reduce_82(val, _values, result)
 result = { speed: val[0], units: val[2] } 
    result
end

def _reduce_83(val, _values, result)
 result = { speed: val[0], units: nil } 
    result
end

def _reduce_84(val, _values, result)
 result = LabelDefinitionNode.new(val[0]) 
    result
end

def _reduce_85(val, _values, result)
 result = DefinitionNode.new(val[0],val[2]) 
    result
end

def _reduce_86(val, _values, result)
 result = AssignmentNode.new(val[0],val[2]) 
    result
end

def _reduce_87(val, _values, result)
 result = AssignmentNode.new(
                                           val[0],
                                           ExpressionNode.new(val[0],val[1],val[3])
                                         )
                                       
    result
end

def _reduce_88(val, _values, result)
 result = AssignmentNode.new(
                                           val[0],
                                           ExpressionNode.new(val[0],val[1],val[3])
                                         )
                                       
    result
end

def _reduce_89(val, _values, result)
 result = NamespacedVarNode.new(val[0],val[2]) 
    result
end

def _reduce_90(val, _values, result)
 result = VarMethodNode.new(val[0],val[2]) 
    result
end

def _reduce_91(val, _values, result)
 result = VarNode.new(val[0]) 
    result
end

def _reduce_92(val, _values, result)
 result = val 
    result
end

def _reduce_93(val, _values, result)
 result = val[0] << val[3] 
    result
end

# reduce 94 omitted

def _reduce_95(val, _values, result)
 result = val[0] 
    result
end

def _reduce_96(val, _values, result)
 result = val[0] 
    result
end

def _reduce_97(val, _values, result)
 val[1].grouped = true; result = val[1] 
    result
end

def _reduce_98(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

def _reduce_99(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

def _reduce_100(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

def _reduce_101(val, _values, result)
 result = ExpressionNode.new(val[1],val[0],nil) 
    result
end

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

def _reduce_119(val, _values, result)
 result = IndirectNode.new(:position, val[2]) 
    result
end

def _reduce_120(val, _values, result)
 result = IndirectNode.new(:position_register, val[2]) 
    result
end

def _reduce_121(val, _values, result)
 val[1] = val[1].to_i * -1 if val[0] == "-"; result = DigitNode.new(val[1]) 
    result
end

def _reduce_122(val, _values, result)
 val[1] = val[1].to_f * -1 if val[0] == "-"; result = RealNode.new(val[1]) 
    result
end

# reduce 123 omitted

# reduce 124 omitted

def _reduce_125(val, _values, result)
 result = DigitNode.new(val[0]) 
    result
end

def _reduce_126(val, _values, result)
 result = RealNode.new(val[0]) 
    result
end

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

def _reduce_135(val, _values, result)
 result = ArgumentNode.new(val[2].to_i) 
    result
end

def _reduce_136(val, _values, result)
 result = VisionRegisterNode.new(val[2].to_i) 
    result
end

def _reduce_137(val, _values, result)
 result = PositionNode.new(val[2].to_i) 
    result
end

def _reduce_138(val, _values, result)
 result = NumregNode.new(val[2].to_i) 
    result
end

def _reduce_139(val, _values, result)
 result = PosregNode.new(val[2].to_i) 
    result
end

def _reduce_140(val, _values, result)
 result = IONode.new(val[0], val[2].to_i) 
    result
end

def _reduce_141(val, _values, result)
 result = IONode.new(val[0], val[2].to_i) 
    result
end

def _reduce_142(val, _values, result)
 result = CommentNode.new(val[0]) 
    result
end

def _reduce_143(val, _values, result)
 result = TerminatorNode.new 
    result
end

def _reduce_144(val, _values, result)
 result = val[0] 
    result
end

def _reduce_145(val, _values, result)
 result = TerminatorNode.new 
    result
end

# reduce 146 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module TPPlus
