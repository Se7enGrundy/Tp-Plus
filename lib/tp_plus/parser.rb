#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.10
# from Racc grammer file "".
#

require 'racc/parser.rb'
module TPPlus
  class Parser < Racc::Parser


  include TPPlus::Nodes

  attr_reader :interpreter
  def initialize(scanner, interpreter = TPPlus::Interpreter.new)
    @scanner       = scanner
    @interpreter   = interpreter
    super()
  end

  def next_token
    t = @scanner.next_token
    @interpreter.line_count += 1 if t && t[0] == :NEWLINE

    #puts t.inspect
    t
  end

  def parse
    do_parse
    @interpreter
  rescue Racc::ParseError => e
    raise "Parse error on line #{@interpreter.line_count+1}: #{e}"
  end
##### State transition tables begin ###

racc_action_table = [
    71,   263,    56,    57,    53,    29,   135,   134,   132,   133,
   130,    53,    40,   129,    72,    28,   207,    24,    40,    29,
    28,   223,   224,    72,    56,    57,   -94,   227,   175,    36,
    40,    41,   171,    33,   -94,   -94,   227,    41,    53,   -65,
    33,    27,   -65,    97,    98,   101,   102,    99,   100,    41,
   103,   104,   106,   107,   108,   110,   105,   109,    30,   131,
    70,    31,    32,    53,    22,    23,    40,    33,    25,    26,
    33,    34,   -99,   169,   202,    21,    24,    40,    29,    28,
    40,    82,    40,   176,    83,    41,    29,   175,    36,    57,
    53,   108,    33,    53,   109,    67,    41,    53,   169,    41,
    27,    41,    97,    98,   101,   102,    99,   100,   227,   103,
   104,   106,   107,   108,   110,   105,   109,    30,    88,    33,
    31,    32,    33,    22,    23,    53,    33,    25,    26,    33,
    34,    53,    53,   167,    21,    24,    40,    29,    28,    84,
    64,   181,    69,    53,    56,    57,    53,    36,    85,   184,
    24,    40,    29,    28,    33,    41,    86,    87,   166,    27,
    33,    33,    36,   165,    67,   164,    24,    63,    29,    28,
    41,   185,    33,   163,    27,    33,    30,   187,    36,    31,
    32,   -67,    22,    23,   -67,   188,    25,    26,    33,    34,
    27,    30,   189,    21,    31,    32,   -66,    22,    23,   -66,
   190,    25,    26,    33,    34,   191,   -68,    30,    21,   -68,
    31,    32,   192,    22,    23,   160,   159,    25,    26,    33,
    34,    53,    53,   193,    21,    24,    40,    29,    28,    64,
    64,    69,    69,   194,    56,    57,    53,    36,   115,   114,
    24,    40,    29,    28,    64,    41,    69,    80,   196,    27,
    33,    33,    36,    67,    67,    24,    63,    63,   162,    49,
    41,   206,   161,   158,    27,    33,    30,   172,    67,    31,
    32,    63,    22,    23,   184,   143,    25,    26,    33,    34,
    48,    30,   211,    21,    31,    32,   212,    22,    23,   213,
   214,    25,    26,    33,    34,    53,    53,   215,    21,    24,
    40,    29,    28,    64,    64,    69,    69,    53,    57,    53,
   216,    36,   217,   218,   219,    64,   143,    69,   143,    41,
    47,    89,   225,    27,    33,    33,    46,    67,    67,    93,
    63,    63,   -82,    56,    57,    53,    33,   232,    33,    67,
    30,   233,    63,    31,    32,   234,    22,    23,    53,   235,
    25,    26,    33,    34,   252,    53,    64,    21,    69,   249,
   250,   251,   253,    64,    33,    69,    56,    57,    53,    70,
   113,   151,   240,    24,   150,   149,   240,    33,    53,   143,
    67,   246,   247,    63,    33,   248,    64,    67,    69,   148,
    63,    97,    98,   101,   102,    99,   100,    33,   103,   104,
   106,   107,   108,   110,   105,   109,    53,    33,   254,   255,
    67,   256,   257,    63,    64,   258,    69,   259,   260,   143,
    97,    98,   101,   102,    99,   100,   152,   103,   104,   106,
   107,   108,   110,   105,   109,    33,    53,    53,    67,   143,
   -97,    63,   136,    24,    64,    64,    69,    69,    53,   270,
    56,    57,    53,   271,   272,   157,    64,   273,    69,    56,
    57,    53,    56,    57,    53,    33,    33,   274,    67,    67,
   276,    63,    63,    56,    57,    53,   277,    33,   140,   281,
    67,    33,    43,    63,    56,    57,    53,    56,    57,    53,
    33,   283,   nil,    33,   nil,   nil,   nil,   nil,    97,    98,
   101,   102,    99,   100,    33,   103,   104,   106,   107,   108,
   110,   105,   109,   nil,   nil,    33,   nil,   nil,    33,    97,
    98,   101,   102,    99,   100,   nil,   103,   104,   106,   107,
   108,   110,   105,   109,    97,    98,   101,   102,    99,   100,
   nil,   103,   104,   106,   107,   108,   110,   105,   109,    97,
    98,   101,   102,    99,   100,   nil,   103,   104,   106,   107,
   108,   110,   105,   109,    97,    98,   101,   102,    99,   100,
   nil,   103,   104,   106,   107,   108,   110,   105,   109,    97,
    98,   101,   102,    99,   100,   nil,   103,   104,   106,   107,
   108,   110,   105,   109,    97,    98,   101,   102,    99,   100,
   nil,   103,   104,   106,   107,   108,   110,   105,   109,    97,
    98,   101,   102,    99,   100,   nil,   103,   104,   106,   107,
   108,   110,   105,   109,    97,    98,   101,   102,    99,   100,
   nil,   103,   104,   106,   107,   108,   110,   105,   109 ]

racc_action_check = [
    27,   255,   255,   255,   255,   220,    71,    71,    71,    71,
    71,   206,   231,    71,    27,   274,   181,    78,    78,    78,
    78,   209,   209,    53,    71,    71,    27,   220,   142,    78,
     2,   231,   140,   255,    27,    27,   274,    78,    93,     9,
   206,    78,     9,    78,    78,    78,    78,    78,    78,     2,
    78,    78,    78,    78,    78,    78,    78,    78,    78,    71,
    27,    78,    78,    28,    78,    78,   137,    93,    78,    78,
    78,    78,    53,   139,   173,    78,    76,    76,    76,    76,
   228,    35,    45,   146,    35,   137,   221,   173,    76,   218,
   218,   112,    28,   257,   112,    28,    76,    32,   138,   228,
    76,    45,    76,    76,    76,    76,    76,    76,   221,    76,
    76,    76,    76,    76,    76,    76,    76,    76,    39,   218,
    76,    76,   257,    76,    76,   276,    32,    76,    76,    76,
    76,    34,    30,   135,    76,     4,     4,     4,     4,    36,
    30,   151,    30,   150,   175,   175,   175,     4,    38,   152,
    80,    80,    80,    80,   276,     4,    38,    38,   134,     4,
    34,    30,    80,   133,    30,   132,    44,    30,    44,    44,
    80,   158,   150,   131,    80,   175,     4,   161,    44,     4,
     4,    10,     4,     4,    10,   162,     4,     4,     4,     4,
    44,    80,   163,     4,    80,    80,     7,    80,    80,     7,
   164,    80,    80,    80,    80,   165,    15,    44,    80,    15,
    44,    44,   166,    44,    44,   116,   116,    44,    44,    44,
    44,    63,    94,   167,    44,   169,   169,   169,   169,    63,
    94,    63,    94,   168,    26,    26,    26,   169,    68,    68,
   235,   235,   235,   235,    26,   169,    26,    33,   170,   169,
    63,    94,   235,    63,    94,    29,    63,    94,   130,    24,
   235,   176,   129,   113,   235,    26,   169,   141,    26,   169,
   169,    26,   169,   169,   182,   184,   169,   169,   169,   169,
    23,   235,   187,   169,   235,   235,   188,   235,   235,   189,
   190,   235,   235,   235,   235,    64,    48,   191,   235,     0,
     0,     0,     0,    64,    48,    64,    48,    96,   171,   171,
   192,     0,   193,   197,   200,    96,   202,    96,   203,     0,
    22,    43,   210,     0,    64,    48,    21,    64,    48,    58,
    64,    48,    60,    47,    47,    47,    96,   222,   171,    96,
     0,   223,    96,     0,     0,   224,     0,     0,    95,   226,
     0,     0,     0,     0,   245,    31,    95,     0,    95,   245,
   245,   245,   245,    31,    47,    31,   258,   258,   258,   227,
    67,    91,   232,   233,    88,    87,   238,    95,    85,   240,
    95,   241,   242,    95,    31,   243,    85,    31,    85,    86,
    31,    92,    92,    92,    92,    92,    92,   258,    92,    92,
    92,    92,    92,    92,    92,    92,   148,    85,   247,   249,
    85,   250,   251,    85,   148,   252,   148,   253,   254,    81,
   111,   111,   111,   111,   111,   111,    92,   111,   111,   111,
   111,   111,   111,   111,   111,   148,    83,   149,   148,    84,
     6,   148,    72,   259,    83,   149,    83,   149,    82,   261,
    25,    25,    25,   262,   264,   111,    82,   265,    82,   160,
   160,   160,   185,   185,   185,    83,   149,   266,    83,   149,
   269,    83,   149,   234,   234,   234,   271,    82,    79,   275,
    82,    25,     1,    82,    70,    70,    70,   256,   256,   256,
   160,   278,   nil,   185,   nil,   nil,   nil,   nil,   144,   144,
   144,   144,   144,   144,   234,   144,   144,   144,   144,   144,
   144,   144,   144,   nil,   nil,    70,   nil,   nil,   256,   154,
   154,   154,   154,   154,   154,   nil,   154,   154,   154,   154,
   154,   154,   154,   154,   155,   155,   155,   155,   155,   155,
   nil,   155,   155,   155,   155,   155,   155,   155,   155,    59,
    59,    59,    59,    59,    59,   nil,    59,    59,    59,    59,
    59,    59,    59,    59,   156,   156,   156,   156,   156,   156,
   nil,   156,   156,   156,   156,   156,   156,   156,   156,   177,
   177,   177,   177,   177,   177,   nil,   177,   177,   177,   177,
   177,   177,   177,   177,   145,   145,   145,   145,   145,   145,
   nil,   145,   145,   145,   145,   145,   145,   145,   145,   178,
   178,   178,   178,   178,   178,   nil,   178,   178,   178,   178,
   178,   178,   178,   178,   147,   147,   147,   147,   147,   147,
   nil,   147,   147,   147,   147,   147,   147,   147,   147 ]

racc_action_pointer = [
   296,   482,    26,   nil,   132,   nil,   375,   152,   nil,    -5,
   137,   nil,   nil,   nil,   nil,   162,   nil,   nil,   nil,   nil,
   nil,   302,   258,   218,   232,   425,   209,    -2,    36,   252,
   105,   328,    70,   220,   104,    37,   123,   nil,   120,    53,
   nil,   nil,   nil,   321,   163,    78,   nil,   308,   269,   nil,
   nil,   nil,   nil,     7,   nil,   nil,   nil,   nil,   266,   520,
   269,   nil,   nil,   194,   268,   nil,   nil,   308,   213,   nil,
   459,    -1,   415,   nil,   nil,   nil,    73,   nil,    14,   429,
   147,   396,   421,   409,   416,   351,   361,   347,   309,   nil,
   nil,   308,   362,    11,   195,   321,   280,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   391,    51,   239,   nil,   nil,   152,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   196,
   192,   107,    99,    97,    92,    67,   nil,    62,    53,    28,
   -30,   221,   -30,   nil,   469,   565,    66,   595,   379,   410,
   116,   117,   133,   nil,   490,   505,   535,   nil,   108,   nil,
   434,   151,   159,   166,   174,   179,   186,   197,   187,   222,
   202,   282,   nil,    29,   nil,   119,   199,   550,   580,   nil,
   nil,   -48,   258,   nil,   252,   437,   nil,   215,   219,   222,
   223,   230,   243,   245,   nil,   nil,   nil,   296,   nil,   nil,
   268,   nil,   293,   295,   nil,   nil,   -16,   nil,   nil,   -31,
   258,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    63,   nil,
     0,    81,   273,   279,   283,   nil,   285,   307,    76,   nil,
   nil,     8,   356,   370,   448,   237,   nil,   nil,   360,   nil,
   356,   317,   319,   339,   nil,   341,   nil,   384,   nil,   347,
   349,   350,   353,   355,   354,   -23,   462,    66,   341,   440,
   nil,   385,   390,   nil,   390,   393,   404,   nil,   nil,   407,
   nil,   452,   nil,   nil,     9,   415,    98,   nil,   427,   nil,
   nil,   nil,   nil,   nil ]

racc_action_default = [
    -1,  -152,    -2,    -3,    -7,   -10,   -11,   -12,   -13,   -14,
   -15,   -16,   -17,   -18,   -19,   -20,   -21,   -22,   -23,   -24,
   -25,  -152,  -152,  -152,  -152,  -152,  -152,   -99,  -152,  -152,
  -128,  -128,  -152,  -152,  -152,  -152,  -152,   -89,  -152,  -152,
  -147,  -148,  -149,  -152,    -5,    -6,   -26,  -152,  -128,   -34,
   -35,   -81,   -82,   -94,   -97,  -129,  -130,  -131,  -152,   -37,
  -122,  -100,  -101,  -128,  -128,  -121,  -123,  -152,  -152,  -127,
   -41,  -152,  -152,   -44,   -45,   -46,    -8,  -122,    -8,  -152,
    -8,  -151,  -128,  -128,  -151,  -128,  -152,  -152,  -152,   284,
    -4,  -152,  -152,  -152,  -128,  -128,  -128,  -107,  -108,  -109,
  -110,  -111,  -112,  -113,  -114,  -115,  -116,  -117,  -118,  -119,
  -120,  -152,  -106,  -152,  -125,  -126,  -152,   -39,   -42,   -43,
   -90,  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -152,
  -152,  -152,  -152,  -152,  -152,  -152,   -95,    -9,   -70,   -70,
  -152,  -152,  -152,  -150,   -63,   -64,  -152,   -91,  -128,  -128,
  -152,  -152,   -29,   -36,  -103,  -104,  -105,  -102,  -152,   -38,
  -152,  -152,  -152,  -152,  -152,  -152,  -152,  -152,  -152,    -8,
  -152,  -152,   -52,   -60,   -54,  -152,  -152,   -92,   -93,   -96,
   -97,  -152,   -28,   -30,  -151,  -152,   -40,  -152,  -152,  -152,
  -152,  -152,  -152,  -152,   -47,   -69,   -48,  -152,   -50,   -51,
  -152,   -55,  -151,  -151,   -57,   -58,  -152,   -27,   -31,  -152,
  -152,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -152,   -53,
  -152,  -152,  -152,  -152,  -152,  -124,  -152,  -152,  -152,   -61,
   -62,  -152,  -152,  -152,  -152,    -8,   -59,   -56,   -71,   -72,
  -151,  -152,  -152,  -152,   -73,  -152,   -32,  -152,   -49,  -152,
  -152,  -152,  -152,  -152,  -152,  -152,  -152,  -152,  -152,  -152,
   -33,  -152,  -152,   -88,  -152,  -152,  -152,   -85,   -86,   -80,
   -74,  -152,   -75,   -76,  -152,  -152,  -152,   -87,  -152,   -83,
   -84,   -78,   -79,   -77 ]

racc_goto_table = [
    38,     6,    50,    58,    38,     6,   118,   127,    75,   142,
   197,    44,   146,   138,   117,   139,   198,   141,   229,   229,
   174,   239,   183,     1,    91,    52,    60,   244,    73,     2,
    74,    59,    79,    45,    81,    76,    78,   230,   230,   228,
   231,   168,   170,   116,    38,     6,   173,    52,   200,   182,
   203,   201,   208,    92,    44,   280,   238,   226,    90,   261,
   266,   278,   275,   198,   120,   121,   122,   123,   111,   112,
   119,   124,   279,   125,   126,   128,    38,     6,    38,     6,
    38,     6,   nil,   nil,   nil,   nil,   nil,   144,   145,   nil,
   147,   nil,   nil,   153,   nil,   nil,   118,   nil,   nil,   154,
   155,   156,   nil,   nil,   186,   nil,   195,   nil,   nil,   nil,
   nil,   204,   209,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   220,   221,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    44,   nil,   nil,   nil,
   179,   180,   nil,   177,   178,   nil,   nil,   nil,   nil,   nil,
   119,   nil,   210,   nil,   nil,   nil,   nil,   nil,   245,    38,
     6,   199,   243,   nil,   nil,   205,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    52,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   268,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   222,   nil,   nil,   nil,
   nil,   242,   241,   nil,   nil,   nil,   nil,   nil,   199,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   262,   264,    52,    38,     6,   236,   269,   nil,
   237,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    52,    52,   265,   267,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   282 ]

racc_goto_check = [
    28,     7,    22,    22,    28,     7,    31,    31,    27,    26,
    34,     4,    26,     5,    30,     5,    35,     5,    16,    16,
    38,    43,    25,     1,    22,    28,    28,    43,    28,     2,
    32,    23,    28,     2,    28,    23,    23,    10,    10,    40,
    40,    33,    33,    29,    28,     7,    36,    28,    37,    24,
    39,    38,    25,    23,     4,    11,    42,    34,     3,    44,
    45,    46,    47,    35,    48,    57,    58,    59,    23,    23,
    28,    60,    16,    61,    62,    63,    28,     7,    28,     7,
    28,     7,   nil,   nil,   nil,   nil,   nil,    23,    23,   nil,
    23,   nil,   nil,    28,   nil,   nil,    31,   nil,   nil,    23,
    23,    23,   nil,   nil,    30,   nil,     5,   nil,   nil,   nil,
   nil,    31,    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    26,    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,   nil,   nil,
    28,     7,   nil,    23,    23,   nil,   nil,   nil,   nil,   nil,
    28,   nil,    22,   nil,   nil,   nil,   nil,   nil,    26,    28,
     7,    28,     5,   nil,   nil,    28,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    28,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    31,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    28,   nil,   nil,   nil,
   nil,    22,    27,   nil,   nil,   nil,   nil,   nil,    28,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    22,    22,    28,    28,     7,     4,    27,   nil,
     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    28,    28,    28,    28,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    28 ]

racc_goto_pointer = [
   nil,    23,    29,    14,     9,   -63,   nil,     1,   nil,   nil,
  -183,  -219,   nil,   nil,   nil,   nil,  -202,   nil,   nil,   nil,
   nil,   nil,   -23,     5,  -103,  -130,   -72,   -21,     0,   -27,
   -56,   -64,     2,   -97,  -161,  -155,   -96,  -125,  -122,  -125,
  -181,   nil,  -176,  -211,  -196,  -198,  -213,  -207,    -7,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    -6,    -5,    -4,
     0,     2,     3,     4,   nil ]

racc_goto_default = [
   nil,   nil,   137,     3,     4,   nil,     5,    54,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,   nil,   nil,   nil,   nil,   nil,    37,    77,   nil,
   nil,    51,    66,   nil,   nil,    55,   nil,   nil,   nil,   nil,
   nil,    35,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,
    61,    62,    94,    95,    96,    65,    68,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    42 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 69, :_reduce_none,
  1, 69, :_reduce_2,
  1, 70, :_reduce_3,
  3, 70, :_reduce_4,
  2, 70, :_reduce_5,
  2, 70, :_reduce_6,
  1, 70, :_reduce_7,
  0, 73, :_reduce_none,
  1, 73, :_reduce_9,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  2, 89, :_reduce_26,
  6, 87, :_reduce_27,
  5, 87, :_reduce_28,
  0, 92, :_reduce_none,
  1, 92, :_reduce_30,
  2, 92, :_reduce_31,
  6, 93, :_reduce_32,
  8, 93, :_reduce_33,
  2, 95, :_reduce_34,
  2, 85, :_reduce_35,
  4, 86, :_reduce_36,
  2, 86, :_reduce_37,
  4, 84, :_reduce_38,
  1, 97, :_reduce_39,
  3, 97, :_reduce_40,
  0, 97, :_reduce_41,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  2, 79, :_reduce_44,
  2, 79, :_reduce_45,
  2, 78, :_reduce_46,
  5, 81, :_reduce_47,
  5, 81, :_reduce_48,
  10, 83, :_reduce_49,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  4, 75, :_reduce_52,
  6, 88, :_reduce_53,
  1, 104, :_reduce_54,
  2, 104, :_reduce_55,
  5, 106, :_reduce_56,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  4, 105, :_reduce_59,
  0, 105, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  3, 82, :_reduce_63,
  3, 82, :_reduce_64,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  2, 101, :_reduce_69,
  0, 101, :_reduce_70,
  8, 77, :_reduce_71,
  1, 110, :_reduce_72,
  2, 110, :_reduce_73,
  6, 111, :_reduce_74,
  6, 111, :_reduce_75,
  6, 111, :_reduce_76,
  8, 111, :_reduce_77,
  7, 111, :_reduce_78,
  2, 115, :_reduce_79,
  0, 115, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  3, 112, :_reduce_87,
  1, 112, :_reduce_88,
  1, 80, :_reduce_89,
  3, 74, :_reduce_90,
  3, 76, :_reduce_91,
  4, 76, :_reduce_92,
  4, 76, :_reduce_93,
  1, 96, :_reduce_94,
  3, 96, :_reduce_95,
  4, 96, :_reduce_96,
  1, 117, :_reduce_97,
  4, 117, :_reduce_98,
  1, 75, :_reduce_99,
  1, 91, :_reduce_100,
  1, 91, :_reduce_101,
  3, 91, :_reduce_102,
  3, 119, :_reduce_103,
  3, 119, :_reduce_104,
  3, 119, :_reduce_105,
  2, 119, :_reduce_106,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  6, 100, :_reduce_124,
  2, 123, :_reduce_125,
  2, 123, :_reduce_126,
  1, 124, :_reduce_none,
  0, 124, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_130,
  1, 103, :_reduce_131,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  4, 131, :_reduce_140,
  4, 130, :_reduce_141,
  4, 129, :_reduce_142,
  4, 125, :_reduce_143,
  4, 128, :_reduce_144,
  4, 126, :_reduce_145,
  4, 127, :_reduce_146,
  1, 132, :_reduce_147,
  1, 72, :_reduce_148,
  1, 72, :_reduce_149,
  1, 94, :_reduce_150,
  0, 94, :_reduce_none ]

racc_reduce_n = 152

racc_shift_n = 284

racc_token_table = {
  false => 0,
  :error => 1,
  :ASSIGN => 2,
  :AT_SYM => 3,
  :COMMENT => 4,
  :JUMP => 5,
  :IO_METHOD => 6,
  :INPUT => 7,
  :OUTPUT => 8,
  :NUMREG => 9,
  :POSREG => 10,
  :VREG => 11,
  :SREG => 12,
  :TIME_SEGMENT => 13,
  :ARG => 14,
  :MOVE => 15,
  :DOT => 16,
  :TO => 17,
  :AT => 18,
  :TERM => 19,
  :OFFSET => 20,
  :SKIP => 21,
  :SEMICOLON => 22,
  :NEWLINE => 23,
  :STRING => 24,
  :REAL => 25,
  :DIGIT => 26,
  :WORD => 27,
  :EQUAL => 28,
  :EEQUAL => 29,
  :NOTEQUAL => 30,
  :GTE => 31,
  :LTE => 32,
  :LT => 33,
  :GT => 34,
  :BANG => 35,
  :PLUS => 36,
  :MINUS => 37,
  :STAR => 38,
  :SLASH => 39,
  :DIV => 40,
  :AND => 41,
  :OR => 42,
  :MOD => 43,
  :IF => 44,
  :ELSE => 45,
  :END => 46,
  :UNLESS => 47,
  :FOR => 48,
  :IN => 49,
  :WAIT_FOR => 50,
  :WAIT_UNTIL => 51,
  :TIMEOUT => 52,
  :AFTER => 53,
  :FANUC_USE => 54,
  :FANUC_SET => 55,
  :NAMESPACE => 56,
  :CASE => 57,
  :WHEN => 58,
  :INDIRECT => 59,
  :POSITION => 60,
  :EVAL => 61,
  "(" => 62,
  "," => 63,
  ")" => 64,
  ":" => 65,
  "[" => 66,
  "]" => 67 }

racc_nt_base = 68

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ASSIGN",
  "AT_SYM",
  "COMMENT",
  "JUMP",
  "IO_METHOD",
  "INPUT",
  "OUTPUT",
  "NUMREG",
  "POSREG",
  "VREG",
  "SREG",
  "TIME_SEGMENT",
  "ARG",
  "MOVE",
  "DOT",
  "TO",
  "AT",
  "TERM",
  "OFFSET",
  "SKIP",
  "SEMICOLON",
  "NEWLINE",
  "STRING",
  "REAL",
  "DIGIT",
  "WORD",
  "EQUAL",
  "EEQUAL",
  "NOTEQUAL",
  "GTE",
  "LTE",
  "LT",
  "GT",
  "BANG",
  "PLUS",
  "MINUS",
  "STAR",
  "SLASH",
  "DIV",
  "AND",
  "OR",
  "MOD",
  "IF",
  "ELSE",
  "END",
  "UNLESS",
  "FOR",
  "IN",
  "WAIT_FOR",
  "WAIT_UNTIL",
  "TIMEOUT",
  "AFTER",
  "FANUC_USE",
  "FANUC_SET",
  "NAMESPACE",
  "CASE",
  "WHEN",
  "INDIRECT",
  "POSITION",
  "EVAL",
  "\"(\"",
  "\",\"",
  "\")\"",
  "\":\"",
  "\"[\"",
  "\"]\"",
  "$start",
  "program",
  "statements",
  "statement",
  "terminator",
  "block",
  "definition",
  "namespace",
  "assignment",
  "motion_statement",
  "jump",
  "io_method",
  "label_definition",
  "conditional",
  "inline_conditional",
  "forloop",
  "program_call",
  "use_statement",
  "set_statement",
  "wait_statement",
  "case_statement",
  "fanuc_eval",
  "indirectable",
  "expression",
  "wait_modifiers",
  "wait_modifier",
  "swallow_newlines",
  "label",
  "var",
  "args",
  "arg",
  "number",
  "indirect_thing",
  "else_block",
  "minmax_val",
  "integer",
  "case_conditions",
  "case_else",
  "case_condition",
  "case_allowed_condition",
  "case_allowed_statement",
  "inlineable",
  "motion_modifiers",
  "motion_modifier",
  "speed",
  "time",
  "time_seg_actions",
  "optional_lpos_arg",
  "definable",
  "namespaces",
  "factor",
  "operator",
  "relop",
  "addop",
  "mulop",
  "signed_number",
  "sign",
  "numreg",
  "output",
  "input",
  "posreg",
  "position",
  "vreg",
  "argument",
  "comment" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
 @interpreter.nodes = val[0].flatten 
    result
end

def _reduce_3(val, _values, result)
 result = val 
    result
end

def _reduce_4(val, _values, result)
 result = val[0] << val[1] << val[2] 
    result
end

def _reduce_5(val, _values, result)
 result = val[0] << val[1] 
    result
end

def _reduce_6(val, _values, result)
 result = [val[0]] << val[1] 
    result
end

def _reduce_7(val, _values, result)
 result = [val[0]] 
    result
end

# reduce 8 omitted

def _reduce_9(val, _values, result)
 result = val[0] 
    result
end

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

def _reduce_26(val, _values, result)
 result = EvalNode.new(val[1]) 
    result
end

def _reduce_27(val, _values, result)
 result = WaitForNode.new(val[2], val[4]) 
    result
end

def _reduce_28(val, _values, result)
 result = WaitUntilNode.new(val[2],val[4]) 
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
 result = val[0] 
    result
end

def _reduce_31(val, _values, result)
 result = val[0].merge(val[1]) 
    result
end

def _reduce_32(val, _values, result)
 result = { label: val[4] } 
    result
end

def _reduce_33(val, _values, result)
 result = { timeout: [val[4],val[6]] } 
    result
end

def _reduce_34(val, _values, result)
 result = val[1] 
    result
end

def _reduce_35(val, _values, result)
 result = UseNode.new(val[0],val[1]) 
    result
end

def _reduce_36(val, _values, result)
 result = SetNode.new(val[0],val[1],val[3]) 
    result
end

def _reduce_37(val, _values, result)
 result = SetNode.new(val[0],nil,val[1]) 
    result
end

def _reduce_38(val, _values, result)
 result = CallNode.new(val[0],val[2]) 
    result
end

def _reduce_39(val, _values, result)
 result = [val[0]] 
    result
end

def _reduce_40(val, _values, result)
 result = val[0] << val[2] 
    result
end

def _reduce_41(val, _values, result)
 result = [] 
    result
end

# reduce 42 omitted

# reduce 43 omitted

def _reduce_44(val, _values, result)
 result = IOMethodNode.new(val[0],val[1]) 
    result
end

def _reduce_45(val, _values, result)
 result = IOMethodNode.new(val[0],val[1]) 
    result
end

def _reduce_46(val, _values, result)
 result = JumpNode.new(val[1]) 
    result
end

def _reduce_47(val, _values, result)
 result = ConditionalNode.new("if",val[1],val[2],val[3]) 
    result
end

def _reduce_48(val, _values, result)
 result = ConditionalNode.new("unless",val[1],val[2],val[3]) 
    result
end

def _reduce_49(val, _values, result)
 result = ForNode.new(val[1],val[4],val[6],val[8]) 
    result
end

# reduce 50 omitted

# reduce 51 omitted

def _reduce_52(val, _values, result)
 result = NamespaceNode.new(val[1],val[2]) 
    result
end

def _reduce_53(val, _values, result)
 result = CaseNode.new(val[1],val[3],val[4]) 
    result
end

def _reduce_54(val, _values, result)
 result = val 
    result
end

def _reduce_55(val, _values, result)
 result = val[0] << val[1] << val[2] 
    result
end

def _reduce_56(val, _values, result)
 result = CaseConditionNode.new(val[1],val[3]) 
    result
end

# reduce 57 omitted

# reduce 58 omitted

def _reduce_59(val, _values, result)
 result = CaseConditionNode.new(nil,val[2]) 
    result
end

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

def _reduce_63(val, _values, result)
 result = InlineConditionalNode.new("if",val[2],val[0]) 
    result
end

def _reduce_64(val, _values, result)
 result = InlineConditionalNode.new("unless",val[2],val[0]) 
    result
end

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

def _reduce_69(val, _values, result)
 result = val[1] 
    result
end

def _reduce_70(val, _values, result)
 result = [] 
    result
end

def _reduce_71(val, _values, result)
 result = MotionNode.new(val[0],val[5],val[7]) 
    result
end

def _reduce_72(val, _values, result)
 result = val 
    result
end

def _reduce_73(val, _values, result)
 result = val[0] << val[1] 
    result
end

def _reduce_74(val, _values, result)
 result = SpeedNode.new(val[4]) 
    result
end

def _reduce_75(val, _values, result)
 result = TerminationNode.new(val[4]) 
    result
end

def _reduce_76(val, _values, result)
 result = OffsetNode.new(val[4]) 
    result
end

def _reduce_77(val, _values, result)
 result = TimeNode.new(val[2],val[4],val[6]) 
    result
end

def _reduce_78(val, _values, result)
 result = SkipNode.new(val[4],val[5]) 
    result
end

def _reduce_79(val, _values, result)
 result = val[1] 
    result
end

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

def _reduce_87(val, _values, result)
 result = { speed: val[0], units: val[2] } 
    result
end

def _reduce_88(val, _values, result)
 result = { speed: val[0], units: nil } 
    result
end

def _reduce_89(val, _values, result)
 result = LabelDefinitionNode.new(val[0]) 
    result
end

def _reduce_90(val, _values, result)
 result = DefinitionNode.new(val[0],val[2]) 
    result
end

def _reduce_91(val, _values, result)
 result = AssignmentNode.new(val[0],val[2]) 
    result
end

def _reduce_92(val, _values, result)
 result = AssignmentNode.new(
                                           val[0],
                                           ExpressionNode.new(val[0],val[1],val[3])
                                         )
                                       
    result
end

def _reduce_93(val, _values, result)
 result = AssignmentNode.new(
                                           val[0],
                                           ExpressionNode.new(val[0],val[1],val[3])
                                         )
                                       
    result
end

def _reduce_94(val, _values, result)
 result = VarNode.new(val[0]) 
    result
end

def _reduce_95(val, _values, result)
 result = VarMethodNode.new(val[0],val[2]) 
    result
end

def _reduce_96(val, _values, result)
 result = NamespacedVarNode.new(val[0],val[3]) 
    result
end

def _reduce_97(val, _values, result)
 result = val 
    result
end

def _reduce_98(val, _values, result)
 result = val[0] << val[3] 
    result
end

def _reduce_99(val, _values, result)
 result = val[0] 
    result
end

def _reduce_100(val, _values, result)
 result = val[0] 
    result
end

def _reduce_101(val, _values, result)
 result = val[0] 
    result
end

def _reduce_102(val, _values, result)
 val[1].grouped = true; result = val[1] 
    result
end

def _reduce_103(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

def _reduce_104(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

def _reduce_105(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

def _reduce_106(val, _values, result)
 result = ExpressionNode.new(val[1],val[0],nil) 
    result
end

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

def _reduce_124(val, _values, result)
 result = IndirectNode.new(val[2].to_sym, val[4]) 
    result
end

def _reduce_125(val, _values, result)
 val[1] = val[1].to_i * -1 if val[0] == "-"; result = DigitNode.new(val[1]) 
    result
end

def _reduce_126(val, _values, result)
 val[1] = val[1].to_f * -1 if val[0] == "-"; result = RealNode.new(val[1]) 
    result
end

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

def _reduce_130(val, _values, result)
 result = RealNode.new(val[0]) 
    result
end

def _reduce_131(val, _values, result)
 result = DigitNode.new(val[0]) 
    result
end

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

def _reduce_140(val, _values, result)
 result = ArgumentNode.new(val[2].to_i) 
    result
end

def _reduce_141(val, _values, result)
 result = VisionRegisterNode.new(val[2].to_i) 
    result
end

def _reduce_142(val, _values, result)
 result = PositionNode.new(val[2].to_i) 
    result
end

def _reduce_143(val, _values, result)
 result = NumregNode.new(val[2].to_i) 
    result
end

def _reduce_144(val, _values, result)
 result = PosregNode.new(val[2].to_i) 
    result
end

def _reduce_145(val, _values, result)
 result = IONode.new(val[0], val[2].to_i) 
    result
end

def _reduce_146(val, _values, result)
 result = IONode.new(val[0], val[2].to_i) 
    result
end

def _reduce_147(val, _values, result)
 result = CommentNode.new(val[0]) 
    result
end

def _reduce_148(val, _values, result)
 result = TerminatorNode.new 
    result
end

def _reduce_149(val, _values, result)
 result = val[0] 
    result
end

def _reduce_150(val, _values, result)
 result = TerminatorNode.new 
    result
end

# reduce 151 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module TPPlus
