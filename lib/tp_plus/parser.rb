#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.10
# from Racc grammer file "".
#

require 'racc/parser.rb'
module TPPlus
  class Parser < Racc::Parser


  include TPPlus::Nodes

  attr_reader :interpreter
  def initialize(scanner, interpreter = TPPlus::Interpreter.new)
    @scanner       = scanner
    @interpreter   = interpreter
    super()
  end

  def next_token
    t = @scanner.next_token
    @interpreter.line_count += 1 if t && t[0] == :NEWLINE

    #puts t.inspect
    t
  end

  def parse
    do_parse
    @interpreter
  rescue Racc::ParseError => e
    raise "Parse error on line #{@interpreter.line_count+1}: #{e}"
  end
##### State transition tables begin ###

racc_action_table = [
    58,    30,    32,    24,    23,    40,    39,    42,    32,    42,
    40,    39,    42,   145,    29,    59,    30,    32,    24,    23,
   149,    46,    33,    50,    32,    22,   143,    42,    33,    29,
    42,   207,    30,    32,    24,    23,    46,    33,    50,    46,
    22,    50,    45,    25,    33,    29,    26,    18,    19,    24,
    20,    21,    27,    33,    24,    57,    22,    45,    25,    42,
    45,    26,    18,    19,    42,    20,    21,    27,    46,    23,
    50,   182,    32,    46,    25,    50,   182,    26,    18,    19,
    32,    20,    21,    27,    30,    32,    24,    23,   217,    45,
   182,   217,    33,   166,    45,   142,   -50,    29,    42,   -50,
    33,   -52,   149,   218,   -52,    33,   218,    46,    22,    50,
   150,    78,    79,    82,    83,    80,    81,   141,    84,    85,
    87,    88,    89,    91,    86,    90,    25,   140,    45,    26,
    18,    19,    42,    20,    21,    27,    30,    32,    24,    23,
   139,    46,    42,    50,    65,    42,   136,    66,   135,    29,
   138,    46,   137,    50,    46,    69,    50,    33,   -51,    42,
    22,   -51,    45,    89,    70,    71,    90,    30,    32,    24,
    23,   -53,    45,   129,   -53,    45,    95,    94,    25,   154,
    29,    26,    18,    19,   155,    20,    21,    27,    33,    40,
    39,    22,   156,   157,    78,    79,    82,    83,    80,    81,
   158,    84,    85,    87,    88,    89,    91,    86,    90,    25,
    42,    42,    26,    18,    19,    42,    20,    21,    27,    46,
    46,    50,    50,    42,    46,   159,    50,    42,    40,    39,
    42,   160,    46,   161,    50,   128,    46,   163,    50,   123,
    45,    45,   198,   123,   170,    45,   118,   195,   196,   197,
   199,   117,   171,    45,    40,    39,    42,    45,    78,    79,
    82,    83,    80,    81,   172,    84,    85,    87,    88,    89,
    91,    86,    90,   116,   115,   113,   114,   111,   173,   112,
   174,   110,    40,    39,    42,   175,   133,    40,    39,    42,
   176,    40,    39,    78,    79,    82,    83,    80,    81,   177,
    84,    85,    87,    88,    89,    91,    86,    90,    78,    79,
    82,    83,    80,    81,   178,    84,    85,    87,    88,    89,
    91,    86,    90,    78,    79,    82,    83,    80,    81,   123,
    84,    85,    87,    88,    89,    91,    86,    90,    78,    79,
    82,    83,    80,    81,   123,    84,    85,    87,    88,    89,
    91,    86,    90,    78,    79,    82,    83,    80,    81,   145,
    84,    85,    87,    88,    89,    91,    86,    90,    78,    79,
    82,    83,    80,    81,   -67,    84,    85,    87,    88,    89,
    91,    86,    90,    78,    79,    82,    83,    80,    81,    96,
    84,    85,    87,    88,    89,    91,    86,    90,    78,    79,
    82,    83,    80,    81,   187,    84,    85,    87,    88,    89,
    91,    86,    90,    78,    79,    82,    83,    80,    81,    57,
    84,    85,    87,    88,    89,    91,    86,    90,    78,    79,
    82,    83,    80,    81,    59,    84,    85,    87,    88,    89,
    91,    86,    90,    40,    39,    42,    40,    39,    42,    74,
   192,   192,   123,    72,   200,   201,   202,   203,   204,    68,
    67,    42,    42,   214,   215,    61,   219,   220,   221,   222,
   223,    42,    35,   229,   230,   231,    42 ]

racc_action_check = [
    22,     0,     0,     0,     0,   200,   200,   200,   183,   170,
    21,    21,    21,   121,     0,    22,    36,   186,    36,    36,
   122,    21,     0,    21,    37,     0,   116,    66,   183,    36,
    19,   200,     4,     4,     4,     4,    66,   186,    66,    19,
    36,    19,    21,     0,    37,     4,     0,     0,     0,   179,
     0,     0,     0,     4,   180,    22,     4,    66,    36,    69,
    19,    36,    36,    36,    76,    36,    36,    36,    69,   222,
    69,   179,     2,    76,     4,    76,   180,     4,     4,     4,
   119,     4,     4,     4,    62,    62,    62,    62,   206,    69,
   222,   219,     2,   147,    76,   115,     8,    62,   128,     8,
   119,     9,   147,   206,     9,    62,   219,   128,    62,   128,
   126,    62,    62,    62,    62,    62,    62,   114,    62,    62,
    62,    62,    62,    62,    62,    62,    62,   113,   128,    62,
    62,    62,    75,    62,    62,    62,   145,   145,   145,   145,
   112,    75,    65,    75,    28,    25,    97,    28,    97,   145,
   111,    65,   110,    65,    25,    31,    25,   145,     6,    96,
   145,     6,    75,    93,    31,    31,    93,    63,    63,    63,
    63,    13,    65,    71,    13,    25,    49,    49,   145,   137,
    63,   145,   145,   145,   138,   145,   145,   145,    63,    18,
    18,    63,   139,   140,    63,    63,    63,    63,    63,    63,
   141,    63,    63,    63,    63,    63,    63,    63,    63,    63,
    45,    77,    63,    63,    63,   129,    63,    63,    63,    45,
    77,    45,    77,    46,   129,   142,   129,    26,   201,   201,
   201,   143,    46,   144,    46,    70,    26,   146,    26,    67,
    45,    77,   194,    64,   150,   129,    61,   194,   194,   194,
   194,    59,   154,    46,   149,   149,   149,    26,    92,    92,
    92,    92,    92,    92,   155,    92,    92,    92,    92,    92,
    92,    92,    92,    58,    58,    58,    58,    58,   156,    58,
   157,    58,    20,    20,    20,   158,    92,   203,   203,   203,
   159,    58,    58,   151,   151,   151,   151,   151,   151,   160,
   151,   151,   151,   151,   151,   151,   151,   151,   124,   124,
   124,   124,   124,   124,   164,   124,   124,   124,   124,   124,
   124,   124,   124,   152,   152,   152,   152,   152,   152,   166,
   152,   152,   152,   152,   152,   152,   152,   152,   125,   125,
   125,   125,   125,   125,   167,   125,   125,   125,   125,   125,
   125,   125,   125,   131,   131,   131,   131,   131,   131,   120,
   131,   131,   131,   131,   131,   131,   131,   131,    41,    41,
    41,    41,    41,    41,    56,    41,    41,    41,    41,    41,
    41,    41,    41,   130,   130,   130,   130,   130,   130,    54,
   130,   130,   130,   130,   130,   130,   130,   130,    55,    55,
    55,    55,    55,    55,   181,    55,    55,    55,    55,    55,
    55,    55,    55,   132,   132,   132,   132,   132,   132,   182,
   132,   132,   132,   132,   132,   132,   132,   132,   127,   127,
   127,   127,   127,   127,    42,   127,   127,   127,   127,   127,
   127,   127,   127,   136,   136,   136,    57,    57,    57,    38,
   187,   190,   192,    35,   195,   196,   197,   198,   199,    30,
    29,   202,    27,   204,   205,    24,   208,   209,   210,   211,
   214,    23,     1,   223,   225,   228,   229 ]

racc_action_pointer = [
    -2,   472,    68,   nil,    29,   nil,   113,   nil,    51,    56,
   nil,   nil,   nil,   126,   nil,   nil,   nil,   nil,   164,     3,
   257,   -15,    -2,   444,   462,   118,   200,   435,    99,   443,
   432,   127,   nil,   nil,   nil,   453,    13,    20,   422,   nil,
   nil,   338,   417,   nil,   nil,   183,   196,   nil,   nil,   151,
   nil,   nil,   nil,   nil,   333,   368,   318,   421,   266,   224,
   nil,   219,    81,   164,   219,   115,     0,   215,   nil,    32,
   207,   145,   nil,   nil,   nil,   105,    37,   184,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   228,   122,   nil,   nil,   132,    90,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    93,    91,    81,    68,    58,    36,   -33,   nil,   nil,    76,
   313,   -33,   -35,   nil,   278,   308,    92,   398,    71,   188,
   353,   323,   383,   nil,   nil,   nil,   418,   153,   158,   166,
   167,   174,   199,   205,   186,   133,   190,    47,   nil,   229,
   187,   263,   293,   nil,   192,   204,   218,   220,   225,   230,
   239,   nil,   nil,   nil,   267,   nil,   305,   320,   nil,   nil,
   -18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    44,
    49,   346,   362,     4,   nil,   nil,    13,   433,   nil,   nil,
   434,   nil,   428,   nil,   228,   397,   398,   399,   400,   401,
   -20,   203,   434,   262,   460,   406,    59,   nil,   410,   409,
   410,   413,   nil,   nil,   443,   nil,   nil,   nil,   nil,    62,
   nil,   nil,    63,   417,   nil,   416,   nil,   nil,   417,   449,
   nil,   nil,   nil ]

racc_action_default = [
    -1,  -133,    -2,    -3,    -7,   -10,   -11,   -12,   -13,   -14,
   -15,   -16,   -17,   -18,   -19,   -20,   -21,   -22,  -133,  -110,
  -133,  -133,   -83,  -133,  -133,  -110,  -110,  -133,  -133,  -133,
  -133,  -133,  -128,  -129,  -130,  -133,    -5,    -6,  -133,  -111,
  -112,   -24,   -83,   -84,   -85,  -110,  -110,  -105,  -106,  -133,
  -109,   -25,   -66,   -67,  -133,   -27,  -106,   -31,  -133,  -133,
   -34,  -133,    -8,    -8,  -132,  -110,  -110,  -132,   -77,  -110,
  -133,  -133,   233,    -4,   -23,  -110,  -110,  -110,   -91,   -92,
   -93,   -94,   -95,   -96,   -97,   -98,   -99,  -100,  -101,  -102,
  -103,  -104,  -133,   -90,  -107,  -108,  -133,  -133,   -29,   -32,
   -33,   -78,  -113,  -114,  -115,  -116,  -117,  -118,  -119,  -120,
  -133,  -133,  -133,  -133,  -133,  -133,  -133,   -82,   -35,    -9,
   -55,   -55,  -133,  -131,   -48,   -49,  -133,   -79,  -110,  -110,
   -87,   -88,   -89,   -86,   -26,   -28,  -133,  -133,  -133,  -133,
  -133,  -133,  -133,  -133,  -133,    -8,  -133,   -45,   -39,  -133,
  -133,   -80,   -81,   -30,  -133,  -133,  -133,  -133,  -133,  -133,
  -133,   -36,   -54,   -37,  -133,   -40,  -132,  -132,   -42,   -43,
  -133,  -121,  -122,  -123,  -124,  -125,  -126,  -127,   -38,  -133,
  -133,  -133,  -133,  -133,   -46,   -47,  -133,  -133,   -44,   -41,
   -56,   -57,  -132,   -58,  -133,  -133,  -133,  -133,  -133,  -133,
  -133,  -133,  -133,  -133,  -133,  -133,  -133,   -73,  -133,  -133,
  -133,  -133,   -70,   -71,  -133,   -59,   -72,   -75,   -76,  -133,
   -60,   -61,  -133,   -65,   -74,  -133,   -68,   -69,  -133,  -133,
   -62,   -63,   -64 ]

racc_goto_table = [
    31,    38,   122,    36,    31,   126,    98,    51,    54,   120,
   121,   184,   184,     2,   148,   216,   191,    37,     1,   193,
    53,    56,   164,    60,    41,   147,    55,    64,   224,   167,
    62,    63,   183,   186,   144,   146,    31,    97,    36,   165,
    99,   108,   185,   185,   190,   227,   205,   211,   225,   228,
    92,    93,    73,   101,   226,   102,   103,   100,   104,   105,
   106,   107,    31,    31,   109,   nil,   nil,   nil,   nil,   nil,
   124,   125,   nil,   nil,   127,   nil,   nil,   nil,   nil,   nil,
   130,   131,   132,   nil,   nil,   153,   nil,   nil,   nil,   nil,
   nil,   nil,   162,   nil,   nil,   nil,   134,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   179,   180,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    99,
    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   194,   nil,   168,   151,   152,   nil,   100,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    31,   nil,   nil,   nil,   169,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   181,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   206,   188,   nil,   213,   189,   209,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   208,    53,   210,   212,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   232 ]

racc_goto_check = [
    22,    19,    26,     4,    22,    26,    24,    21,    21,     5,
     5,    14,    14,     2,    29,    39,    34,     2,     1,    34,
    22,    22,    28,    22,    20,    27,    20,    22,    39,    30,
    20,    20,    31,    31,    25,    25,    22,    23,     4,    29,
    19,    19,     9,     9,    33,    10,    35,    36,    37,    38,
    20,    20,     3,    40,    14,    48,    49,    22,    50,    51,
    52,    53,    22,    22,    54,   nil,   nil,   nil,   nil,   nil,
    20,    20,   nil,   nil,    20,   nil,   nil,   nil,   nil,   nil,
    20,    20,    20,   nil,   nil,    24,   nil,   nil,   nil,   nil,
   nil,   nil,     5,   nil,   nil,   nil,    22,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    26,    26,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,
     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    26,   nil,    19,    20,    20,   nil,    22,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,    22,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    19,     4,   nil,    19,     4,    21,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    22,    22,    22,    22,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22 ]

racc_goto_pointer = [
   nil,    18,    13,    16,     1,   -53,   nil,   nil,   nil,  -137,
  -177,   nil,   nil,   nil,  -168,   nil,   nil,   nil,   nil,   -17,
     5,   -13,     0,   -20,   -51,   -86,   -62,   -97,  -125,  -108,
  -120,  -147,   nil,  -143,  -171,  -154,  -156,  -174,  -174,  -191,
    -5,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    -3,    -2,
     0,     1,     2,     3,     6,   nil ]

racc_goto_default = [
   nil,   nil,   119,     3,     4,   nil,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    52,
   nil,   nil,    48,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    28,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    43,    44,    75,    76,    77,    47,    49,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    34 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 62, :_reduce_none,
  1, 62, :_reduce_2,
  1, 63, :_reduce_3,
  3, 63, :_reduce_4,
  2, 63, :_reduce_5,
  2, 63, :_reduce_6,
  1, 63, :_reduce_7,
  0, 66, :_reduce_none,
  1, 66, :_reduce_9,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  3, 78, :_reduce_23,
  2, 78, :_reduce_24,
  2, 76, :_reduce_25,
  4, 77, :_reduce_26,
  2, 77, :_reduce_27,
  4, 75, :_reduce_28,
  1, 84, :_reduce_29,
  3, 84, :_reduce_30,
  0, 84, :_reduce_31,
  1, 85, :_reduce_none,
  1, 85, :_reduce_none,
  2, 71, :_reduce_34,
  3, 70, :_reduce_35,
  5, 73, :_reduce_36,
  5, 73, :_reduce_37,
  6, 79, :_reduce_38,
  1, 88, :_reduce_39,
  2, 88, :_reduce_40,
  5, 90, :_reduce_41,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  4, 89, :_reduce_44,
  0, 89, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  3, 74, :_reduce_48,
  3, 74, :_reduce_49,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  2, 86, :_reduce_54,
  0, 86, :_reduce_none,
  8, 69, :_reduce_56,
  1, 94, :_reduce_57,
  2, 94, :_reduce_58,
  6, 95, :_reduce_59,
  6, 95, :_reduce_60,
  6, 95, :_reduce_61,
  8, 95, :_reduce_62,
  8, 95, :_reduce_63,
  2, 99, :_reduce_64,
  0, 99, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  2, 96, :_reduce_72,
  1, 96, :_reduce_73,
  3, 96, :_reduce_74,
  1, 100, :_reduce_75,
  1, 100, :_reduce_76,
  2, 72, :_reduce_77,
  3, 67, :_reduce_78,
  3, 68, :_reduce_79,
  4, 68, :_reduce_80,
  4, 68, :_reduce_81,
  3, 83, :_reduce_82,
  1, 83, :_reduce_83,
  1, 81, :_reduce_84,
  1, 81, :_reduce_85,
  3, 81, :_reduce_86,
  3, 103, :_reduce_87,
  3, 103, :_reduce_88,
  3, 103, :_reduce_89,
  2, 103, :_reduce_90,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  2, 107, :_reduce_107,
  2, 107, :_reduce_108,
  1, 108, :_reduce_none,
  0, 108, :_reduce_none,
  1, 80, :_reduce_111,
  1, 80, :_reduce_112,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  4, 115, :_reduce_121,
  4, 114, :_reduce_122,
  4, 113, :_reduce_123,
  4, 109, :_reduce_124,
  4, 112, :_reduce_125,
  4, 110, :_reduce_126,
  4, 111, :_reduce_127,
  1, 116, :_reduce_128,
  1, 65, :_reduce_129,
  1, 65, :_reduce_130,
  1, 87, :_reduce_131,
  0, 87, :_reduce_none ]

racc_reduce_n = 133

racc_shift_n = 233

racc_token_table = {
  false => 0,
  :error => 1,
  :ASSIGN => 2,
  :AT_SYM => 3,
  :COMMENT => 4,
  :JUMP => 5,
  :IO_METHOD => 6,
  :INPUT => 7,
  :OUTPUT => 8,
  :NUMREG => 9,
  :POSREG => 10,
  :VREG => 11,
  :SREG => 12,
  :POSITION => 13,
  :TIME_SEGMENT => 14,
  :ARG => 15,
  :MOVE => 16,
  :DOT => 17,
  :TO => 18,
  :AT => 19,
  :TERM => 20,
  :OFFSET => 21,
  :SKIP => 22,
  :SEMICOLON => 23,
  :NEWLINE => 24,
  :REAL => 25,
  :DIGIT => 26,
  :WORD => 27,
  :EQUAL => 28,
  :UNITS => 29,
  :EEQUAL => 30,
  :NOTEQUAL => 31,
  :GTE => 32,
  :LTE => 33,
  :LT => 34,
  :GT => 35,
  :BANG => 36,
  :PLUS => 37,
  :MINUS => 38,
  :STAR => 39,
  :SLASH => 40,
  :DIV => 41,
  :AND => 42,
  :OR => 43,
  :MOD => 44,
  :IF => 45,
  :ELSE => 46,
  :END => 47,
  :UNLESS => 48,
  :WAIT_FOR => 49,
  :WAIT_UNTIL => 50,
  :MAX_SPEED => 51,
  :FANUC_USE => 52,
  :FANUC_SET => 53,
  :CASE => 54,
  :WHEN => 55,
  "," => 56,
  "(" => 57,
  ")" => 58,
  "[" => 59,
  "]" => 60 }

racc_nt_base = 61

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ASSIGN",
  "AT_SYM",
  "COMMENT",
  "JUMP",
  "IO_METHOD",
  "INPUT",
  "OUTPUT",
  "NUMREG",
  "POSREG",
  "VREG",
  "SREG",
  "POSITION",
  "TIME_SEGMENT",
  "ARG",
  "MOVE",
  "DOT",
  "TO",
  "AT",
  "TERM",
  "OFFSET",
  "SKIP",
  "SEMICOLON",
  "NEWLINE",
  "REAL",
  "DIGIT",
  "WORD",
  "EQUAL",
  "UNITS",
  "EEQUAL",
  "NOTEQUAL",
  "GTE",
  "LTE",
  "LT",
  "GT",
  "BANG",
  "PLUS",
  "MINUS",
  "STAR",
  "SLASH",
  "DIV",
  "AND",
  "OR",
  "MOD",
  "IF",
  "ELSE",
  "END",
  "UNLESS",
  "WAIT_FOR",
  "WAIT_UNTIL",
  "MAX_SPEED",
  "FANUC_USE",
  "FANUC_SET",
  "CASE",
  "WHEN",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\"[\"",
  "\"]\"",
  "$start",
  "program",
  "statements",
  "statement",
  "terminator",
  "block",
  "definition",
  "assignment",
  "motion_statement",
  "jump",
  "io_method",
  "label_definition",
  "conditional",
  "inline_conditional",
  "program_call",
  "use_statement",
  "set_statement",
  "wait_statement",
  "case_statement",
  "number",
  "expression",
  "indirectable",
  "var",
  "args",
  "arg",
  "else_block",
  "swallow_newlines",
  "case_conditions",
  "case_else",
  "case_condition",
  "case_allowed_condition",
  "case_allowed_statement",
  "inlineable",
  "motion_modifiers",
  "motion_modifier",
  "speed",
  "time",
  "time_seg_actions",
  "optional_lpos_arg",
  "units",
  "definable",
  "factor",
  "operator",
  "relop",
  "addop",
  "mulop",
  "signed_number",
  "sign",
  "numreg",
  "output",
  "input",
  "posreg",
  "position",
  "vreg",
  "argument",
  "comment" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
 @interpreter.nodes = val[0].flatten 
    result
end

def _reduce_3(val, _values, result)
 result = val 
    result
end

def _reduce_4(val, _values, result)
 result = val[0] << val[1] << val[2] 
    result
end

def _reduce_5(val, _values, result)
 result = val[0] << val[1] 
    result
end

def _reduce_6(val, _values, result)
 result = [val[0]] << val[1] 
    result
end

def _reduce_7(val, _values, result)
 result = [val[0]] 
    result
end

# reduce 8 omitted

def _reduce_9(val, _values, result)
 result = val[0] 
    result
end

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

def _reduce_23(val, _values, result)
 result = WaitForNode.new(val[1], val[2]) 
    result
end

def _reduce_24(val, _values, result)
 result = WaitUntilNode.new(val[1]) 
    result
end

def _reduce_25(val, _values, result)
 result = UseNode.new(val[0],val[1]) 
    result
end

def _reduce_26(val, _values, result)
 result = SetNode.new(val[0],val[1],val[3]) 
    result
end

def _reduce_27(val, _values, result)
 result = SetNode.new(val[0],nil,val[1]) 
    result
end

def _reduce_28(val, _values, result)
 result = CallNode.new(val[0],val[2]) 
    result
end

def _reduce_29(val, _values, result)
 result = [val[0]] 
    result
end

def _reduce_30(val, _values, result)
 result = val[0] << val[2] 
    result
end

def _reduce_31(val, _values, result)
 result = [] 
    result
end

# reduce 32 omitted

# reduce 33 omitted

def _reduce_34(val, _values, result)
 result = IOMethodNode.new(val[0],val[1]) 
    result
end

def _reduce_35(val, _values, result)
 result = JumpNode.new(val[2]) 
    result
end

def _reduce_36(val, _values, result)
 result = ConditionalNode.new("if",val[1],val[2],val[3]) 
    result
end

def _reduce_37(val, _values, result)
 result = ConditionalNode.new("unless",val[1],val[2],val[3]) 
    result
end

def _reduce_38(val, _values, result)
 result = CaseNode.new(val[1],val[3],val[4]) 
    result
end

def _reduce_39(val, _values, result)
 result = val 
    result
end

def _reduce_40(val, _values, result)
 result = val[0] << val[1] << val[2] 
    result
end

def _reduce_41(val, _values, result)
 result = CaseConditionNode.new(val[1],val[3]) 
    result
end

# reduce 42 omitted

# reduce 43 omitted

def _reduce_44(val, _values, result)
 result = CaseConditionNode.new(nil,val[2]) 
    result
end

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

def _reduce_48(val, _values, result)
 result = InlineConditionalNode.new("if",val[2],val[0]) 
    result
end

def _reduce_49(val, _values, result)
 result = InlineConditionalNode.new("unless",val[2],val[0]) 
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

def _reduce_54(val, _values, result)
 result = val[1] 
    result
end

# reduce 55 omitted

def _reduce_56(val, _values, result)
 result = MotionNode.new(val[0],val[5],val[7]) 
    result
end

def _reduce_57(val, _values, result)
 result = val 
    result
end

def _reduce_58(val, _values, result)
 result = val[0] << val[1] 
    result
end

def _reduce_59(val, _values, result)
 result = SpeedNode.new(val[4]) 
    result
end

def _reduce_60(val, _values, result)
 result = TerminationNode.new(val[4]) 
    result
end

def _reduce_61(val, _values, result)
 result = OffsetNode.new(val[4]) 
    result
end

def _reduce_62(val, _values, result)
 result = TimeNode.new(val[2],val[4],val[6]) 
    result
end

def _reduce_63(val, _values, result)
 result = SkipNode.new(val[5],val[6]) 
    result
end

def _reduce_64(val, _values, result)
 result = val[1] 
    result
end

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

def _reduce_72(val, _values, result)
 result = [val[0],val[1]] 
    result
end

def _reduce_73(val, _values, result)
 result = [:max_speed,:max_speed] 
    result
end

def _reduce_74(val, _values, result)
 result = [val[0],val[2]] 
    result
end

def _reduce_75(val, _values, result)
 result = UnitsNode.new(val[0]) 
    result
end

def _reduce_76(val, _values, result)
 result = UnitsNode.new(val[0]) 
    result
end

def _reduce_77(val, _values, result)
 result = LabelDefinitionNode.new(val[1]) 
    result
end

def _reduce_78(val, _values, result)
 result = DefinitionNode.new(val[0],val[2]) 
    result
end

def _reduce_79(val, _values, result)
 result = AssignmentNode.new(val[0],val[2]) 
    result
end

def _reduce_80(val, _values, result)
 result = AssignmentNode.new(
                                           val[0],
                                           ExpressionNode.new(val[0],val[1],val[3])
                                         )
                                       
    result
end

def _reduce_81(val, _values, result)
 result = AssignmentNode.new(
                                           val[0],
                                           ExpressionNode.new(val[0],val[1],val[3])
                                         )
                                       
    result
end

def _reduce_82(val, _values, result)
 result = VarMethodNode.new(val[0],val[2]) 
    result
end

def _reduce_83(val, _values, result)
 result = VarNode.new(val[0]) 
    result
end

def _reduce_84(val, _values, result)
 result = val[0] 
    result
end

def _reduce_85(val, _values, result)
 result = val[0] 
    result
end

def _reduce_86(val, _values, result)
 val[1].grouped = true; result = val[1] 
    result
end

def _reduce_87(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

def _reduce_88(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

def _reduce_89(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

def _reduce_90(val, _values, result)
 result = ExpressionNode.new(val[1],val[0],nil) 
    result
end

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

def _reduce_107(val, _values, result)
 val[1] = val[1].to_i * -1 if val[0] == "-"; result = DigitNode.new(val[1]) 
    result
end

def _reduce_108(val, _values, result)
 val[1] = val[1].to_f * -1 if val[0] == "-"; result = RealNode.new(val[1]) 
    result
end

# reduce 109 omitted

# reduce 110 omitted

def _reduce_111(val, _values, result)
 result = DigitNode.new(val[0]) 
    result
end

def _reduce_112(val, _values, result)
 result = RealNode.new(val[0]) 
    result
end

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

def _reduce_121(val, _values, result)
 result = ArgumentNode.new(val[2].to_i) 
    result
end

def _reduce_122(val, _values, result)
 result = VisionRegisterNode.new(val[2].to_i) 
    result
end

def _reduce_123(val, _values, result)
 result = PositionNode.new(val[2].to_i) 
    result
end

def _reduce_124(val, _values, result)
 result = NumregNode.new(val[2].to_i) 
    result
end

def _reduce_125(val, _values, result)
 result = PosregNode.new(val[2].to_i) 
    result
end

def _reduce_126(val, _values, result)
 result = IONode.new(val[0], val[2].to_i) 
    result
end

def _reduce_127(val, _values, result)
 result = IONode.new(val[0], val[2].to_i) 
    result
end

def _reduce_128(val, _values, result)
 result = CommentNode.new(val[0]) 
    result
end

def _reduce_129(val, _values, result)
 result = TerminatorNode.new 
    result
end

def _reduce_130(val, _values, result)
 result = val[0] 
    result
end

def _reduce_131(val, _values, result)
 result = TerminatorNode.new 
    result
end

# reduce 132 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module TPPlus
