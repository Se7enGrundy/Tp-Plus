#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.10
# from Racc grammer file "".
#

require 'racc/parser.rb'
module TPPlus
  class Parser < Racc::Parser


  include TPPlus::Nodes

  attr_reader :interpreter
  def initialize(scanner, interpreter = TPPlus::Interpreter.new)
    @scanner       = scanner
    @interpreter   = interpreter
    super()
  end

  def next_token
    t = @scanner.next_token
    @interpreter.line_count += 1 if t && t[0] == :NEWLINE

    #puts t.inspect
    t
  end

  def parse
    do_parse
    @interpreter
  rescue Racc::ParseError => e
    raise "Parse error on line #{@interpreter.line_count+1}: #{e}"
  end
##### State transition tables begin ###

racc_action_table = [
    55,    30,    32,    24,    23,    40,    39,    42,    23,   118,
    24,    24,   208,   208,    29,    56,    30,    32,    24,    23,
   130,    33,   129,    32,    22,   160,   209,   209,   176,    29,
   199,   176,   176,    32,   143,    32,    33,    42,    32,    22,
   135,    25,    33,    32,    26,    18,    19,    49,    20,    21,
    27,   136,    33,    54,    33,   -50,    25,    33,   -50,    26,
    18,    19,    33,    20,    21,    27,    30,    32,    24,    23,
   111,   110,   108,   109,   106,    42,   107,   137,   105,    29,
    30,    32,    24,    23,   133,    49,    33,    40,    39,    22,
   139,    42,    42,    29,    30,    42,    24,    23,    42,   139,
    33,    49,    49,    22,   143,    49,    25,    29,    49,    26,
    18,    19,    42,    20,    21,    27,    42,    22,    90,    89,
    25,    42,    49,    26,    18,    19,    49,    20,    21,    27,
    42,    49,   -49,   -51,    25,   -49,   -51,    26,    18,    19,
    49,    20,    21,    27,    30,    32,    24,    23,    74,    75,
    78,    79,    76,    77,    80,    81,    42,    29,   144,   -52,
    82,    66,   -52,   132,    33,   131,    49,    22,   192,    67,
    68,    80,    81,   189,   190,   191,    42,    82,    84,    85,
    86,    88,    62,    87,    25,    63,   124,    26,    18,    19,
   123,    20,    21,    27,    84,    85,    86,    88,   148,    87,
    40,    39,    42,    40,    39,    42,    40,    39,    42,    40,
    39,    42,    40,    39,    42,    40,    39,    42,    40,    39,
    42,    40,    39,   149,   150,   151,   152,   153,   154,   155,
   118,   157,   118,   113,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   134,   118,    42,   112,    91,   181,    54,
    56,    71,   186,   186,   118,    69,   193,   194,   195,   196,
    65,    64,    42,    42,   206,    58,   210,   211,   212,   213,
    42,    35,   218 ]

racc_action_check = [
    22,    59,    59,    59,    59,   193,   193,   193,   213,   160,
   174,   173,   210,   198,    59,    22,   139,   139,   139,   139,
    92,    59,    92,   177,    59,   141,   210,   198,   213,   139,
   193,   174,   173,   114,   141,     2,   139,    62,    37,   139,
   109,    59,   177,   180,    59,    59,    59,    62,    59,    59,
    59,   110,   114,    22,     2,     6,   139,    37,     6,   139,
   139,   139,   180,   139,   139,   139,     4,     4,     4,     4,
    55,    55,    55,    55,    55,    66,    55,   111,    55,     4,
    60,    60,    60,    60,   107,    66,     4,    55,    55,     4,
   115,    63,    19,    60,    36,    26,    36,    36,    25,   116,
    60,    63,    19,    60,   117,    26,     4,    36,    25,     4,
     4,     4,    83,     4,     4,     4,   124,    36,    48,    48,
    60,   123,    83,    60,    60,    60,   124,    60,    60,    60,
    72,   123,     8,     9,    36,     8,     9,    36,    36,    36,
    72,    36,    36,    36,     0,     0,     0,     0,    43,    43,
    43,    43,    43,    43,    43,    43,    73,     0,   121,    13,
    43,    31,    13,   106,     0,   105,    73,     0,   188,    31,
    31,   125,   125,   188,   188,   188,    91,   125,   126,   126,
   126,   126,    28,   126,     0,    28,    68,     0,     0,     0,
    67,     0,     0,     0,    44,    44,    44,    44,   131,    44,
   143,   143,   143,   130,   130,   130,    54,    54,    54,   196,
   196,   196,    21,    21,    21,   194,   194,   194,    20,    20,
    20,    18,    18,   132,   133,   134,   135,   136,   137,   138,
    64,   140,    61,    58,   144,   148,   149,   150,   151,   152,
   153,   154,   158,   108,   161,   164,    56,    53,   175,   176,
    42,    38,   181,   184,   186,    35,   189,   190,   191,   192,
    30,    29,   195,    27,   197,    24,   200,   201,   202,   203,
    23,     1,   215 ]

racc_action_pointer = [
   141,   271,    31,   nil,    63,   nil,    12,   nil,    89,    90,
   nil,   nil,   nil,   116,   nil,   nil,   nil,   nil,   197,    66,
   194,   188,    -2,   244,   262,    72,    69,   237,   139,   244,
   234,   134,   nil,   nil,   nil,   255,    91,    34,   225,   nil,
   nil,   nil,   233,   119,   157,   nil,   nil,   nil,    94,   nil,
   nil,   nil,   nil,   193,   182,    63,   220,   nil,   207,    -2,
    77,   209,    11,    65,   207,   nil,    49,   163,   159,   nil,
   nil,   nil,   104,   130,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    86,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   150,   -34,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   108,   106,    27,   186,   -17,
    -6,    20,   nil,   nil,    29,    46,    55,    51,   nil,   nil,
   nil,   140,   nil,    95,    90,   136,   141,   nil,   nil,   nil,
   179,   173,   198,   199,   200,   201,   202,   203,   184,    13,
   186,   -19,   nil,   176,   179,   nil,   nil,   nil,   177,   178,
   179,   180,   181,   182,   183,   nil,   nil,   nil,   197,   nil,
   -14,   221,   nil,   nil,   219,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     6,     5,   192,   194,    19,   nil,   nil,
    39,   235,   nil,   nil,   236,   nil,   231,   nil,   154,   201,
   202,   203,   204,   -19,   191,   236,   185,   208,   -15,   nil,
   212,   211,   212,   215,   nil,   nil,   nil,   nil,   nil,   nil,
   -16,   nil,   nil,     2,   nil,   216,   nil,   nil,   nil ]

racc_action_default = [
    -1,  -128,    -2,    -3,    -7,   -10,   -11,   -12,   -13,   -14,
   -15,   -16,   -17,   -18,   -19,   -20,   -21,   -22,  -128,  -105,
  -128,  -128,   -79,  -128,  -128,  -105,  -105,  -128,  -128,  -128,
  -128,  -128,  -123,  -124,  -125,  -128,    -5,    -6,  -128,  -106,
  -107,   -24,   -79,   -80,   -82,   -84,  -100,  -101,  -128,  -104,
   -25,   -62,   -63,  -128,   -30,  -128,  -128,   -33,  -128,    -8,
    -8,  -127,  -105,  -105,  -127,   -73,  -105,  -128,  -128,   219,
    -4,   -23,  -105,  -105,   -86,   -87,   -88,   -89,   -90,   -91,
   -92,   -93,   -94,  -105,   -95,   -96,   -97,   -98,   -99,  -102,
  -103,  -128,  -128,   -28,   -31,   -32,   -74,  -108,  -109,  -110,
  -111,  -112,  -113,  -114,  -115,  -128,  -128,  -128,  -128,  -128,
  -128,  -128,   -78,   -34,    -9,   -54,   -54,  -128,  -126,   -47,
   -48,  -128,   -75,  -105,  -105,   -81,   -83,   -85,   -26,   -27,
  -128,  -128,  -128,  -128,  -128,  -128,  -128,  -128,  -128,    -8,
  -128,   -44,   -38,  -128,  -128,   -76,   -77,   -29,  -128,  -128,
  -128,  -128,  -128,  -128,  -128,   -35,   -53,   -36,  -128,   -39,
  -127,  -127,   -41,   -42,  -128,  -116,  -117,  -118,  -119,  -120,
  -121,  -122,   -37,  -128,  -128,  -128,  -128,  -128,   -45,   -46,
  -128,  -128,   -43,   -40,   -55,   -56,  -127,   -57,  -128,  -128,
  -128,  -128,  -128,  -128,  -128,  -128,  -128,  -128,  -128,   -69,
  -128,  -128,  -128,  -128,   -66,   -67,   -58,   -68,   -71,   -72,
  -128,   -59,   -60,  -128,   -70,  -128,   -64,   -65,   -61 ]

racc_goto_table = [
    31,    38,    93,   117,    31,    36,   121,    50,    53,   115,
   116,   178,   178,     2,   207,   142,   185,    37,    41,   187,
    52,    52,   161,    57,    59,    60,   214,    61,   177,   180,
   138,   140,   179,   179,   158,    92,    31,    94,   103,   159,
    36,   141,   217,   184,    70,   197,   203,   215,     1,    96,
   125,   216,    72,   126,    95,   127,    97,    98,    99,    31,
    31,   119,   120,   100,   101,   122,   102,   104,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   147,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   156,
   nil,   128,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   173,   174,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    94,   nil,   nil,   nil,    36,   nil,   nil,
   nil,   nil,   145,   146,   nil,   nil,   162,   nil,   188,   nil,
    95,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    31,
   nil,   nil,   nil,   163,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   175,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   198,   nil,   nil,   205,
   182,   201,   nil,   183,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   200,    52,   202,   204 ]

racc_goto_check = [
    22,    19,    24,    26,    22,     4,    26,    21,    21,     5,
     5,    14,    14,     2,    38,    29,    34,     2,    20,    34,
    22,    22,    30,    22,    20,    20,    38,    22,    31,    31,
    25,    25,     9,     9,    28,    23,    22,    19,    19,    29,
     4,    27,    10,    33,     3,    35,    36,    37,     1,    39,
    40,    14,    41,    42,    22,    44,    48,    49,    50,    22,
    22,    20,    20,    51,    52,    20,    53,    54,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    24,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     5,
   nil,    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    26,    26,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    19,   nil,   nil,   nil,     4,   nil,   nil,
   nil,   nil,    20,    20,   nil,   nil,    19,   nil,    26,   nil,
    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,
   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,   nil,    19,
     4,    21,   nil,     4,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    22,    22,    22,    22 ]

racc_goto_pointer = [
   nil,    48,    13,     8,     3,   -50,   nil,   nil,   nil,  -141,
  -171,   nil,   nil,   nil,  -162,   nil,   nil,   nil,   nil,   -17,
    -1,   -13,     0,   -19,   -52,   -85,   -58,   -76,  -107,  -102,
  -121,  -145,   nil,  -138,  -165,  -148,  -150,  -166,  -184,    -6,
   -22,     9,   -20,   nil,   -28,   nil,   nil,   nil,     1,     2,
     3,     8,     9,    11,    12,   nil ]

racc_goto_default = [
   nil,   nil,   114,     3,     4,   nil,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    51,
   nil,   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    28,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    43,   nil,    44,    73,    45,    83,    46,    48,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    34 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 60, :_reduce_none,
  1, 60, :_reduce_2,
  1, 61, :_reduce_3,
  3, 61, :_reduce_4,
  2, 61, :_reduce_5,
  2, 61, :_reduce_6,
  1, 61, :_reduce_7,
  0, 64, :_reduce_none,
  1, 64, :_reduce_9,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  3, 76, :_reduce_23,
  2, 76, :_reduce_24,
  2, 74, :_reduce_25,
  4, 75, :_reduce_26,
  4, 73, :_reduce_27,
  1, 82, :_reduce_28,
  3, 82, :_reduce_29,
  0, 82, :_reduce_30,
  1, 83, :_reduce_none,
  1, 83, :_reduce_none,
  2, 69, :_reduce_33,
  3, 68, :_reduce_34,
  5, 71, :_reduce_35,
  5, 71, :_reduce_36,
  6, 77, :_reduce_37,
  1, 86, :_reduce_38,
  2, 86, :_reduce_39,
  5, 88, :_reduce_40,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  4, 87, :_reduce_43,
  0, 87, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  3, 72, :_reduce_47,
  3, 72, :_reduce_48,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  2, 84, :_reduce_53,
  0, 84, :_reduce_none,
  8, 67, :_reduce_55,
  1, 92, :_reduce_56,
  2, 92, :_reduce_57,
  6, 93, :_reduce_58,
  6, 93, :_reduce_59,
  6, 93, :_reduce_60,
  8, 93, :_reduce_61,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  2, 94, :_reduce_68,
  1, 94, :_reduce_69,
  3, 94, :_reduce_70,
  1, 97, :_reduce_71,
  1, 97, :_reduce_72,
  2, 70, :_reduce_73,
  3, 65, :_reduce_74,
  3, 66, :_reduce_75,
  4, 66, :_reduce_76,
  4, 66, :_reduce_77,
  3, 81, :_reduce_78,
  1, 81, :_reduce_79,
  1, 79, :_reduce_80,
  3, 79, :_reduce_81,
  1, 99, :_reduce_82,
  3, 99, :_reduce_83,
  1, 101, :_reduce_none,
  3, 101, :_reduce_85,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  2, 105, :_reduce_102,
  2, 105, :_reduce_103,
  1, 106, :_reduce_none,
  0, 106, :_reduce_none,
  1, 78, :_reduce_106,
  1, 78, :_reduce_107,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  4, 113, :_reduce_116,
  4, 112, :_reduce_117,
  4, 111, :_reduce_118,
  4, 107, :_reduce_119,
  4, 110, :_reduce_120,
  4, 108, :_reduce_121,
  4, 109, :_reduce_122,
  1, 114, :_reduce_123,
  1, 63, :_reduce_124,
  1, 63, :_reduce_125,
  1, 85, :_reduce_126,
  0, 85, :_reduce_none ]

racc_reduce_n = 128

racc_shift_n = 219

racc_token_table = {
  false => 0,
  :error => 1,
  :ASSIGN => 2,
  :AT_SYM => 3,
  :COMMENT => 4,
  :JUMP => 5,
  :IO_METHOD => 6,
  :INPUT => 7,
  :OUTPUT => 8,
  :NUMREG => 9,
  :POSREG => 10,
  :VREG => 11,
  :SREG => 12,
  :POSITION => 13,
  :TIME_SEGMENT => 14,
  :ARG => 15,
  :MOVE => 16,
  :DOT => 17,
  :TO => 18,
  :AT => 19,
  :TERM => 20,
  :OFFSET => 21,
  :SEMICOLON => 22,
  :NEWLINE => 23,
  :REAL => 24,
  :DIGIT => 25,
  :WORD => 26,
  :EQUAL => 27,
  :UNITS => 28,
  :EEQUAL => 29,
  :NOTEQUAL => 30,
  :GTE => 31,
  :LTE => 32,
  :LT => 33,
  :GT => 34,
  :PLUS => 35,
  :MINUS => 36,
  :STAR => 37,
  :SLASH => 38,
  :DIV => 39,
  :AND => 40,
  :OR => 41,
  :MOD => 42,
  :IF => 43,
  :ELSE => 44,
  :END => 45,
  :UNLESS => 46,
  :WAIT_FOR => 47,
  :WAIT_UNTIL => 48,
  :MAX_SPEED => 49,
  :FANUC_USE => 50,
  :FANUC_SET => 51,
  :CASE => 52,
  :WHEN => 53,
  "," => 54,
  "(" => 55,
  ")" => 56,
  "[" => 57,
  "]" => 58 }

racc_nt_base = 59

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ASSIGN",
  "AT_SYM",
  "COMMENT",
  "JUMP",
  "IO_METHOD",
  "INPUT",
  "OUTPUT",
  "NUMREG",
  "POSREG",
  "VREG",
  "SREG",
  "POSITION",
  "TIME_SEGMENT",
  "ARG",
  "MOVE",
  "DOT",
  "TO",
  "AT",
  "TERM",
  "OFFSET",
  "SEMICOLON",
  "NEWLINE",
  "REAL",
  "DIGIT",
  "WORD",
  "EQUAL",
  "UNITS",
  "EEQUAL",
  "NOTEQUAL",
  "GTE",
  "LTE",
  "LT",
  "GT",
  "PLUS",
  "MINUS",
  "STAR",
  "SLASH",
  "DIV",
  "AND",
  "OR",
  "MOD",
  "IF",
  "ELSE",
  "END",
  "UNLESS",
  "WAIT_FOR",
  "WAIT_UNTIL",
  "MAX_SPEED",
  "FANUC_USE",
  "FANUC_SET",
  "CASE",
  "WHEN",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\"[\"",
  "\"]\"",
  "$start",
  "program",
  "statements",
  "statement",
  "terminator",
  "block",
  "definition",
  "assignment",
  "motion_statement",
  "jump",
  "io_method",
  "label_definition",
  "conditional",
  "inline_conditional",
  "program_call",
  "use_statement",
  "set_statement",
  "wait_statement",
  "case_statement",
  "number",
  "expression",
  "indirectable",
  "var",
  "args",
  "arg",
  "else_block",
  "swallow_newlines",
  "case_conditions",
  "case_else",
  "case_condition",
  "case_allowed_condition",
  "case_allowed_statement",
  "inlineable",
  "motion_modifiers",
  "motion_modifier",
  "speed",
  "time",
  "time_seg_actions",
  "units",
  "definable",
  "simple_expression",
  "relop",
  "term",
  "addop",
  "factor",
  "mulop",
  "signed_number",
  "sign",
  "numreg",
  "output",
  "input",
  "posreg",
  "position",
  "vreg",
  "argument",
  "comment" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
 @interpreter.nodes = val[0].flatten 
    result
end

def _reduce_3(val, _values, result)
 result = val 
    result
end

def _reduce_4(val, _values, result)
 result = val[0] << val[1] << val[2] 
    result
end

def _reduce_5(val, _values, result)
 result = val[0] << val[1] 
    result
end

def _reduce_6(val, _values, result)
 result = [val[0]] << val[1] 
    result
end

def _reduce_7(val, _values, result)
 result = [val[0]] 
    result
end

# reduce 8 omitted

def _reduce_9(val, _values, result)
 result = val[0] 
    result
end

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

def _reduce_23(val, _values, result)
 result = WaitForNode.new(val[1], val[2]) 
    result
end

def _reduce_24(val, _values, result)
 result = WaitUntilNode.new(val[1]) 
    result
end

def _reduce_25(val, _values, result)
 result = UseNode.new(val[0],val[1]) 
    result
end

def _reduce_26(val, _values, result)
 result = SetNode.new(val[0],val[1],val[3]) 
    result
end

def _reduce_27(val, _values, result)
 result = CallNode.new(val[0],val[2]) 
    result
end

def _reduce_28(val, _values, result)
 result = [val[0]] 
    result
end

def _reduce_29(val, _values, result)
 result = val[0] << val[2] 
    result
end

def _reduce_30(val, _values, result)
 result = [] 
    result
end

# reduce 31 omitted

# reduce 32 omitted

def _reduce_33(val, _values, result)
 result = IOMethodNode.new(val[0],val[1]) 
    result
end

def _reduce_34(val, _values, result)
 result = JumpNode.new(val[2]) 
    result
end

def _reduce_35(val, _values, result)
 result = ConditionalNode.new("if",val[1],val[2],val[3]) 
    result
end

def _reduce_36(val, _values, result)
 result = ConditionalNode.new("unless",val[1],val[2],val[3]) 
    result
end

def _reduce_37(val, _values, result)
 result = CaseNode.new(val[1],val[3],val[4]) 
    result
end

def _reduce_38(val, _values, result)
 result = val 
    result
end

def _reduce_39(val, _values, result)
 result = val[0] << val[1] << val[2] 
    result
end

def _reduce_40(val, _values, result)
 result = CaseConditionNode.new(val[1],val[3]) 
    result
end

# reduce 41 omitted

# reduce 42 omitted

def _reduce_43(val, _values, result)
 result = CaseConditionNode.new(nil,val[2]) 
    result
end

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

def _reduce_47(val, _values, result)
 result = InlineConditionalNode.new("if",val[2],val[0]) 
    result
end

def _reduce_48(val, _values, result)
 result = InlineConditionalNode.new("unless",val[2],val[0]) 
    result
end

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
 result = val[1] 
    result
end

# reduce 54 omitted

def _reduce_55(val, _values, result)
 result = MotionNode.new(val[0],val[5],val[7]) 
    result
end

def _reduce_56(val, _values, result)
 result = val 
    result
end

def _reduce_57(val, _values, result)
 result = val[0] << val[1] 
    result
end

def _reduce_58(val, _values, result)
 result = SpeedNode.new(val[4]) 
    result
end

def _reduce_59(val, _values, result)
 result = TerminationNode.new(val[4]) 
    result
end

def _reduce_60(val, _values, result)
 result = OffsetNode.new(val[4]) 
    result
end

def _reduce_61(val, _values, result)
 result = TimeNode.new(val[2],val[4],val[6]) 
    result
end

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

def _reduce_68(val, _values, result)
 result = [val[0],val[1]] 
    result
end

def _reduce_69(val, _values, result)
 result = [:max_speed,:max_speed] 
    result
end

def _reduce_70(val, _values, result)
 result = [val[0],val[2]] 
    result
end

def _reduce_71(val, _values, result)
 result = UnitsNode.new(val[0]) 
    result
end

def _reduce_72(val, _values, result)
 result = UnitsNode.new(val[0]) 
    result
end

def _reduce_73(val, _values, result)
 result = LabelDefinitionNode.new(val[1]) 
    result
end

def _reduce_74(val, _values, result)
 result = DefinitionNode.new(val[0],val[2]) 
    result
end

def _reduce_75(val, _values, result)
 result = AssignmentNode.new(val[0],val[2]) 
    result
end

def _reduce_76(val, _values, result)
 result = AssignmentNode.new(
                                           val[0],
                                           ExpressionNode.new(val[0],val[1],val[3])
                                         )
                                       
    result
end

def _reduce_77(val, _values, result)
 result = AssignmentNode.new(
                                           val[0],
                                           ExpressionNode.new(val[0],val[1],val[3])
                                         )
                                       
    result
end

def _reduce_78(val, _values, result)
 result = VarMethodNode.new(val[0],val[2]) 
    result
end

def _reduce_79(val, _values, result)
 result = VarNode.new(val[0]) 
    result
end

def _reduce_80(val, _values, result)
 result = val[0] 
    result
end

def _reduce_81(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

def _reduce_82(val, _values, result)
 result = val[0] 
    result
end

def _reduce_83(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

# reduce 84 omitted

def _reduce_85(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

def _reduce_102(val, _values, result)
 val[1] = val[1].to_i * -1 if val[0] == "-"; result = DigitNode.new(val[1]) 
    result
end

def _reduce_103(val, _values, result)
 val[1] = val[1].to_f * -1 if val[0] == "-"; result = RealNode.new(val[1]) 
    result
end

# reduce 104 omitted

# reduce 105 omitted

def _reduce_106(val, _values, result)
 result = DigitNode.new(val[0]) 
    result
end

def _reduce_107(val, _values, result)
 result = RealNode.new(val[0]) 
    result
end

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

def _reduce_116(val, _values, result)
 result = ArgumentNode.new(val[2].to_i) 
    result
end

def _reduce_117(val, _values, result)
 result = VisionRegisterNode.new(val[2].to_i) 
    result
end

def _reduce_118(val, _values, result)
 result = PositionNode.new(val[2].to_i) 
    result
end

def _reduce_119(val, _values, result)
 result = NumregNode.new(val[2].to_i) 
    result
end

def _reduce_120(val, _values, result)
 result = PosregNode.new(val[2].to_i) 
    result
end

def _reduce_121(val, _values, result)
 result = IONode.new(val[0], val[2].to_i) 
    result
end

def _reduce_122(val, _values, result)
 result = IONode.new(val[0], val[2].to_i) 
    result
end

def _reduce_123(val, _values, result)
 result = CommentNode.new(val[0]) 
    result
end

def _reduce_124(val, _values, result)
 result = TerminatorNode.new 
    result
end

def _reduce_125(val, _values, result)
 result = val[0] 
    result
end

def _reduce_126(val, _values, result)
 result = TerminatorNode.new 
    result
end

# reduce 127 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module TPPlus
