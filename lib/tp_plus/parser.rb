#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.10
# from Racc grammer file "".
#

require 'racc/parser.rb'
module TPPlus
  class Parser < Racc::Parser


  include TPPlus::Nodes

  attr_reader :interpreter
  def initialize(scanner, interpreter = TPPlus::Interpreter.new)
    @scanner       = scanner
    @interpreter   = interpreter
    super()
  end

  def next_token
    t = @scanner.next_token
    @interpreter.line_count += 1 if t && t[0] == :NEWLINE

    #puts t.inspect
    t
  end

  def parse
    do_parse
    @interpreter
  rescue Racc::ParseError => e
    raise "Parse error on line #{@interpreter.line_count+1}: #{e}"
  end
##### State transition tables begin ###

racc_action_table = [
    64,    21,    35,    26,    25,    26,    26,    35,    25,   187,
    59,    35,    35,   103,    32,    65,    35,    49,    48,    47,
   164,    35,    36,   150,   149,    47,    24,    36,   208,   208,
   208,    36,    36,    56,   156,    62,    36,    21,    35,    26,
    25,    36,   -59,    27,   157,   -59,    28,    19,    20,   151,
    32,    22,    23,    29,    30,    60,    55,    63,    36,   159,
    73,   159,    24,    74,    87,    88,    91,    92,    89,    90,
   161,    93,    94,    96,    97,    98,   100,    95,    99,    27,
   106,   105,    28,    19,    20,   206,   207,    22,    23,    29,
    30,    21,    35,    26,    25,   126,   125,   123,   124,   121,
    76,   122,   -60,   120,    32,   -60,   164,   -61,    77,    78,
   -61,   152,    36,    41,    49,    48,    24,   165,    87,    88,
    91,    92,    89,    90,    42,    93,    94,    96,    97,    98,
   100,    95,    99,    27,    43,    47,    28,    19,    20,   168,
    59,    22,    23,    29,    30,    21,    35,    26,    25,   241,
    49,    48,    47,    98,    59,    47,    99,   171,    32,    21,
    35,    26,    25,    56,   -58,    62,    36,   -58,   230,    47,
    24,   140,    32,   227,   228,   229,   231,    56,   139,    62,
    36,    49,    48,    47,    24,    60,    55,    27,   138,   172,
    28,    19,    20,   173,    47,    22,    23,    29,    30,    60,
    55,    27,   175,   176,    28,    19,    20,   177,    59,    22,
    23,    29,    30,    21,    35,    26,    25,    49,    48,    47,
   178,    49,    48,    47,   179,   180,    32,    21,   181,    26,
    25,    56,   182,    62,    36,    49,    48,    47,    24,   133,
    32,    49,    48,    47,    49,    48,    47,    49,    48,    47,
   184,    21,    24,    60,    55,    27,    71,   191,    28,    19,
    20,    59,   133,    22,    23,    29,    30,    59,    47,    27,
    59,   192,    28,    19,    20,   171,    47,    22,    23,    29,
    30,   133,    47,   195,    56,    47,    62,    49,    48,    47,
    56,   196,    62,    56,    59,    62,    49,    48,    47,    59,
    49,    48,    47,    59,   197,   198,    60,    55,    59,    47,
   199,   200,    60,    55,    47,    60,    55,    56,    47,    62,
   201,   202,    56,    47,    62,   133,    56,    59,    62,   133,
    47,    56,    59,    62,   154,    75,    59,    38,   213,    60,
    55,   214,    47,   215,    60,    55,    63,    47,    60,    55,
    56,    47,    62,    60,    55,    56,   127,    62,   153,    56,
   220,    62,    21,   104,   220,   133,   225,   226,   155,   232,
   233,   234,    60,    55,   235,   236,   237,    60,    55,   238,
    79,    60,    55,    87,    88,    91,    92,    89,    90,   -75,
    93,    94,    96,    97,    98,   100,    95,    99,    87,    88,
    91,    92,    89,    90,    47,    93,    94,    96,    97,    98,
   100,    95,    99,    83,   141,    21,   248,   249,   250,   251,
   252,   254,   255,    87,    88,    91,    92,    89,    90,   146,
    93,    94,    96,    97,    98,   100,    95,    99,    87,    88,
    91,    92,    89,    90,    65,    93,    94,    96,    97,    98,
   100,    95,    99,    87,    88,    91,    92,    89,    90,   259,
    93,    94,    96,    97,    98,   100,    95,    99,    87,    88,
    91,    92,    89,    90,    47,    93,    94,    96,    97,    98,
   100,    95,    99,    87,    88,    91,    92,    89,    90,   261,
    93,    94,    96,    97,    98,   100,    95,    99,    87,    88,
    91,    92,    89,    90,   nil,    93,    94,    96,    97,    98,
   100,    95,    99,    87,    88,    91,    92,    89,    90,   nil,
    93,    94,    96,    97,    98,   100,    95,    99,    87,    88,
    91,    92,    89,    90,   nil,    93,    94,    96,    97,    98,
   100,    95,    99,    87,    88,    91,    92,    89,    90,   nil,
    93,    94,    96,    97,    98,   100,    95,    99 ]

racc_action_check = [
    24,     4,     4,     4,     4,   204,   203,   128,   252,   162,
    86,     2,    40,    59,     4,    24,   209,    22,    22,    22,
   162,   212,     4,   107,   107,    86,     4,   128,   204,   203,
   252,     2,    40,    86,   125,    86,   209,    70,    70,    70,
    70,   212,     7,     4,   126,     7,     4,     4,     4,   120,
    70,     4,     4,     4,     4,    86,    86,    24,    70,   129,
    31,   130,    70,    31,    70,    70,    70,    70,    70,    70,
   131,    70,    70,    70,    70,    70,    70,    70,    70,    70,
    61,    61,    70,    70,    70,   194,   194,    70,    70,    70,
    70,    68,    68,    68,    68,    64,    64,    64,    64,    64,
    34,    64,    10,    64,    68,    10,   132,    14,    34,    34,
    14,   121,    68,    19,    64,    64,    68,   136,    68,    68,
    68,    68,    68,    68,    20,    68,    68,    68,    68,    68,
    68,    68,    68,    68,    21,    83,    68,    68,    68,   140,
    85,    68,    68,    68,    68,   159,   159,   159,   159,   233,
   233,   233,   233,   102,    84,    85,   102,   141,   159,    71,
    71,    71,    71,    85,     9,    85,   159,     9,   224,    84,
   159,    81,    71,   224,   224,   224,   224,    84,    78,    84,
    71,   215,   215,   215,    71,    85,    85,   159,    77,   147,
   159,   159,   159,   148,    25,   159,   159,   159,   159,    84,
    84,    71,   151,   152,    71,    71,    71,   153,    23,    71,
    71,    71,    71,     0,     0,     0,     0,   150,   150,   150,
   154,    23,    23,    23,   155,   156,     0,    39,   157,    39,
    39,    23,   158,    23,     0,   234,   234,   234,     0,    75,
    39,   164,   164,   164,    63,    63,    63,   236,   236,   236,
   160,    26,    39,    23,    23,     0,    29,   165,     0,     0,
     0,    55,    72,     0,     0,     0,     0,   138,    30,    39,
    76,   168,    39,    39,    39,   169,    55,    39,    39,    39,
    39,   171,   138,   175,    55,    76,    55,   104,   104,   104,
   138,   176,   138,    76,    74,    76,    41,    41,    41,    56,
   103,   103,   103,    28,   177,   178,    55,    55,    73,    74,
   179,   180,   138,   138,    56,    76,    76,    74,    28,    74,
   181,   185,    56,    73,    56,   187,    28,   139,    28,   188,
   191,    73,    42,    73,   123,    32,    27,     1,   205,    74,
    74,   206,   139,   207,    56,    56,   208,    42,    28,    28,
   139,    27,   139,    73,    73,    42,    65,    42,   122,    27,
   213,    27,   214,    60,   218,   220,   221,   222,   124,   226,
   227,   228,   139,   139,   229,   230,   231,    42,    42,   232,
    38,    27,    27,    82,    82,    82,    82,    82,    82,    52,
    82,    82,    82,    82,    82,    82,    82,    82,   101,   101,
   101,   101,   101,   101,   235,   101,   101,   101,   101,   101,
   101,   101,   101,    50,    82,   237,   239,   240,   242,   243,
   244,   247,   249,   143,   143,   143,   143,   143,   143,   101,
   143,   143,   143,   143,   143,   143,   143,   143,   144,   144,
   144,   144,   144,   144,    47,   144,   144,   144,   144,   144,
   144,   144,   144,   145,   145,   145,   145,   145,   145,   253,
   145,   145,   145,   145,   145,   145,   145,   145,   137,   137,
   137,   137,   137,   137,   254,   137,   137,   137,   137,   137,
   137,   137,   137,   167,   167,   167,   167,   167,   167,   256,
   167,   167,   167,   167,   167,   167,   167,   167,   135,   135,
   135,   135,   135,   135,   nil,   135,   135,   135,   135,   135,
   135,   135,   135,    51,    51,    51,    51,    51,    51,   nil,
    51,    51,    51,    51,    51,    51,    51,    51,   134,   134,
   134,   134,   134,   134,   nil,   134,   134,   134,   134,   134,
   134,   134,   134,   166,   166,   166,   166,   166,   166,   nil,
   166,   166,   166,   166,   166,   166,   166,   166 ]

racc_action_pointer = [
   210,   337,     7,   nil,    -2,   nil,   nil,    -3,   nil,   119,
    57,   nil,   nil,   nil,    62,   nil,   nil,   nil,   nil,    54,
    65,   106,    -9,   195,    -2,   166,   248,   323,   290,   228,
   240,    15,   318,   nil,    71,   nil,   nil,   nil,   380,   224,
     8,   270,   319,   nil,   nil,   nil,   nil,   427,   nil,   nil,
   353,   483,   329,   nil,   nil,   248,   286,   nil,   nil,   -46,
   304,    54,   nil,   218,    88,   328,   nil,   nil,    88,   nil,
    34,   156,   238,   295,   281,   215,   257,   159,   149,   nil,
   nil,   111,   353,   107,   141,   127,    -3,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   368,   112,   274,   261,   nil,   nil,   -37,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   -13,    49,   296,   272,   306,   -28,   -18,   nil,     3,    13,
    15,    23,    49,   nil,   498,   468,    99,   438,   254,   314,
   114,   140,   nil,   393,   408,   423,   nil,   128,   132,   nil,
   191,   175,   176,   180,   193,   197,   198,   201,   185,   142,
   203,   nil,   -37,   nil,   215,   198,   513,   453,   210,   258,
   nil,   257,   nil,   nil,   nil,   220,   228,   241,   242,   247,
   248,   257,   nil,   nil,   nil,   274,   nil,   301,   305,   nil,
   nil,   302,   nil,   nil,    34,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     1,     0,   277,   282,   284,   287,    12,
   nil,   nil,    17,   343,   359,   155,   nil,   nil,   347,   nil,
   341,   305,   307,   nil,   154,   nil,   344,   311,   312,   315,
   316,   317,   318,   124,   209,   376,   221,   412,   nil,   355,
   357,   nil,   357,   358,   360,   nil,   nil,   361,   nil,   397,
   nil,   nil,     2,   398,   446,   nil,   428,   nil,   nil,   nil,
   nil,   nil ]

racc_action_default = [
    -1,  -141,    -2,    -3,    -7,   -10,   -11,   -12,   -13,   -14,
   -15,   -16,   -17,   -18,   -19,   -20,   -21,   -22,   -23,  -141,
  -141,  -141,  -141,  -141,   -88,  -141,  -141,  -118,  -118,  -141,
  -141,  -141,  -141,   -82,  -141,  -136,  -137,  -138,  -141,    -5,
    -6,  -141,  -118,   -31,   -32,   -74,   -75,   -88,  -119,  -120,
  -141,   -34,  -111,   -89,   -90,  -118,  -118,  -110,  -112,  -141,
  -141,  -141,  -117,   -38,  -141,  -141,   -41,   -42,    -8,  -111,
    -8,    -8,  -140,  -118,  -118,  -140,  -118,  -141,  -141,   262,
    -4,  -141,  -141,  -141,  -118,  -118,  -118,   -96,   -97,   -98,
   -99,  -100,  -101,  -102,  -103,  -104,  -105,  -106,  -107,  -108,
  -109,  -141,   -95,  -141,  -141,  -115,  -116,  -141,   -36,   -39,
   -40,   -83,  -121,  -122,  -123,  -124,  -125,  -126,  -127,  -128,
  -141,  -141,  -141,  -141,  -141,  -141,  -141,   -87,    -9,   -63,
   -63,  -141,  -141,  -139,   -56,   -57,  -141,   -84,  -118,  -118,
  -141,   -26,   -33,   -92,   -93,   -94,   -91,  -141,  -141,   -35,
  -141,  -141,  -141,  -141,  -141,  -141,  -141,  -141,  -141,    -8,
  -141,   -45,   -53,   -47,  -141,  -141,   -85,   -86,  -141,   -25,
   -27,  -140,  -113,  -114,   -37,  -141,  -141,  -141,  -141,  -141,
  -141,  -141,   -43,   -62,   -44,  -141,   -48,  -140,  -140,   -50,
   -51,  -141,   -24,   -28,  -141,  -129,  -130,  -131,  -132,  -133,
  -134,  -135,   -46,  -141,  -141,  -141,  -141,  -141,  -141,  -141,
   -54,   -55,  -141,  -141,  -141,  -141,   -52,   -49,   -64,   -65,
  -140,  -141,  -141,   -66,  -141,   -29,  -141,  -141,  -141,  -141,
  -141,  -141,  -141,  -141,  -141,  -141,  -141,  -141,   -30,  -141,
  -141,   -81,  -141,  -141,  -141,   -78,   -79,   -73,   -67,  -141,
   -68,   -69,  -141,  -141,  -141,   -80,  -141,   -76,   -77,   -71,
   -72,   -70 ]

racc_goto_table = [
    34,    67,   108,   170,    34,    44,    50,   109,   118,   162,
   132,    39,   163,   136,    51,   209,   212,   169,    68,    70,
   210,   210,    46,    52,    81,    66,   129,   219,   130,   131,
    72,   193,   223,    82,     2,   158,   160,   107,    40,    34,
   185,    46,   186,   211,   211,   258,   101,   102,   188,    39,
    80,   218,     1,   239,   244,   256,   253,   111,   112,   113,
   114,   115,   116,   110,   134,   135,   117,   137,    34,   257,
    34,    34,   119,   nil,   nil,   143,   144,   145,   nil,   nil,
   nil,   nil,   nil,   142,   nil,   nil,   147,   148,   nil,   174,
   nil,   nil,   nil,   nil,   109,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    46,    46,   nil,   nil,   nil,   189,   194,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   183,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   203,   204,   nil,   nil,   166,
   167,   nil,   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   110,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   224,    34,
   nil,   nil,   nil,   nil,   190,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   246,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   221,
   nil,   205,   nil,   nil,   nil,   nil,   nil,   nil,   222,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   247,   nil,   nil,    46,   240,   242,   216,   nil,
   nil,   217,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    46,    46,   243,   245,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   260 ]

racc_goto_check = [
    26,    25,    28,    23,    26,    20,    20,    29,    29,    31,
    24,     4,    33,    24,    21,    35,    35,    22,    21,    21,
    15,    15,    26,    26,    20,    26,     5,    38,     5,     5,
    26,    23,    38,    21,     2,    30,    30,    27,     2,    26,
    32,    26,    33,    10,    10,    11,    21,    21,    34,     4,
     3,    37,     1,    39,    40,    41,    42,    43,    52,    53,
    54,    55,    56,    26,    21,    21,    57,    21,    26,    15,
    26,    26,    58,   nil,   nil,    21,    21,    21,   nil,   nil,
   nil,   nil,   nil,    26,   nil,   nil,    20,    20,   nil,    28,
   nil,   nil,   nil,   nil,    29,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    26,    26,   nil,   nil,   nil,    29,    24,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     5,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    24,    24,   nil,   nil,    21,
    21,   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    24,    26,
   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    29,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,
   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,    20,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    25,   nil,   nil,    26,    20,    20,     4,   nil,
   nil,     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    26,    26,    26,    26,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    26 ]

racc_goto_pointer = [
   nil,    52,    34,    11,     9,   -42,   nil,   nil,   nil,   nil,
  -160,  -207,   nil,   nil,   nil,  -183,   nil,   nil,   nil,   nil,
   -17,    -9,  -124,  -138,   -62,   -25,     0,   -26,   -61,   -56,
   -94,  -123,  -122,  -120,  -116,  -188,   nil,  -162,  -186,  -180,
  -182,  -197,  -191,    -7,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    -6,    -5,    -4,    -3,    -2,     2,     8,   nil ]

racc_goto_default = [
   nil,   nil,   128,     3,     4,   nil,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
   nil,   nil,   nil,   nil,   nil,    33,    69,   nil,   nil,    45,
   nil,   nil,   nil,   nil,   nil,   nil,    31,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    53,    54,    84,    85,    86,    57,
    58,    61,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 65, :_reduce_none,
  1, 65, :_reduce_2,
  1, 66, :_reduce_3,
  3, 66, :_reduce_4,
  2, 66, :_reduce_5,
  2, 66, :_reduce_6,
  1, 66, :_reduce_7,
  0, 69, :_reduce_none,
  1, 69, :_reduce_9,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  6, 82, :_reduce_24,
  5, 82, :_reduce_25,
  0, 86, :_reduce_none,
  1, 86, :_reduce_27,
  2, 86, :_reduce_28,
  6, 87, :_reduce_29,
  8, 87, :_reduce_30,
  2, 89, :_reduce_31,
  2, 80, :_reduce_32,
  4, 81, :_reduce_33,
  2, 81, :_reduce_34,
  4, 79, :_reduce_35,
  1, 91, :_reduce_36,
  3, 91, :_reduce_37,
  0, 91, :_reduce_38,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  2, 75, :_reduce_41,
  2, 74, :_reduce_42,
  5, 77, :_reduce_43,
  5, 77, :_reduce_44,
  4, 71, :_reduce_45,
  6, 83, :_reduce_46,
  1, 95, :_reduce_47,
  2, 95, :_reduce_48,
  5, 97, :_reduce_49,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  4, 96, :_reduce_52,
  0, 96, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  3, 78, :_reduce_56,
  3, 78, :_reduce_57,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  2, 94, :_reduce_62,
  0, 94, :_reduce_none,
  8, 73, :_reduce_64,
  1, 101, :_reduce_65,
  2, 101, :_reduce_66,
  6, 102, :_reduce_67,
  6, 102, :_reduce_68,
  6, 102, :_reduce_69,
  8, 102, :_reduce_70,
  7, 102, :_reduce_71,
  2, 106, :_reduce_72,
  0, 106, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  3, 103, :_reduce_80,
  1, 103, :_reduce_81,
  1, 76, :_reduce_82,
  3, 70, :_reduce_83,
  3, 72, :_reduce_84,
  4, 72, :_reduce_85,
  4, 72, :_reduce_86,
  3, 90, :_reduce_87,
  1, 90, :_reduce_88,
  1, 85, :_reduce_89,
  1, 85, :_reduce_90,
  3, 85, :_reduce_91,
  3, 109, :_reduce_92,
  3, 109, :_reduce_93,
  3, 109, :_reduce_94,
  2, 109, :_reduce_95,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  4, 114, :_reduce_113,
  4, 114, :_reduce_114,
  2, 113, :_reduce_115,
  2, 113, :_reduce_116,
  1, 115, :_reduce_none,
  0, 115, :_reduce_none,
  1, 93, :_reduce_119,
  1, 93, :_reduce_120,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  4, 122, :_reduce_129,
  4, 121, :_reduce_130,
  4, 120, :_reduce_131,
  4, 116, :_reduce_132,
  4, 119, :_reduce_133,
  4, 117, :_reduce_134,
  4, 118, :_reduce_135,
  1, 123, :_reduce_136,
  1, 68, :_reduce_137,
  1, 68, :_reduce_138,
  1, 88, :_reduce_139,
  0, 88, :_reduce_none ]

racc_reduce_n = 141

racc_shift_n = 262

racc_token_table = {
  false => 0,
  :error => 1,
  :ASSIGN => 2,
  :AT_SYM => 3,
  :COMMENT => 4,
  :JUMP => 5,
  :IO_METHOD => 6,
  :INPUT => 7,
  :OUTPUT => 8,
  :NUMREG => 9,
  :POSREG => 10,
  :VREG => 11,
  :SREG => 12,
  :POSITION => 13,
  :TIME_SEGMENT => 14,
  :ARG => 15,
  :MOVE => 16,
  :DOT => 17,
  :TO => 18,
  :AT => 19,
  :TERM => 20,
  :OFFSET => 21,
  :SKIP => 22,
  :SEMICOLON => 23,
  :NEWLINE => 24,
  :STRING => 25,
  :REAL => 26,
  :DIGIT => 27,
  :WORD => 28,
  :EQUAL => 29,
  :EEQUAL => 30,
  :NOTEQUAL => 31,
  :GTE => 32,
  :LTE => 33,
  :LT => 34,
  :GT => 35,
  :BANG => 36,
  :PLUS => 37,
  :MINUS => 38,
  :STAR => 39,
  :SLASH => 40,
  :DIV => 41,
  :AND => 42,
  :OR => 43,
  :MOD => 44,
  :IF => 45,
  :ELSE => 46,
  :END => 47,
  :UNLESS => 48,
  :WAIT_FOR => 49,
  :WAIT_UNTIL => 50,
  :TIMEOUT => 51,
  :AFTER => 52,
  :FANUC_USE => 53,
  :FANUC_SET => 54,
  :NAMESPACE => 55,
  :CASE => 56,
  :WHEN => 57,
  :POSITION_REGISTER => 58,
  "(" => 59,
  "," => 60,
  ")" => 61,
  "[" => 62,
  "]" => 63 }

racc_nt_base = 64

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ASSIGN",
  "AT_SYM",
  "COMMENT",
  "JUMP",
  "IO_METHOD",
  "INPUT",
  "OUTPUT",
  "NUMREG",
  "POSREG",
  "VREG",
  "SREG",
  "POSITION",
  "TIME_SEGMENT",
  "ARG",
  "MOVE",
  "DOT",
  "TO",
  "AT",
  "TERM",
  "OFFSET",
  "SKIP",
  "SEMICOLON",
  "NEWLINE",
  "STRING",
  "REAL",
  "DIGIT",
  "WORD",
  "EQUAL",
  "EEQUAL",
  "NOTEQUAL",
  "GTE",
  "LTE",
  "LT",
  "GT",
  "BANG",
  "PLUS",
  "MINUS",
  "STAR",
  "SLASH",
  "DIV",
  "AND",
  "OR",
  "MOD",
  "IF",
  "ELSE",
  "END",
  "UNLESS",
  "WAIT_FOR",
  "WAIT_UNTIL",
  "TIMEOUT",
  "AFTER",
  "FANUC_USE",
  "FANUC_SET",
  "NAMESPACE",
  "CASE",
  "WHEN",
  "POSITION_REGISTER",
  "\"(\"",
  "\",\"",
  "\")\"",
  "\"[\"",
  "\"]\"",
  "$start",
  "program",
  "statements",
  "statement",
  "terminator",
  "block",
  "definition",
  "namespace",
  "assignment",
  "motion_statement",
  "jump",
  "io_method",
  "label_definition",
  "conditional",
  "inline_conditional",
  "program_call",
  "use_statement",
  "set_statement",
  "wait_statement",
  "case_statement",
  "indirectable",
  "expression",
  "wait_modifiers",
  "wait_modifier",
  "swallow_newlines",
  "label",
  "var",
  "args",
  "arg",
  "number",
  "else_block",
  "case_conditions",
  "case_else",
  "case_condition",
  "case_allowed_condition",
  "case_allowed_statement",
  "inlineable",
  "motion_modifiers",
  "motion_modifier",
  "speed",
  "time",
  "time_seg_actions",
  "optional_lpos_arg",
  "definable",
  "factor",
  "operator",
  "relop",
  "addop",
  "mulop",
  "signed_number",
  "indirect_position",
  "sign",
  "numreg",
  "output",
  "input",
  "posreg",
  "position",
  "vreg",
  "argument",
  "comment" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
 @interpreter.nodes = val[0].flatten 
    result
end

def _reduce_3(val, _values, result)
 result = val 
    result
end

def _reduce_4(val, _values, result)
 result = val[0] << val[1] << val[2] 
    result
end

def _reduce_5(val, _values, result)
 result = val[0] << val[1] 
    result
end

def _reduce_6(val, _values, result)
 result = [val[0]] << val[1] 
    result
end

def _reduce_7(val, _values, result)
 result = [val[0]] 
    result
end

# reduce 8 omitted

def _reduce_9(val, _values, result)
 result = val[0] 
    result
end

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

def _reduce_24(val, _values, result)
 result = WaitForNode.new(val[2], val[4]) 
    result
end

def _reduce_25(val, _values, result)
 result = WaitUntilNode.new(val[2],val[4]) 
    result
end

# reduce 26 omitted

def _reduce_27(val, _values, result)
 result = val[0] 
    result
end

def _reduce_28(val, _values, result)
 result = val[0].merge(val[1]) 
    result
end

def _reduce_29(val, _values, result)
 result = { label: val[4] } 
    result
end

def _reduce_30(val, _values, result)
 result = { timeout: [val[4],val[6]] } 
    result
end

def _reduce_31(val, _values, result)
 result = val[1] 
    result
end

def _reduce_32(val, _values, result)
 result = UseNode.new(val[0],val[1]) 
    result
end

def _reduce_33(val, _values, result)
 result = SetNode.new(val[0],val[1],val[3]) 
    result
end

def _reduce_34(val, _values, result)
 result = SetNode.new(val[0],nil,val[1]) 
    result
end

def _reduce_35(val, _values, result)
 result = CallNode.new(val[0],val[2]) 
    result
end

def _reduce_36(val, _values, result)
 result = [val[0]] 
    result
end

def _reduce_37(val, _values, result)
 result = val[0] << val[2] 
    result
end

def _reduce_38(val, _values, result)
 result = [] 
    result
end

# reduce 39 omitted

# reduce 40 omitted

def _reduce_41(val, _values, result)
 result = IOMethodNode.new(val[0],val[1]) 
    result
end

def _reduce_42(val, _values, result)
 result = JumpNode.new(val[1]) 
    result
end

def _reduce_43(val, _values, result)
 result = ConditionalNode.new("if",val[1],val[2],val[3]) 
    result
end

def _reduce_44(val, _values, result)
 result = ConditionalNode.new("unless",val[1],val[2],val[3]) 
    result
end

def _reduce_45(val, _values, result)
 result = NamespaceNode.new(val[1],val[2]) 
    result
end

def _reduce_46(val, _values, result)
 result = CaseNode.new(val[1],val[3],val[4]) 
    result
end

def _reduce_47(val, _values, result)
 result = val 
    result
end

def _reduce_48(val, _values, result)
 result = val[0] << val[1] << val[2] 
    result
end

def _reduce_49(val, _values, result)
 result = CaseConditionNode.new(val[1],val[3]) 
    result
end

# reduce 50 omitted

# reduce 51 omitted

def _reduce_52(val, _values, result)
 result = CaseConditionNode.new(nil,val[2]) 
    result
end

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

def _reduce_56(val, _values, result)
 result = InlineConditionalNode.new("if",val[2],val[0]) 
    result
end

def _reduce_57(val, _values, result)
 result = InlineConditionalNode.new("unless",val[2],val[0]) 
    result
end

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

def _reduce_62(val, _values, result)
 result = val[1] 
    result
end

# reduce 63 omitted

def _reduce_64(val, _values, result)
 result = MotionNode.new(val[0],val[5],val[7]) 
    result
end

def _reduce_65(val, _values, result)
 result = val 
    result
end

def _reduce_66(val, _values, result)
 result = val[0] << val[1] 
    result
end

def _reduce_67(val, _values, result)
 result = SpeedNode.new(val[4]) 
    result
end

def _reduce_68(val, _values, result)
 result = TerminationNode.new(val[4]) 
    result
end

def _reduce_69(val, _values, result)
 result = OffsetNode.new(val[4]) 
    result
end

def _reduce_70(val, _values, result)
 result = TimeNode.new(val[2],val[4],val[6]) 
    result
end

def _reduce_71(val, _values, result)
 result = SkipNode.new(val[4],val[5]) 
    result
end

def _reduce_72(val, _values, result)
 result = val[1] 
    result
end

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

def _reduce_80(val, _values, result)
 result = { speed: val[0], units: val[2] } 
    result
end

def _reduce_81(val, _values, result)
 result = { speed: val[0], units: nil } 
    result
end

def _reduce_82(val, _values, result)
 result = LabelDefinitionNode.new(val[0]) 
    result
end

def _reduce_83(val, _values, result)
 result = DefinitionNode.new(val[0],val[2]) 
    result
end

def _reduce_84(val, _values, result)
 result = AssignmentNode.new(val[0],val[2]) 
    result
end

def _reduce_85(val, _values, result)
 result = AssignmentNode.new(
                                           val[0],
                                           ExpressionNode.new(val[0],val[1],val[3])
                                         )
                                       
    result
end

def _reduce_86(val, _values, result)
 result = AssignmentNode.new(
                                           val[0],
                                           ExpressionNode.new(val[0],val[1],val[3])
                                         )
                                       
    result
end

def _reduce_87(val, _values, result)
 result = VarMethodNode.new(val[0],val[2]) 
    result
end

def _reduce_88(val, _values, result)
 result = VarNode.new(val[0]) 
    result
end

def _reduce_89(val, _values, result)
 result = val[0] 
    result
end

def _reduce_90(val, _values, result)
 result = val[0] 
    result
end

def _reduce_91(val, _values, result)
 val[1].grouped = true; result = val[1] 
    result
end

def _reduce_92(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

def _reduce_93(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

def _reduce_94(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

def _reduce_95(val, _values, result)
 result = ExpressionNode.new(val[1],val[0],nil) 
    result
end

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

def _reduce_113(val, _values, result)
 result = IndirectNode.new(:position, val[2]) 
    result
end

def _reduce_114(val, _values, result)
 result = IndirectNode.new(:position_register, val[2]) 
    result
end

def _reduce_115(val, _values, result)
 val[1] = val[1].to_i * -1 if val[0] == "-"; result = DigitNode.new(val[1]) 
    result
end

def _reduce_116(val, _values, result)
 val[1] = val[1].to_f * -1 if val[0] == "-"; result = RealNode.new(val[1]) 
    result
end

# reduce 117 omitted

# reduce 118 omitted

def _reduce_119(val, _values, result)
 result = DigitNode.new(val[0]) 
    result
end

def _reduce_120(val, _values, result)
 result = RealNode.new(val[0]) 
    result
end

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

def _reduce_129(val, _values, result)
 result = ArgumentNode.new(val[2].to_i) 
    result
end

def _reduce_130(val, _values, result)
 result = VisionRegisterNode.new(val[2].to_i) 
    result
end

def _reduce_131(val, _values, result)
 result = PositionNode.new(val[2].to_i) 
    result
end

def _reduce_132(val, _values, result)
 result = NumregNode.new(val[2].to_i) 
    result
end

def _reduce_133(val, _values, result)
 result = PosregNode.new(val[2].to_i) 
    result
end

def _reduce_134(val, _values, result)
 result = IONode.new(val[0], val[2].to_i) 
    result
end

def _reduce_135(val, _values, result)
 result = IONode.new(val[0], val[2].to_i) 
    result
end

def _reduce_136(val, _values, result)
 result = CommentNode.new(val[0]) 
    result
end

def _reduce_137(val, _values, result)
 result = TerminatorNode.new 
    result
end

def _reduce_138(val, _values, result)
 result = val[0] 
    result
end

def _reduce_139(val, _values, result)
 result = TerminatorNode.new 
    result
end

# reduce 140 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module TPPlus
