#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.10
# from Racc grammer file "".
#

require 'racc/parser.rb'
module TPPlus
  class Parser < Racc::Parser


  include TPPlus::Nodes

  attr_reader :interpreter
  def initialize(scanner, interpreter = TPPlus::Interpreter.new)
    @scanner       = scanner
    @interpreter   = interpreter
    super()
  end

  def next_token
    t = @scanner.next_token
    @interpreter.line_count += 1 if t && t[0] == :NEWLINE

    #puts t.inspect
    t
  end

  def parse
    do_parse
    @interpreter
  rescue Racc::ParseError => e
    raise "Parse error on line #{@interpreter.line_count+1}: #{e}"
  end
##### State transition tables begin ###

racc_action_table = [
    59,    20,    33,    25,    24,    47,    46,    45,    25,    25,
    47,    46,    45,    24,    30,    60,    20,    33,    25,    24,
    33,    54,    34,    57,   240,    45,    23,   240,   214,    30,
    33,   194,   194,   230,    54,   194,    57,    34,    33,   241,
    34,    23,   241,    53,    26,    33,   152,    27,    18,    19,
    34,    70,    77,    21,    22,    28,    53,    58,    34,    26,
    71,    72,    27,    18,    19,    34,    45,   173,    21,    22,
    28,    20,    33,    25,    24,    54,   -59,    57,   152,   -59,
    45,    47,    46,    45,    30,    20,    33,    25,    24,    54,
    45,    57,    34,    47,    46,    45,    23,    53,    30,    54,
   -60,    57,    67,   -60,    45,    68,    34,   192,   193,   -57,
    23,    53,   -57,    54,    26,    57,    60,    27,    18,    19,
   153,    53,   148,    21,    22,    28,   -58,    92,    26,   -58,
    93,    27,    18,    19,    73,    53,    45,    21,    22,    28,
    20,    33,    25,    24,   218,    54,   -74,    57,   156,   215,
   216,   217,   219,    30,    47,    46,    45,    47,    46,    45,
   159,    34,    47,    46,    45,    23,    69,    53,    81,    82,
    85,    86,    83,    84,   146,    87,    88,    90,    91,    92,
    94,    89,    93,    26,    98,    97,    27,    18,    19,    45,
    45,    45,    21,    22,    28,    20,    33,    25,    24,    54,
    54,    57,    57,    47,    46,    45,   139,   138,    30,    47,
    46,    45,    47,    46,    45,   145,    34,   161,   162,   163,
    23,    53,    53,    81,    82,    85,    86,    83,    84,   164,
    87,    88,    90,    91,    92,    94,    89,    93,    26,   165,
   166,    27,    18,    19,    45,    45,   167,    21,    22,    28,
    45,    45,   168,    54,    54,    57,    57,    45,    20,    54,
    54,    57,    57,   170,   144,   143,    54,   177,    57,    45,
   142,   178,   159,   124,   181,    53,    53,   182,   183,   184,
   185,    53,    53,   186,   187,   188,   124,   124,    53,    81,
    82,    85,    86,    83,    84,    45,    87,    88,    90,    91,
    92,    94,    89,    93,    81,    82,    85,    86,    83,    84,
   141,    87,    88,    90,    91,    92,    94,    89,    93,   132,
   118,   117,   115,   116,   113,    41,   114,    40,   112,   199,
   200,   201,    58,    39,   137,   140,   206,    20,   129,    47,
    46,    81,    82,    85,    86,    83,    84,   206,    87,    88,
    90,    91,    92,    94,    89,    93,    81,    82,    85,    86,
    83,    84,   124,    87,    88,    90,    91,    92,    94,    89,
    93,    81,    82,    85,    86,    83,    84,   212,    87,    88,
    90,    91,    92,    94,    89,    93,    81,    82,    85,    86,
    83,    84,   213,    87,    88,    90,    91,    92,    94,    89,
    93,    81,    82,    85,    86,    83,    84,   148,    87,    88,
    90,    91,    92,    94,    89,    93,    81,    82,    85,    86,
    83,    84,   119,    87,    88,    90,    91,    92,    94,    89,
    93,    81,    82,    85,    86,    83,    84,   220,    87,    88,
    90,    91,    92,    94,    89,    93,    81,    82,    85,    86,
    83,    84,   221,    87,    88,    90,    91,    92,    94,    89,
    93,    81,    82,    85,    86,    83,    84,   222,    87,    88,
    90,    91,    92,    94,    89,    93,   223,   224,   225,   226,
   227,   124,    45,    45,   124,    20,   238,   131,   242,   243,
   244,   245,   247,   130,    36,   252,    45,   254 ]

racc_action_check = [
    23,     0,     0,     0,     0,   222,   222,   222,   189,   190,
    22,    22,    22,   245,     0,    23,    37,   120,    37,    37,
     2,    22,     0,    22,   242,    53,     0,   229,   209,    37,
   198,   189,   190,   222,    53,   245,    53,   120,   195,   242,
     2,    37,   229,    22,     0,    38,   123,     0,     0,     0,
   198,    32,    48,     0,     0,     0,    53,    23,   195,    37,
    32,    32,    37,    37,    37,    38,    54,   150,    37,    37,
    37,     4,     4,     4,     4,    54,     9,    54,   150,     9,
    80,   201,   201,   201,     4,   148,   148,   148,   148,    80,
    40,    80,     4,   139,   139,   139,     4,    54,   148,    40,
    13,    40,    29,    13,    79,    29,   148,   180,   180,     8,
   148,    80,     8,    79,     4,    79,    45,     4,     4,     4,
   127,    40,   121,     4,     4,     4,     6,    96,   148,     6,
    96,   148,   148,   148,    36,    79,    78,   148,   148,   148,
    65,    65,    65,    65,   211,    78,    50,    78,   131,   211,
   211,   211,   211,    65,   223,   223,   223,   225,   225,   225,
   132,    65,    21,    21,    21,    65,    30,    78,    65,    65,
    65,    65,    65,    65,   118,    65,    65,    65,    65,    65,
    65,    65,    65,    65,    56,    56,    65,    65,    65,    28,
    67,    68,    65,    65,    65,    63,    63,    63,    63,    67,
    68,    67,    68,   152,   152,   152,    99,    99,    63,    58,
    58,    58,    39,    39,    39,   117,    63,   140,   141,   142,
    63,    67,    68,    63,    63,    63,    63,    63,    63,   143,
    63,    63,    63,    63,    63,    63,    63,    63,    63,   144,
   145,    63,    63,    63,    26,    27,   146,    63,    63,    63,
   129,    70,   147,    26,    27,    26,    27,   130,    25,   129,
    70,   129,    70,   149,   116,   115,   130,   153,   130,    24,
   114,   156,   157,   159,   161,    26,    27,   162,   163,   164,
   165,   129,    70,   166,   167,   171,   173,   174,   130,    76,
    76,    76,    76,    76,    76,   177,    76,    76,    76,    76,
    76,    76,    76,    76,    95,    95,    95,    95,    95,    95,
   113,    95,    95,    95,    95,    95,    95,    95,    95,    76,
    59,    59,    59,    59,    59,    20,    59,    19,    59,   191,
   192,   193,   194,    18,    95,   112,   199,   200,    71,    59,
    59,   155,   155,   155,   155,   155,   155,   204,   155,   155,
   155,   155,   155,   155,   155,   155,   154,   154,   154,   154,
   154,   154,   206,   154,   154,   154,   154,   154,   154,   154,
   154,   136,   136,   136,   136,   136,   136,   207,   136,   136,
   136,   136,   136,   136,   136,   136,   128,   128,   128,   128,
   128,   128,   208,   128,   128,   128,   128,   128,   128,   128,
   128,    49,    49,    49,    49,    49,    49,   122,    49,    49,
    49,    49,    49,    49,    49,    49,   125,   125,   125,   125,
   125,   125,    60,   125,   125,   125,   125,   125,   125,   125,
   125,   126,   126,   126,   126,   126,   126,   213,   126,   126,
   126,   126,   126,   126,   126,   126,   134,   134,   134,   134,
   134,   134,   214,   134,   134,   134,   134,   134,   134,   134,
   134,   135,   135,   135,   135,   135,   135,   215,   135,   135,
   135,   135,   135,   135,   135,   135,   216,   217,   218,   219,
   221,    66,    77,   224,    69,   226,   228,    75,   231,   232,
   233,   234,   237,    72,     1,   246,   247,   249 ]

racc_action_pointer = [
    -2,   494,    16,   nil,    68,   nil,    80,   nil,    63,    30,
   nil,   nil,   nil,    54,   nil,   nil,   nil,   nil,   274,   268,
   297,   136,   -16,    -2,   241,   255,   216,   217,   161,    56,
   149,   nil,    22,   nil,   nil,   nil,   134,    13,    41,   186,
    62,   nil,   nil,   nil,   nil,    99,   nil,   nil,    -8,   370,
    86,   nil,   nil,    -3,    38,   nil,   158,   nil,   183,   313,
   394,   nil,   nil,   192,   nil,   137,   457,   162,   163,   460,
   223,   309,   464,   nil,   nil,   427,   258,   454,   108,    76,
    52,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   273,    85,   nil,   nil,   146,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   273,   248,   208,   203,   202,   153,   112,   nil,
    13,    75,   360,   -12,   nil,   385,   400,   102,   355,   222,
   229,   123,   143,   nil,   415,   430,   340,   nil,   nil,    67,
   190,   191,   192,   202,   212,   213,   219,   204,    82,   215,
    20,   nil,   177,   208,   325,   310,   210,   255,   nil,   249,
   nil,   211,   214,   215,   216,   217,   220,   221,   nil,   nil,
   nil,   237,   nil,   262,   263,   nil,   nil,   267,   nil,   nil,
    55,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,
     4,   268,   271,   272,   273,    34,   nil,   nil,    26,   319,
   334,    55,   nil,   nil,   330,   nil,   338,   316,   364,   -32,
   nil,   130,   nil,   376,   424,   408,   417,   418,   419,   420,
   nil,   419,   -21,   128,   455,   131,   482,   nil,   425,    -3,
   nil,   428,   428,   429,   431,   nil,   nil,   432,   nil,   nil,
   nil,   nil,    -6,   nil,   nil,     7,   434,   468,   nil,   436,
   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -1,  -140,    -2,    -3,    -7,   -10,   -11,   -12,   -13,   -14,
   -15,   -16,   -17,   -18,   -19,   -20,   -21,   -22,  -140,  -140,
  -140,  -140,  -140,   -90,  -140,  -140,  -117,  -117,  -140,  -140,
  -140,   -84,  -140,  -135,  -136,  -137,  -140,    -5,    -6,  -140,
  -117,   -31,   -32,   -73,   -74,   -90,  -118,  -119,  -140,   -34,
  -113,   -91,   -92,  -117,  -117,  -112,  -140,  -116,   -38,  -140,
  -140,   -41,   -42,    -8,  -113,    -8,  -139,  -117,  -117,  -139,
  -117,  -140,  -140,   255,    -4,  -140,  -140,  -140,  -117,  -117,
  -117,   -98,   -99,  -100,  -101,  -102,  -103,  -104,  -105,  -106,
  -107,  -108,  -109,  -110,  -111,  -140,   -97,  -114,  -115,  -140,
   -36,   -39,   -40,   -85,  -120,  -121,  -122,  -123,  -124,  -125,
  -126,  -127,  -140,  -140,  -140,  -140,  -140,  -140,  -140,   -89,
    -9,   -62,   -62,  -140,  -138,   -55,   -56,  -140,   -86,  -117,
  -117,  -140,   -25,   -33,   -94,   -95,   -96,   -93,   -35,  -140,
  -140,  -140,  -140,  -140,  -140,  -140,  -140,  -140,    -8,  -140,
   -52,   -46,  -140,  -140,   -87,   -88,  -140,   -24,   -26,  -139,
   -37,  -140,  -140,  -140,  -140,  -140,  -140,  -140,   -43,   -61,
   -44,  -140,   -47,  -139,  -139,   -49,   -50,  -140,   -23,   -27,
  -140,  -128,  -129,  -130,  -131,  -132,  -133,  -134,   -45,  -140,
  -140,  -140,  -140,  -140,  -140,  -140,   -53,   -54,  -140,  -140,
  -140,  -140,   -51,   -48,   -63,   -64,  -139,  -140,  -140,  -140,
   -65,  -140,   -28,  -140,  -140,  -140,  -140,  -140,  -140,  -140,
   -29,  -140,  -140,  -140,  -140,  -140,  -140,   -30,  -140,  -140,
   -80,  -140,  -140,  -140,  -140,   -77,   -78,   -72,   -66,   -79,
   -82,   -83,  -140,   -67,   -68,  -140,  -140,  -140,   -81,  -140,
   -75,   -76,   -70,   -71,   -69 ]

racc_goto_table = [
    32,    42,    48,    62,    32,   100,    37,   101,   110,   123,
   158,   121,   127,   122,   151,   205,   196,   196,   239,    75,
   210,    44,    50,     2,    61,    49,   150,    38,    66,    63,
    65,   248,   195,   198,    99,   179,   171,    32,   157,    44,
   174,   172,    37,    76,   147,   149,   197,   197,   251,   204,
    74,   228,   234,   249,   246,     1,    95,    96,   102,   103,
   104,   105,   106,    32,   107,    32,   108,   109,   111,   nil,
   125,   126,   250,   128,   nil,   nil,   nil,   133,   nil,   nil,
   nil,   134,   135,   136,   nil,   nil,   160,   nil,   101,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   169,   nil,   nil,   nil,
   nil,   175,   180,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   189,   190,   nil,   nil,
   nil,   nil,   nil,   nil,    37,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   154,   155,   nil,   nil,   nil,   nil,   nil,   102,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,   211,
   208,   nil,   176,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   229,   nil,   nil,   236,   nil,   nil,   191,   207,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   202,
   nil,   209,   203,   232,   237,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   231,    44,   233,   235,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   253 ]

racc_goto_check = [
    26,    19,    19,    24,    26,    28,     4,    25,    25,    23,
    22,     5,    23,     5,    32,    37,    14,    14,    42,    19,
    37,    26,    26,     2,    26,    20,    30,     2,    26,    20,
    20,    42,    34,    34,    27,    22,    31,    26,    21,    26,
    33,    32,     4,    20,    29,    29,     9,     9,    10,    36,
     3,    38,    39,    40,    41,     1,    20,    20,    26,    43,
    51,    52,    53,    26,    54,    26,    55,    56,    57,   nil,
    20,    20,    14,    20,   nil,   nil,   nil,    26,   nil,   nil,
   nil,    20,    20,    20,   nil,   nil,    28,   nil,    25,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     5,   nil,   nil,   nil,
   nil,    25,    23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    23,    23,   nil,   nil,
   nil,   nil,   nil,   nil,     4,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    20,    20,   nil,   nil,   nil,   nil,   nil,    26,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,    23,
    25,   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    25,   nil,   nil,    25,   nil,   nil,    26,    24,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,
   nil,    26,     4,    19,    24,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    26,    26,    26,    26,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26 ]

racc_goto_pointer = [
   nil,    55,    23,    13,     4,   -52,   nil,   nil,   nil,  -143,
  -197,   nil,   nil,   nil,  -173,   nil,   nil,   nil,   nil,   -20,
     3,   -94,  -122,   -57,   -22,   -51,     0,   -24,   -53,   -77,
   -97,  -114,  -109,  -112,  -157,   nil,  -150,  -184,  -171,  -173,
  -192,  -183,  -211,     0,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     1,     2,     3,     5,     7,     8,     9,   nil ]

racc_goto_default = [
   nil,   nil,   120,     3,     4,   nil,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,   nil,
   nil,   nil,   nil,   nil,    31,    43,    64,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    29,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    51,    52,    78,    79,    80,    55,
    56,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    35 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 65, :_reduce_none,
  1, 65, :_reduce_2,
  1, 66, :_reduce_3,
  3, 66, :_reduce_4,
  2, 66, :_reduce_5,
  2, 66, :_reduce_6,
  1, 66, :_reduce_7,
  0, 69, :_reduce_none,
  1, 69, :_reduce_9,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  6, 81, :_reduce_23,
  5, 81, :_reduce_24,
  0, 85, :_reduce_none,
  1, 85, :_reduce_26,
  2, 85, :_reduce_27,
  6, 86, :_reduce_28,
  7, 86, :_reduce_29,
  8, 86, :_reduce_30,
  2, 88, :_reduce_31,
  2, 79, :_reduce_32,
  4, 80, :_reduce_33,
  2, 80, :_reduce_34,
  4, 78, :_reduce_35,
  1, 91, :_reduce_36,
  3, 91, :_reduce_37,
  0, 91, :_reduce_38,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  2, 74, :_reduce_41,
  2, 73, :_reduce_42,
  5, 76, :_reduce_43,
  5, 76, :_reduce_44,
  6, 82, :_reduce_45,
  1, 94, :_reduce_46,
  2, 94, :_reduce_47,
  5, 96, :_reduce_48,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  4, 95, :_reduce_51,
  0, 95, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  3, 77, :_reduce_55,
  3, 77, :_reduce_56,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  2, 93, :_reduce_61,
  0, 93, :_reduce_none,
  8, 72, :_reduce_63,
  1, 100, :_reduce_64,
  2, 100, :_reduce_65,
  6, 101, :_reduce_66,
  6, 101, :_reduce_67,
  6, 101, :_reduce_68,
  8, 101, :_reduce_69,
  7, 101, :_reduce_70,
  2, 105, :_reduce_71,
  0, 105, :_reduce_none,
  1, 83, :_reduce_none,
  1, 83, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  2, 102, :_reduce_79,
  1, 102, :_reduce_80,
  3, 102, :_reduce_81,
  1, 106, :_reduce_82,
  1, 106, :_reduce_83,
  1, 75, :_reduce_84,
  3, 70, :_reduce_85,
  3, 71, :_reduce_86,
  4, 71, :_reduce_87,
  4, 71, :_reduce_88,
  3, 90, :_reduce_89,
  1, 90, :_reduce_90,
  1, 84, :_reduce_91,
  1, 84, :_reduce_92,
  3, 84, :_reduce_93,
  3, 109, :_reduce_94,
  3, 109, :_reduce_95,
  3, 109, :_reduce_96,
  2, 109, :_reduce_97,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  2, 113, :_reduce_114,
  2, 113, :_reduce_115,
  1, 114, :_reduce_none,
  0, 114, :_reduce_none,
  1, 89, :_reduce_118,
  1, 89, :_reduce_119,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  4, 121, :_reduce_128,
  4, 120, :_reduce_129,
  4, 119, :_reduce_130,
  4, 115, :_reduce_131,
  4, 118, :_reduce_132,
  4, 116, :_reduce_133,
  4, 117, :_reduce_134,
  1, 122, :_reduce_135,
  1, 68, :_reduce_136,
  1, 68, :_reduce_137,
  1, 87, :_reduce_138,
  0, 87, :_reduce_none ]

racc_reduce_n = 140

racc_shift_n = 255

racc_token_table = {
  false => 0,
  :error => 1,
  :ASSIGN => 2,
  :AT_SYM => 3,
  :COMMENT => 4,
  :JUMP => 5,
  :IO_METHOD => 6,
  :INPUT => 7,
  :OUTPUT => 8,
  :NUMREG => 9,
  :POSREG => 10,
  :VREG => 11,
  :SREG => 12,
  :POSITION => 13,
  :TIME_SEGMENT => 14,
  :ARG => 15,
  :MOVE => 16,
  :DOT => 17,
  :TO => 18,
  :AT => 19,
  :TERM => 20,
  :OFFSET => 21,
  :SKIP => 22,
  :SEMICOLON => 23,
  :NEWLINE => 24,
  :STRING => 25,
  :REAL => 26,
  :DIGIT => 27,
  :WORD => 28,
  :EQUAL => 29,
  :UNITS => 30,
  :EEQUAL => 31,
  :NOTEQUAL => 32,
  :GTE => 33,
  :LTE => 34,
  :LT => 35,
  :GT => 36,
  :BANG => 37,
  :PLUS => 38,
  :MINUS => 39,
  :STAR => 40,
  :SLASH => 41,
  :DIV => 42,
  :AND => 43,
  :OR => 44,
  :MOD => 45,
  :IF => 46,
  :ELSE => 47,
  :END => 48,
  :UNLESS => 49,
  :WAIT_FOR => 50,
  :WAIT_UNTIL => 51,
  :TIMEOUT => 52,
  :AFTER => 53,
  :MAX_SPEED => 54,
  :FANUC_USE => 55,
  :FANUC_SET => 56,
  :CASE => 57,
  :WHEN => 58,
  "(" => 59,
  "," => 60,
  ")" => 61,
  "[" => 62,
  "]" => 63 }

racc_nt_base = 64

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ASSIGN",
  "AT_SYM",
  "COMMENT",
  "JUMP",
  "IO_METHOD",
  "INPUT",
  "OUTPUT",
  "NUMREG",
  "POSREG",
  "VREG",
  "SREG",
  "POSITION",
  "TIME_SEGMENT",
  "ARG",
  "MOVE",
  "DOT",
  "TO",
  "AT",
  "TERM",
  "OFFSET",
  "SKIP",
  "SEMICOLON",
  "NEWLINE",
  "STRING",
  "REAL",
  "DIGIT",
  "WORD",
  "EQUAL",
  "UNITS",
  "EEQUAL",
  "NOTEQUAL",
  "GTE",
  "LTE",
  "LT",
  "GT",
  "BANG",
  "PLUS",
  "MINUS",
  "STAR",
  "SLASH",
  "DIV",
  "AND",
  "OR",
  "MOD",
  "IF",
  "ELSE",
  "END",
  "UNLESS",
  "WAIT_FOR",
  "WAIT_UNTIL",
  "TIMEOUT",
  "AFTER",
  "MAX_SPEED",
  "FANUC_USE",
  "FANUC_SET",
  "CASE",
  "WHEN",
  "\"(\"",
  "\",\"",
  "\")\"",
  "\"[\"",
  "\"]\"",
  "$start",
  "program",
  "statements",
  "statement",
  "terminator",
  "block",
  "definition",
  "assignment",
  "motion_statement",
  "jump",
  "io_method",
  "label_definition",
  "conditional",
  "inline_conditional",
  "program_call",
  "use_statement",
  "set_statement",
  "wait_statement",
  "case_statement",
  "indirectable",
  "expression",
  "wait_modifiers",
  "wait_modifier",
  "swallow_newlines",
  "label",
  "number",
  "var",
  "args",
  "arg",
  "else_block",
  "case_conditions",
  "case_else",
  "case_condition",
  "case_allowed_condition",
  "case_allowed_statement",
  "inlineable",
  "motion_modifiers",
  "motion_modifier",
  "speed",
  "time",
  "time_seg_actions",
  "optional_lpos_arg",
  "units",
  "definable",
  "factor",
  "operator",
  "relop",
  "addop",
  "mulop",
  "signed_number",
  "sign",
  "numreg",
  "output",
  "input",
  "posreg",
  "position",
  "vreg",
  "argument",
  "comment" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
 @interpreter.nodes = val[0].flatten 
    result
end

def _reduce_3(val, _values, result)
 result = val 
    result
end

def _reduce_4(val, _values, result)
 result = val[0] << val[1] << val[2] 
    result
end

def _reduce_5(val, _values, result)
 result = val[0] << val[1] 
    result
end

def _reduce_6(val, _values, result)
 result = [val[0]] << val[1] 
    result
end

def _reduce_7(val, _values, result)
 result = [val[0]] 
    result
end

# reduce 8 omitted

def _reduce_9(val, _values, result)
 result = val[0] 
    result
end

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

def _reduce_23(val, _values, result)
 result = WaitForNode.new(val[2], val[4]) 
    result
end

def _reduce_24(val, _values, result)
 result = WaitUntilNode.new(val[2],val[4]) 
    result
end

# reduce 25 omitted

def _reduce_26(val, _values, result)
 result = val[0] 
    result
end

def _reduce_27(val, _values, result)
 result = val[0].merge(val[1]) 
    result
end

def _reduce_28(val, _values, result)
 result = { label: val[4] } 
    result
end

def _reduce_29(val, _values, result)
 result = { timeout: [val[4],val[5]] } 
    result
end

def _reduce_30(val, _values, result)
 result = { timeout: [val[4],val[6]] } 
    result
end

def _reduce_31(val, _values, result)
 result = val[1] 
    result
end

def _reduce_32(val, _values, result)
 result = UseNode.new(val[0],val[1]) 
    result
end

def _reduce_33(val, _values, result)
 result = SetNode.new(val[0],val[1],val[3]) 
    result
end

def _reduce_34(val, _values, result)
 result = SetNode.new(val[0],nil,val[1]) 
    result
end

def _reduce_35(val, _values, result)
 result = CallNode.new(val[0],val[2]) 
    result
end

def _reduce_36(val, _values, result)
 result = [val[0]] 
    result
end

def _reduce_37(val, _values, result)
 result = val[0] << val[2] 
    result
end

def _reduce_38(val, _values, result)
 result = [] 
    result
end

# reduce 39 omitted

# reduce 40 omitted

def _reduce_41(val, _values, result)
 result = IOMethodNode.new(val[0],val[1]) 
    result
end

def _reduce_42(val, _values, result)
 result = JumpNode.new(val[1]) 
    result
end

def _reduce_43(val, _values, result)
 result = ConditionalNode.new("if",val[1],val[2],val[3]) 
    result
end

def _reduce_44(val, _values, result)
 result = ConditionalNode.new("unless",val[1],val[2],val[3]) 
    result
end

def _reduce_45(val, _values, result)
 result = CaseNode.new(val[1],val[3],val[4]) 
    result
end

def _reduce_46(val, _values, result)
 result = val 
    result
end

def _reduce_47(val, _values, result)
 result = val[0] << val[1] << val[2] 
    result
end

def _reduce_48(val, _values, result)
 result = CaseConditionNode.new(val[1],val[3]) 
    result
end

# reduce 49 omitted

# reduce 50 omitted

def _reduce_51(val, _values, result)
 result = CaseConditionNode.new(nil,val[2]) 
    result
end

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

def _reduce_55(val, _values, result)
 result = InlineConditionalNode.new("if",val[2],val[0]) 
    result
end

def _reduce_56(val, _values, result)
 result = InlineConditionalNode.new("unless",val[2],val[0]) 
    result
end

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

def _reduce_61(val, _values, result)
 result = val[1] 
    result
end

# reduce 62 omitted

def _reduce_63(val, _values, result)
 result = MotionNode.new(val[0],val[5],val[7]) 
    result
end

def _reduce_64(val, _values, result)
 result = val 
    result
end

def _reduce_65(val, _values, result)
 result = val[0] << val[1] 
    result
end

def _reduce_66(val, _values, result)
 result = SpeedNode.new(val[4]) 
    result
end

def _reduce_67(val, _values, result)
 result = TerminationNode.new(val[4]) 
    result
end

def _reduce_68(val, _values, result)
 result = OffsetNode.new(val[4]) 
    result
end

def _reduce_69(val, _values, result)
 result = TimeNode.new(val[2],val[4],val[6]) 
    result
end

def _reduce_70(val, _values, result)
 result = SkipNode.new(val[4],val[5]) 
    result
end

def _reduce_71(val, _values, result)
 result = val[1] 
    result
end

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

def _reduce_79(val, _values, result)
 result = [val[0],val[1]] 
    result
end

def _reduce_80(val, _values, result)
 result = [:max_speed,:max_speed] 
    result
end

def _reduce_81(val, _values, result)
 result = [val[0],val[2]] 
    result
end

def _reduce_82(val, _values, result)
 result = UnitsNode.new(val[0]) 
    result
end

def _reduce_83(val, _values, result)
 result = UnitsNode.new(val[0]) 
    result
end

def _reduce_84(val, _values, result)
 result = LabelDefinitionNode.new(val[0]) 
    result
end

def _reduce_85(val, _values, result)
 result = DefinitionNode.new(val[0],val[2]) 
    result
end

def _reduce_86(val, _values, result)
 result = AssignmentNode.new(val[0],val[2]) 
    result
end

def _reduce_87(val, _values, result)
 result = AssignmentNode.new(
                                           val[0],
                                           ExpressionNode.new(val[0],val[1],val[3])
                                         )
                                       
    result
end

def _reduce_88(val, _values, result)
 result = AssignmentNode.new(
                                           val[0],
                                           ExpressionNode.new(val[0],val[1],val[3])
                                         )
                                       
    result
end

def _reduce_89(val, _values, result)
 result = VarMethodNode.new(val[0],val[2]) 
    result
end

def _reduce_90(val, _values, result)
 result = VarNode.new(val[0]) 
    result
end

def _reduce_91(val, _values, result)
 result = val[0] 
    result
end

def _reduce_92(val, _values, result)
 result = val[0] 
    result
end

def _reduce_93(val, _values, result)
 val[1].grouped = true; result = val[1] 
    result
end

def _reduce_94(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

def _reduce_95(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

def _reduce_96(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

def _reduce_97(val, _values, result)
 result = ExpressionNode.new(val[1],val[0],nil) 
    result
end

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

def _reduce_114(val, _values, result)
 val[1] = val[1].to_i * -1 if val[0] == "-"; result = DigitNode.new(val[1]) 
    result
end

def _reduce_115(val, _values, result)
 val[1] = val[1].to_f * -1 if val[0] == "-"; result = RealNode.new(val[1]) 
    result
end

# reduce 116 omitted

# reduce 117 omitted

def _reduce_118(val, _values, result)
 result = DigitNode.new(val[0]) 
    result
end

def _reduce_119(val, _values, result)
 result = RealNode.new(val[0]) 
    result
end

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

def _reduce_128(val, _values, result)
 result = ArgumentNode.new(val[2].to_i) 
    result
end

def _reduce_129(val, _values, result)
 result = VisionRegisterNode.new(val[2].to_i) 
    result
end

def _reduce_130(val, _values, result)
 result = PositionNode.new(val[2].to_i) 
    result
end

def _reduce_131(val, _values, result)
 result = NumregNode.new(val[2].to_i) 
    result
end

def _reduce_132(val, _values, result)
 result = PosregNode.new(val[2].to_i) 
    result
end

def _reduce_133(val, _values, result)
 result = IONode.new(val[0], val[2].to_i) 
    result
end

def _reduce_134(val, _values, result)
 result = IONode.new(val[0], val[2].to_i) 
    result
end

def _reduce_135(val, _values, result)
 result = CommentNode.new(val[0]) 
    result
end

def _reduce_136(val, _values, result)
 result = TerminatorNode.new 
    result
end

def _reduce_137(val, _values, result)
 result = val[0] 
    result
end

def _reduce_138(val, _values, result)
 result = TerminatorNode.new 
    result
end

# reduce 139 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module TPPlus
