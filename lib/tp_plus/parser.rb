#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.10
# from Racc grammer file "".
#

require 'racc/parser.rb'
module TPPlus
  class Parser < Racc::Parser


  include TPPlus::Nodes

  attr_reader :interpreter
  def initialize(scanner, interpreter = TPPlus::Interpreter.new)
    @scanner       = scanner
    @interpreter   = interpreter
    super()
  end

  def next_token
    t = @scanner.next_token
    @interpreter.line_count += 1 if t && t[0] == :NEWLINE

    #puts t.inspect
    t
  end

  def parse
    do_parse
    @interpreter
  rescue Racc::ParseError => e
    raise "Parse error on line #{@interpreter.line_count+1}: #{e}"
  end
##### State transition tables begin ###

racc_action_table = [
    59,    20,    33,    25,    24,    47,    46,    45,    45,    33,
   213,    25,    45,    25,    30,    60,    54,    54,    57,    57,
    33,    54,    34,    57,    24,    33,    23,   139,   138,    34,
    20,    33,    25,    24,   194,   148,   194,    53,    53,   148,
    34,   152,    53,    30,    26,    34,   194,    27,    18,    19,
    73,    34,    21,    22,    28,    23,    58,   145,    81,    82,
    85,    86,    83,    84,   153,    87,    88,    90,    91,    92,
    94,    89,    93,    26,    33,    33,    27,    18,    19,    69,
    45,    21,    22,    28,    20,    33,    25,    24,   173,    54,
    70,    57,    98,    97,    34,    34,   218,    30,   152,    71,
    72,   215,   216,   217,   219,    34,   192,   193,   -60,    23,
    53,   -60,    81,    82,    85,    86,    83,    84,   144,    87,
    88,    90,    91,    92,    94,    89,    93,    26,    45,   156,
    27,    18,    19,   159,    45,    21,    22,    28,    20,    67,
    25,    24,    68,    54,   -58,    57,    20,   -58,    45,    45,
    45,    30,    20,    33,    25,    24,   143,    54,    54,    57,
    57,   142,   161,    23,    53,    30,   162,    20,    33,    25,
    24,   -57,    92,    34,   -57,    93,   163,    23,    53,    53,
    30,    26,   164,   165,    27,    18,    19,   166,    34,    21,
    22,    28,    23,   -59,   167,    26,   -59,    45,    27,    18,
    19,   168,    41,    21,    22,    28,    54,   170,    57,   141,
    26,   140,    45,    27,    18,    19,   177,    45,    21,    22,
    28,    54,    45,    57,    40,    45,    54,    53,    57,    45,
    45,    54,    39,    57,    54,   178,    57,   159,    54,    54,
    57,    57,    53,   230,    47,    46,    45,    53,    47,    46,
    45,   124,    53,   181,   182,    53,    47,    46,    45,    53,
    53,    81,    82,    85,    86,    83,    84,   183,    87,    88,
    90,    91,    92,    94,    89,    93,    47,    46,    45,    47,
    46,    45,   184,   185,    81,    82,    85,    86,    83,    84,
   137,    87,    88,    90,    91,    92,    94,    89,    93,   118,
   117,   115,   116,   113,   186,   114,   187,   112,    47,    46,
    45,   188,   124,   132,    47,    46,    45,   124,    47,    46,
    81,    82,    85,    86,    83,    84,    45,    87,    88,    90,
    91,    92,    94,    89,    93,    81,    82,    85,    86,    83,
    84,    60,    87,    88,    90,    91,    92,    94,    89,    93,
    81,    82,    85,    86,    83,    84,    77,    87,    88,    90,
    91,    92,    94,    89,    93,    81,    82,    85,    86,    83,
    84,   -74,    87,    88,    90,    91,    92,    94,    89,    93,
    81,    82,    85,    86,    83,    84,   199,    87,    88,    90,
    91,    92,    94,    89,    93,    81,    82,    85,    86,    83,
    84,   200,    87,    88,    90,    91,    92,    94,    89,    93,
    81,    82,    85,    86,    83,    84,   201,    87,    88,    90,
    91,    92,    94,    89,    93,    81,    82,    85,    86,    83,
    84,    58,    87,    88,    90,    91,    92,    94,    89,    93,
    81,    82,    85,    86,    83,    84,    45,    87,    88,    90,
    91,    92,    94,    89,    93,    47,    46,    45,    47,    46,
    45,   124,   206,    20,   131,   206,   124,   212,   146,   214,
   130,   220,   221,   222,   223,   224,   225,   226,   227,   129,
   119,    45,   124,    20,   237,   238,   239,   240,   241,   243,
   244,    36,   248,    45,   250 ]

racc_action_check = [
    23,     4,     4,     4,     4,    22,    22,    22,    78,   120,
   208,   190,    80,   189,     4,    23,    22,    78,    22,    78,
   198,    80,     4,    80,   241,   195,     4,    99,    99,   120,
    63,    63,    63,    63,   190,   121,   189,    22,    78,   122,
   198,   123,    80,    63,     4,   195,   241,     4,     4,     4,
    36,    63,     4,     4,     4,    63,    23,   117,    63,    63,
    63,    63,    63,    63,   127,    63,    63,    63,    63,    63,
    63,    63,    63,    63,     2,    38,    63,    63,    63,    30,
    54,    63,    63,    63,    65,    65,    65,    65,   150,    54,
    32,    54,    56,    56,     2,    38,   211,    65,   150,    32,
    32,   211,   211,   211,   211,    65,   180,   180,    13,    65,
    54,    13,    65,    65,    65,    65,    65,    65,   116,    65,
    65,    65,    65,    65,    65,    65,    65,    65,    28,   131,
    65,    65,    65,   132,    40,    65,    65,    65,    37,    29,
    37,    37,    29,    40,     6,    40,    25,     6,    53,    79,
    24,    37,     0,     0,     0,     0,   115,    53,    79,    53,
    79,   114,   140,    37,    40,     0,   141,   148,   148,   148,
   148,     8,    96,     0,     8,    96,   142,     0,    53,    79,
   148,    37,   143,   144,    37,    37,    37,   145,   148,    37,
    37,    37,   148,     9,   146,     0,     9,    70,     0,     0,
     0,   147,    20,     0,     0,     0,    70,   149,    70,   113,
   148,   112,    67,   148,   148,   148,   153,    26,   148,   148,
   148,    67,    27,    67,    19,   130,    26,    70,    26,   129,
    68,    27,    18,    27,   130,   156,   130,   157,   129,    68,
   129,    68,    67,   222,   222,   222,   222,    26,    58,    58,
    58,   159,    27,   161,   162,   130,    39,    39,    39,   129,
    68,    95,    95,    95,    95,    95,    95,   163,    95,    95,
    95,    95,    95,    95,    95,    95,   225,   225,   225,   223,
   223,   223,   164,   165,    76,    76,    76,    76,    76,    76,
    95,    76,    76,    76,    76,    76,    76,    76,    76,    59,
    59,    59,    59,    59,   166,    59,   167,    59,   152,   152,
   152,   171,   173,    76,   201,   201,   201,   174,    59,    59,
   155,   155,   155,   155,   155,   155,   177,   155,   155,   155,
   155,   155,   155,   155,   155,    49,    49,    49,    49,    49,
    49,    45,    49,    49,    49,    49,    49,    49,    49,    49,
   154,   154,   154,   154,   154,   154,    48,   154,   154,   154,
   154,   154,   154,   154,   154,   136,   136,   136,   136,   136,
   136,    50,   136,   136,   136,   136,   136,   136,   136,   136,
   126,   126,   126,   126,   126,   126,   191,   126,   126,   126,
   126,   126,   126,   126,   126,   135,   135,   135,   135,   135,
   135,   192,   135,   135,   135,   135,   135,   135,   135,   135,
   125,   125,   125,   125,   125,   125,   193,   125,   125,   125,
   125,   125,   125,   125,   125,   128,   128,   128,   128,   128,
   128,   194,   128,   128,   128,   128,   128,   128,   128,   128,
   134,   134,   134,   134,   134,   134,    77,   134,   134,   134,
   134,   134,   134,   134,   134,    21,    21,    21,   139,   139,
   139,    66,   199,   200,    75,   204,   206,   207,   118,   209,
    72,   213,   214,   215,   216,   217,   218,   219,   221,    71,
    60,   224,    69,   226,   228,   229,   231,   232,   233,   236,
   238,     1,   242,   243,   245 ]

racc_action_pointer = [
   149,   491,    70,   nil,    -2,   nil,    98,   nil,   125,   147,
   nil,   nil,   nil,    62,   nil,   nil,   nil,   nil,   174,   166,
   174,   429,   -21,    -2,   122,   143,   189,   194,   100,    93,
    62,   nil,    61,   nil,   nil,   nil,    50,   135,    71,   230,
   106,   nil,   nil,   nil,   nil,   324,   nil,   nil,   297,   304,
   312,   nil,   nil,   120,    52,   nil,    66,   nil,   222,   292,
   452,   nil,   nil,    27,   nil,    81,   437,   184,   202,   458,
   169,   450,   441,   nil,   nil,   405,   253,   418,   -20,   121,
   -16,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   230,   130,   nil,   nil,   -32,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   150,   148,   100,    95,    57,    -4,   407,   nil,
     5,   -12,    -8,   -16,   nil,   379,   349,    46,   394,   201,
   197,   104,   116,   nil,   409,   364,   334,   nil,   nil,   432,
   135,   139,   149,   155,   156,   160,   167,   153,   164,   159,
    41,   nil,   282,   158,   319,   289,   175,   220,   nil,   227,
   nil,   191,   192,   205,   220,   221,   242,   244,   nil,   nil,
   nil,   263,   nil,   288,   293,   nil,   nil,   298,   nil,   nil,
    54,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     8,
     6,   326,   343,   358,   373,    21,   nil,   nil,    16,   445,
   460,   288,   nil,   nil,   448,   nil,   442,   407,   -18,   410,
   nil,    82,   nil,   411,   444,   415,   416,   417,   418,   419,
   nil,   418,   218,   253,   453,   250,   480,   nil,   424,   426,
   nil,   426,   427,   429,   nil,   nil,   430,   nil,   465,   nil,
   nil,    18,   432,   465,   nil,   434,   nil,   nil,   nil,   nil,
   nil ]

racc_action_default = [
    -1,  -137,    -2,    -3,    -7,   -10,   -11,   -12,   -13,   -14,
   -15,   -16,   -17,   -18,   -19,   -20,   -21,   -22,  -137,  -137,
  -137,  -137,  -137,   -87,  -137,  -137,  -114,  -114,  -137,  -137,
  -137,   -81,  -137,  -132,  -133,  -134,  -137,    -5,    -6,  -137,
  -114,   -31,   -32,   -73,   -74,   -87,  -115,  -116,  -137,   -34,
  -110,   -88,   -89,  -114,  -114,  -109,  -137,  -113,   -38,  -137,
  -137,   -41,   -42,    -8,  -110,    -8,  -136,  -114,  -114,  -136,
  -114,  -137,  -137,   251,    -4,  -137,  -137,  -137,  -114,  -114,
  -114,   -95,   -96,   -97,   -98,   -99,  -100,  -101,  -102,  -103,
  -104,  -105,  -106,  -107,  -108,  -137,   -94,  -111,  -112,  -137,
   -36,   -39,   -40,   -82,  -117,  -118,  -119,  -120,  -121,  -122,
  -123,  -124,  -137,  -137,  -137,  -137,  -137,  -137,  -137,   -86,
    -9,   -62,   -62,  -137,  -135,   -55,   -56,  -137,   -83,  -114,
  -114,  -137,   -25,   -33,   -91,   -92,   -93,   -90,   -35,  -137,
  -137,  -137,  -137,  -137,  -137,  -137,  -137,  -137,    -8,  -137,
   -52,   -46,  -137,  -137,   -84,   -85,  -137,   -24,   -26,  -136,
   -37,  -137,  -137,  -137,  -137,  -137,  -137,  -137,   -43,   -61,
   -44,  -137,   -47,  -136,  -136,   -49,   -50,  -137,   -23,   -27,
  -137,  -125,  -126,  -127,  -128,  -129,  -130,  -131,   -45,  -137,
  -137,  -137,  -137,  -137,  -137,  -137,   -53,   -54,  -137,  -137,
  -137,  -137,   -51,   -48,   -63,   -64,  -136,  -137,  -137,  -137,
   -65,  -137,   -28,  -137,  -137,  -137,  -137,  -137,  -137,  -137,
   -29,  -137,  -137,  -137,  -137,  -137,  -137,   -30,  -137,  -137,
   -80,  -137,  -137,  -137,   -77,   -78,   -72,   -66,  -137,   -67,
   -68,  -137,  -137,  -137,   -79,  -137,   -75,   -76,   -70,   -71,
   -69 ]

racc_goto_table = [
    32,    42,    48,    62,    32,   123,   101,   110,   127,   100,
   158,    49,    37,   151,   150,    63,    65,   157,   121,    75,
   122,    44,    50,    99,    61,   205,   196,   196,    66,    76,
   210,   171,     2,   195,   198,   179,    38,    32,   247,    44,
   172,   174,    95,    96,   147,   149,   197,   197,    37,    74,
   204,     1,   228,   233,   245,   242,   125,   126,   102,   128,
   103,   104,   105,    32,   106,    32,   107,   134,   135,   136,
   108,   109,   111,   nil,   nil,   nil,   nil,   133,   246,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   101,   nil,   nil,
   160,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   180,   nil,
   175,   nil,   nil,   169,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   189,   190,   nil,   nil,   nil,   nil,   154,   155,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    37,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   102,
   nil,   nil,   nil,   nil,   nil,   211,   nil,   nil,    32,   208,
   nil,   nil,   176,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   235,   nil,   nil,   nil,   191,   207,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   209,   229,   231,   236,   202,   nil,   nil,   203,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    44,    44,   232,   234,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   249 ]

racc_goto_check = [
    26,    19,    19,    24,    26,    23,    25,    25,    23,    28,
    22,    20,     4,    32,    30,    20,    20,    21,     5,    19,
     5,    26,    26,    27,    26,    37,    14,    14,    26,    20,
    37,    31,     2,    34,    34,    22,     2,    26,    10,    26,
    32,    33,    20,    20,    29,    29,     9,     9,     4,     3,
    36,     1,    38,    39,    40,    41,    20,    20,    26,    20,
    42,    50,    51,    26,    52,    26,    53,    20,    20,    20,
    54,    55,    56,   nil,   nil,   nil,   nil,    26,    14,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,
    28,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,
    25,   nil,   nil,     5,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    23,    23,   nil,   nil,   nil,   nil,    20,    20,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,
   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,    26,    25,
   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    25,   nil,   nil,   nil,    26,    24,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    26,    19,    19,    24,     4,   nil,   nil,     4,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    26,    26,    26,    26,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    26 ]

racc_goto_pointer = [
   nil,    51,    32,    12,    10,   -45,   nil,   nil,   nil,  -143,
  -203,   nil,   nil,   nil,  -163,   nil,   nil,   nil,   nil,   -20,
   -11,  -115,  -122,   -61,   -22,   -52,     0,   -35,   -49,   -77,
  -109,  -119,  -110,  -111,  -156,   nil,  -149,  -174,  -170,  -172,
  -187,  -181,     1,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,     3,     5,     7,    11,    12,    13,   nil ]

racc_goto_default = [
   nil,   nil,   120,     3,     4,   nil,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,   nil,
   nil,   nil,   nil,   nil,    31,    43,    64,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    29,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    51,    52,    78,    79,    80,    55,    56,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    35 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 64, :_reduce_none,
  1, 64, :_reduce_2,
  1, 65, :_reduce_3,
  3, 65, :_reduce_4,
  2, 65, :_reduce_5,
  2, 65, :_reduce_6,
  1, 65, :_reduce_7,
  0, 68, :_reduce_none,
  1, 68, :_reduce_9,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  6, 80, :_reduce_23,
  5, 80, :_reduce_24,
  0, 84, :_reduce_none,
  1, 84, :_reduce_26,
  2, 84, :_reduce_27,
  6, 85, :_reduce_28,
  7, 85, :_reduce_29,
  8, 85, :_reduce_30,
  2, 87, :_reduce_31,
  2, 78, :_reduce_32,
  4, 79, :_reduce_33,
  2, 79, :_reduce_34,
  4, 77, :_reduce_35,
  1, 90, :_reduce_36,
  3, 90, :_reduce_37,
  0, 90, :_reduce_38,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  2, 73, :_reduce_41,
  2, 72, :_reduce_42,
  5, 75, :_reduce_43,
  5, 75, :_reduce_44,
  6, 81, :_reduce_45,
  1, 93, :_reduce_46,
  2, 93, :_reduce_47,
  5, 95, :_reduce_48,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  4, 94, :_reduce_51,
  0, 94, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  3, 76, :_reduce_55,
  3, 76, :_reduce_56,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  2, 92, :_reduce_61,
  0, 92, :_reduce_none,
  8, 71, :_reduce_63,
  1, 99, :_reduce_64,
  2, 99, :_reduce_65,
  6, 100, :_reduce_66,
  6, 100, :_reduce_67,
  6, 100, :_reduce_68,
  8, 100, :_reduce_69,
  7, 100, :_reduce_70,
  2, 104, :_reduce_71,
  0, 104, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  3, 101, :_reduce_79,
  1, 101, :_reduce_80,
  1, 74, :_reduce_81,
  3, 69, :_reduce_82,
  3, 70, :_reduce_83,
  4, 70, :_reduce_84,
  4, 70, :_reduce_85,
  3, 89, :_reduce_86,
  1, 89, :_reduce_87,
  1, 83, :_reduce_88,
  1, 83, :_reduce_89,
  3, 83, :_reduce_90,
  3, 107, :_reduce_91,
  3, 107, :_reduce_92,
  3, 107, :_reduce_93,
  2, 107, :_reduce_94,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  2, 111, :_reduce_111,
  2, 111, :_reduce_112,
  1, 112, :_reduce_none,
  0, 112, :_reduce_none,
  1, 88, :_reduce_115,
  1, 88, :_reduce_116,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  4, 119, :_reduce_125,
  4, 118, :_reduce_126,
  4, 117, :_reduce_127,
  4, 113, :_reduce_128,
  4, 116, :_reduce_129,
  4, 114, :_reduce_130,
  4, 115, :_reduce_131,
  1, 120, :_reduce_132,
  1, 67, :_reduce_133,
  1, 67, :_reduce_134,
  1, 86, :_reduce_135,
  0, 86, :_reduce_none ]

racc_reduce_n = 137

racc_shift_n = 251

racc_token_table = {
  false => 0,
  :error => 1,
  :ASSIGN => 2,
  :AT_SYM => 3,
  :COMMENT => 4,
  :JUMP => 5,
  :IO_METHOD => 6,
  :INPUT => 7,
  :OUTPUT => 8,
  :NUMREG => 9,
  :POSREG => 10,
  :VREG => 11,
  :SREG => 12,
  :POSITION => 13,
  :TIME_SEGMENT => 14,
  :ARG => 15,
  :MOVE => 16,
  :DOT => 17,
  :TO => 18,
  :AT => 19,
  :TERM => 20,
  :OFFSET => 21,
  :SKIP => 22,
  :SEMICOLON => 23,
  :NEWLINE => 24,
  :STRING => 25,
  :REAL => 26,
  :DIGIT => 27,
  :WORD => 28,
  :EQUAL => 29,
  :UNITS => 30,
  :EEQUAL => 31,
  :NOTEQUAL => 32,
  :GTE => 33,
  :LTE => 34,
  :LT => 35,
  :GT => 36,
  :BANG => 37,
  :PLUS => 38,
  :MINUS => 39,
  :STAR => 40,
  :SLASH => 41,
  :DIV => 42,
  :AND => 43,
  :OR => 44,
  :MOD => 45,
  :IF => 46,
  :ELSE => 47,
  :END => 48,
  :UNLESS => 49,
  :WAIT_FOR => 50,
  :WAIT_UNTIL => 51,
  :TIMEOUT => 52,
  :AFTER => 53,
  :FANUC_USE => 54,
  :FANUC_SET => 55,
  :CASE => 56,
  :WHEN => 57,
  "(" => 58,
  "," => 59,
  ")" => 60,
  "[" => 61,
  "]" => 62 }

racc_nt_base = 63

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ASSIGN",
  "AT_SYM",
  "COMMENT",
  "JUMP",
  "IO_METHOD",
  "INPUT",
  "OUTPUT",
  "NUMREG",
  "POSREG",
  "VREG",
  "SREG",
  "POSITION",
  "TIME_SEGMENT",
  "ARG",
  "MOVE",
  "DOT",
  "TO",
  "AT",
  "TERM",
  "OFFSET",
  "SKIP",
  "SEMICOLON",
  "NEWLINE",
  "STRING",
  "REAL",
  "DIGIT",
  "WORD",
  "EQUAL",
  "UNITS",
  "EEQUAL",
  "NOTEQUAL",
  "GTE",
  "LTE",
  "LT",
  "GT",
  "BANG",
  "PLUS",
  "MINUS",
  "STAR",
  "SLASH",
  "DIV",
  "AND",
  "OR",
  "MOD",
  "IF",
  "ELSE",
  "END",
  "UNLESS",
  "WAIT_FOR",
  "WAIT_UNTIL",
  "TIMEOUT",
  "AFTER",
  "FANUC_USE",
  "FANUC_SET",
  "CASE",
  "WHEN",
  "\"(\"",
  "\",\"",
  "\")\"",
  "\"[\"",
  "\"]\"",
  "$start",
  "program",
  "statements",
  "statement",
  "terminator",
  "block",
  "definition",
  "assignment",
  "motion_statement",
  "jump",
  "io_method",
  "label_definition",
  "conditional",
  "inline_conditional",
  "program_call",
  "use_statement",
  "set_statement",
  "wait_statement",
  "case_statement",
  "indirectable",
  "expression",
  "wait_modifiers",
  "wait_modifier",
  "swallow_newlines",
  "label",
  "number",
  "var",
  "args",
  "arg",
  "else_block",
  "case_conditions",
  "case_else",
  "case_condition",
  "case_allowed_condition",
  "case_allowed_statement",
  "inlineable",
  "motion_modifiers",
  "motion_modifier",
  "speed",
  "time",
  "time_seg_actions",
  "optional_lpos_arg",
  "definable",
  "factor",
  "operator",
  "relop",
  "addop",
  "mulop",
  "signed_number",
  "sign",
  "numreg",
  "output",
  "input",
  "posreg",
  "position",
  "vreg",
  "argument",
  "comment" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
 @interpreter.nodes = val[0].flatten 
    result
end

def _reduce_3(val, _values, result)
 result = val 
    result
end

def _reduce_4(val, _values, result)
 result = val[0] << val[1] << val[2] 
    result
end

def _reduce_5(val, _values, result)
 result = val[0] << val[1] 
    result
end

def _reduce_6(val, _values, result)
 result = [val[0]] << val[1] 
    result
end

def _reduce_7(val, _values, result)
 result = [val[0]] 
    result
end

# reduce 8 omitted

def _reduce_9(val, _values, result)
 result = val[0] 
    result
end

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

def _reduce_23(val, _values, result)
 result = WaitForNode.new(val[2], val[4]) 
    result
end

def _reduce_24(val, _values, result)
 result = WaitUntilNode.new(val[2],val[4]) 
    result
end

# reduce 25 omitted

def _reduce_26(val, _values, result)
 result = val[0] 
    result
end

def _reduce_27(val, _values, result)
 result = val[0].merge(val[1]) 
    result
end

def _reduce_28(val, _values, result)
 result = { label: val[4] } 
    result
end

def _reduce_29(val, _values, result)
 result = { timeout: [val[4],val[5]] } 
    result
end

def _reduce_30(val, _values, result)
 result = { timeout: [val[4],val[6]] } 
    result
end

def _reduce_31(val, _values, result)
 result = val[1] 
    result
end

def _reduce_32(val, _values, result)
 result = UseNode.new(val[0],val[1]) 
    result
end

def _reduce_33(val, _values, result)
 result = SetNode.new(val[0],val[1],val[3]) 
    result
end

def _reduce_34(val, _values, result)
 result = SetNode.new(val[0],nil,val[1]) 
    result
end

def _reduce_35(val, _values, result)
 result = CallNode.new(val[0],val[2]) 
    result
end

def _reduce_36(val, _values, result)
 result = [val[0]] 
    result
end

def _reduce_37(val, _values, result)
 result = val[0] << val[2] 
    result
end

def _reduce_38(val, _values, result)
 result = [] 
    result
end

# reduce 39 omitted

# reduce 40 omitted

def _reduce_41(val, _values, result)
 result = IOMethodNode.new(val[0],val[1]) 
    result
end

def _reduce_42(val, _values, result)
 result = JumpNode.new(val[1]) 
    result
end

def _reduce_43(val, _values, result)
 result = ConditionalNode.new("if",val[1],val[2],val[3]) 
    result
end

def _reduce_44(val, _values, result)
 result = ConditionalNode.new("unless",val[1],val[2],val[3]) 
    result
end

def _reduce_45(val, _values, result)
 result = CaseNode.new(val[1],val[3],val[4]) 
    result
end

def _reduce_46(val, _values, result)
 result = val 
    result
end

def _reduce_47(val, _values, result)
 result = val[0] << val[1] << val[2] 
    result
end

def _reduce_48(val, _values, result)
 result = CaseConditionNode.new(val[1],val[3]) 
    result
end

# reduce 49 omitted

# reduce 50 omitted

def _reduce_51(val, _values, result)
 result = CaseConditionNode.new(nil,val[2]) 
    result
end

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

def _reduce_55(val, _values, result)
 result = InlineConditionalNode.new("if",val[2],val[0]) 
    result
end

def _reduce_56(val, _values, result)
 result = InlineConditionalNode.new("unless",val[2],val[0]) 
    result
end

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

def _reduce_61(val, _values, result)
 result = val[1] 
    result
end

# reduce 62 omitted

def _reduce_63(val, _values, result)
 result = MotionNode.new(val[0],val[5],val[7]) 
    result
end

def _reduce_64(val, _values, result)
 result = val 
    result
end

def _reduce_65(val, _values, result)
 result = val[0] << val[1] 
    result
end

def _reduce_66(val, _values, result)
 result = SpeedNode.new(val[4]) 
    result
end

def _reduce_67(val, _values, result)
 result = TerminationNode.new(val[4]) 
    result
end

def _reduce_68(val, _values, result)
 result = OffsetNode.new(val[4]) 
    result
end

def _reduce_69(val, _values, result)
 result = TimeNode.new(val[2],val[4],val[6]) 
    result
end

def _reduce_70(val, _values, result)
 result = SkipNode.new(val[4],val[5]) 
    result
end

def _reduce_71(val, _values, result)
 result = val[1] 
    result
end

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

def _reduce_79(val, _values, result)
 result = { speed: val[0], units: val[2] } 
    result
end

def _reduce_80(val, _values, result)
 result = { speed: val[0], units: nil } 
    result
end

def _reduce_81(val, _values, result)
 result = LabelDefinitionNode.new(val[0]) 
    result
end

def _reduce_82(val, _values, result)
 result = DefinitionNode.new(val[0],val[2]) 
    result
end

def _reduce_83(val, _values, result)
 result = AssignmentNode.new(val[0],val[2]) 
    result
end

def _reduce_84(val, _values, result)
 result = AssignmentNode.new(
                                           val[0],
                                           ExpressionNode.new(val[0],val[1],val[3])
                                         )
                                       
    result
end

def _reduce_85(val, _values, result)
 result = AssignmentNode.new(
                                           val[0],
                                           ExpressionNode.new(val[0],val[1],val[3])
                                         )
                                       
    result
end

def _reduce_86(val, _values, result)
 result = VarMethodNode.new(val[0],val[2]) 
    result
end

def _reduce_87(val, _values, result)
 result = VarNode.new(val[0]) 
    result
end

def _reduce_88(val, _values, result)
 result = val[0] 
    result
end

def _reduce_89(val, _values, result)
 result = val[0] 
    result
end

def _reduce_90(val, _values, result)
 val[1].grouped = true; result = val[1] 
    result
end

def _reduce_91(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

def _reduce_92(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

def _reduce_93(val, _values, result)
 result = ExpressionNode.new(val[0],val[1],val[2]) 
    result
end

def _reduce_94(val, _values, result)
 result = ExpressionNode.new(val[1],val[0],nil) 
    result
end

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

def _reduce_111(val, _values, result)
 val[1] = val[1].to_i * -1 if val[0] == "-"; result = DigitNode.new(val[1]) 
    result
end

def _reduce_112(val, _values, result)
 val[1] = val[1].to_f * -1 if val[0] == "-"; result = RealNode.new(val[1]) 
    result
end

# reduce 113 omitted

# reduce 114 omitted

def _reduce_115(val, _values, result)
 result = DigitNode.new(val[0]) 
    result
end

def _reduce_116(val, _values, result)
 result = RealNode.new(val[0]) 
    result
end

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

def _reduce_125(val, _values, result)
 result = ArgumentNode.new(val[2].to_i) 
    result
end

def _reduce_126(val, _values, result)
 result = VisionRegisterNode.new(val[2].to_i) 
    result
end

def _reduce_127(val, _values, result)
 result = PositionNode.new(val[2].to_i) 
    result
end

def _reduce_128(val, _values, result)
 result = NumregNode.new(val[2].to_i) 
    result
end

def _reduce_129(val, _values, result)
 result = PosregNode.new(val[2].to_i) 
    result
end

def _reduce_130(val, _values, result)
 result = IONode.new(val[0], val[2].to_i) 
    result
end

def _reduce_131(val, _values, result)
 result = IONode.new(val[0], val[2].to_i) 
    result
end

def _reduce_132(val, _values, result)
 result = CommentNode.new(val[0]) 
    result
end

def _reduce_133(val, _values, result)
 result = TerminatorNode.new 
    result
end

def _reduce_134(val, _values, result)
 result = val[0] 
    result
end

def _reduce_135(val, _values, result)
 result = TerminatorNode.new 
    result
end

# reduce 136 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module TPPlus
