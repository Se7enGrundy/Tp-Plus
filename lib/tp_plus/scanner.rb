#--
# DO NOT MODIFY!!!!
# This file is automatically generated by rex 1.0.5
# from lexical definition file "generators/scanner.rex".
#++

require 'racc/parser'
class TPPlus::Scanner < Racc::Parser
  require 'strscan'

  class ScanError < StandardError ; end

  attr_reader   :lineno
  attr_reader   :filename
  attr_accessor :state

  def scan_setup(str)
    @ss = StringScanner.new(str)
    @lineno =  1
    @state  = nil
  end

  def action
    yield
  end

  def scan_str(str)
    scan_setup(str)
    do_parse
  end
  alias :scan :scan_str

  def load_file( filename )
    @filename = filename
    open(filename, "r") do |f|
      scan_setup(f.read)
    end
  end

  def scan_file( filename )
    load_file(filename)
    do_parse
  end


  def next_token
    return if @ss.eos?

    # skips empty actions
    until token = _next_token or @ss.eos?; end
    token
  end

  def _next_token
    text = @ss.peek(1)
    @lineno  +=  1  if text == "\n"
    token = case @state
    when nil
      case
      when (text = @ss.scan(/BLANK/))
        ;

      when (text = @ss.scan(/ON/))
         action { [:ON_OFF, text] }

      when (text = @ss.scan(/OFF/))
         action { [:ON_OFF, text] }

      when (text = @ss.scan(/TRUE/))
         action { [:TRUE_FALSE, text] }

      when (text = @ss.scan(/FALSE/))
         action { [:TRUE_FALSE, text] }

      when (text = @ss.scan(/R(?=\[)/))
         action { [:NUMREG, text] }

      when (text = @ss.scan(/P(?=\[)/))
         action { [:POSITION, text] }

      when (text = @ss.scan(/PR(?=\[)/))
         action { [:POSREG, text] }

      when (text = @ss.scan(/VR(?=\[)/))
         action { [:VREG, text] }

      when (text = @ss.scan(/F(?=\[)/))
         action { [:OUTPUT, text] }

      when (text = @ss.scan(/DI(?=\[)/))
         action { [:INPUT, text] }

      when (text = @ss.scan(/DO(?=\[)/))
         action { [:OUTPUT, text] }

      when (text = @ss.scan(/RI(?=\[)/))
         action { [:INPUT, text] }

      when (text = @ss.scan(/RO(?=\[)/))
         action { [:OUTPUT, text] }

      when (text = @ss.scan(/UI(?=\[)/))
         action { [:INPUT, text] }

      when (text = @ss.scan(/\=/))
         action { [:EQUAL, text] }

      when (text = @ss.scan(/\<\>/))
         action { [:NOTEQUAL, text] }

      when (text = @ss.scan(/\>\=/))
         action { [:GTE, text] }

      when (text = @ss.scan(/\<\=/))
         action { [:LTE, text] }

      when (text = @ss.scan(/\</))
         action { [:LT, text] }

      when (text = @ss.scan(/\>/))
         action { [:GT, text] }

      when (text = @ss.scan(/\+/))
         action { [:PLUS, text] }

      when (text = @ss.scan(/\-/))
         action { [:MINUS, text] }

      when (text = @ss.scan(/\*/))
         action { [:STAR, text] }

      when (text = @ss.scan(/\//))
         action { [:SLASH, text] }

      when (text = @ss.scan(/DIV/))
         action { [:DIV, text] }

      when (text = @ss.scan(/AND/))
         action { [:AND, text] }

      when (text = @ss.scan(/OR/))
         action { [:OR, text] }

      when (text = @ss.scan(/MOD/))
         action { [:MOD, text] }

      when (text = @ss.scan(/;/))
         action { [:SEMICOLON, text] }

      when (text = @ss.scan(/\d+\.\d+/))
         action { [:REAL, text.to_f] }

      when (text = @ss.scan(/\.\d+/))
         action { [:REAL, text.to_f] }

      when (text = @ss.scan(/\d+/))
         action { [:DIGIT, text.to_i] }

      when (text = @ss.scan(/\s+/))
        ;

      when (text = @ss.scan(/[\w\!\?_]+/))
         action { [:WORD, text] }

      when (text = @ss.scan(/./))
         action { [text, text] }

      
      else
        text = @ss.string[@ss.pos .. -1]
        raise  ScanError, "can not match: '" + text + "'"
      end  # if

    else
      raise  ScanError, "undefined state: '" + state.to_s + "'"
    end  # case state
    token
  end  # def _next_token

end # class

if __FILE__ == $0
  exit  if ARGV.size != 1
  filename = ARGV.shift
  rex = TPPlus::Scanner.new
  begin
    rex.load_file  filename
    while  token = rex.next_token
      p token
    end
  rescue
    $stderr.printf  "%s:%d:%s\n", rex.filename, rex.lineno, $!.message
  end
end
